{"task_id": "HumanEval/0", "modified_prompt": "(\"from typing import List\\n\\n\\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\\n    given threshold.\", [{\"input\": \"[1.0, 2.5, 3.5, 6.2, 7.9], 2\", \"output\": \"True\"}, {\"input\": \"[1.0, 3.0, 5.0, 7.0], 2\", \"output\": \"False\"}, {\"input\": \"[], 1\", \"output\": \"False\"}, {\"input\": \"[1.12345, 1.123455], 0.00001\", \"output\": \"True\"}, {\"input\": \"[1.0, 1.1, 1.2, 1.3, 2.0], 0.15\", \"output\": \"True\"}])"}
{"task_id": "HumanEval/1", "modified_prompt": "{\"input\": \"from typing import List\\n\\n\\ndef separate_paren_groups(paren_string: str) -> List[str]:\\n    \\\"\\\"\\\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\\n    separate those group into separate strings and return the list of those.\\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\\n    Ignore any spaces in the input string.\", \"testCases\": [{\"input\": \"(abc)(def)\", \"output\": [\"(abc)\", \"(def)\"]}, {\"input\": \"((abc)(def))\", \"output\": [\"((abc)(def))\"]}, {\"input\": \"(abc) (def)(ghi)\", \"output\": [\"(abc)\", \"(def)\", \"(ghi)\"]}, {\"input\": \"(a(b)c(d)e)\", \"output\": [\"(a(b)c(d)e)\"]}, {\"input\": \"(   abc   ) (   def   )\", \"output\": [\"(   abc   )\", \"(   def   )\"]}, {\"input\": \"\", \"output\": []}]}"}
{"task_id": "HumanEval/2", "modified_prompt": "(\"HumanEval/2\", \"def truncate_number(number: float) -> float:\\n    \\\"\\\"\\\" Given a positive floating point number, it can be decomposed into\\n    and integer part (largest integer smaller than given number) and decimals\\n    (leftover part always smaller than 1).\\n\\n    Return the decimal part of the number.\", [\n  {\"input\": \"11.23\", \"output\": 0.23},\n  {\"input\": \"0.45\", \"output\": 0.45},\n  {\"input\": \"78.90\", \"output\": 0.90},\n  {\"input\": \"8.0\", \"output\": 0.0},\n  {\"input\": \"1.01\", \"output\": 0.01},\n  {\"input\": \"0.99999999\", \"output\": 0.99999999},\n  {\"input\": \"12345.6789\", \"output\": 0.6789},\n  {\"input\": \"5.5\", \"output\": 0.5},\n  {\"input\": \"0.0\", \"output\": 0.0},\n  {\"input\": \"50.00\", \"output\": 0.00}\n])"}
{"task_id": "HumanEval/3", "modified_prompt": "(\"from typing import List\\n\\n\\ndef below_zero(operations: List[int]) -> bool:\\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\\n    at that point function should return True. Otherwise it should return False.\", [{'input': '[10, -5, -7]', 'output': 'True'}, {'input': '[10, 5, -7]', 'output': 'False'}, {'input': '[-10]', 'output': 'True'}, {'input': '[0, -1, 2]', 'output': 'True'}, {'input': '[1, -1, 1, -1]', 'output': 'False'}, {'input': '[]', 'output': 'False'}])"}
{"task_id": "HumanEval/4", "modified_prompt": "(\"from typing import List\\n\\n\\ndef mean_absolute_deviation(numbers: List[float]) -> float:\\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\\n    around the mean of this dataset.\\n    Mean Absolute Deviation is the average absolute difference between each\\n    element and a centerpoint (mean in this case):\\n    MAD = average | x - x_mean |\", {\"test_cases\": [{\"input\": [[-1.0, 0.0, 1.0]], \"output\": 0.6666666666666666}, {\"input\": [[5.0, -1.0, 3.0, 7.0]], \"output\": 2.5}, {\"input\": [[1.0, -1.0, 1.0, -1.0]], \"output\": 1.0}, {\"input\": [[10.0, 12.0, 23.0, -5.0, 0.0]], \"output\": 8.16}, {\"input\": [[1.0, 1.0, 1.0, 1.0]], \"output\": 0.0}, {\"input\": [[0.0, 0.0, 0.0, 0.0]], \"output\": 0.0}]})"}
{"task_id": "HumanEval/5", "modified_prompt": "(\"from typing import List\\n\\n\\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\\n    \\\"\\\"\\\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\\\"\\\"\\\"\",\n[\n  {\"input\": {\"numbers\": [1, 2, 3, 4, 5], \"delimeter\": 0}, \"output\": [1, 0, 2, 0, 3, 0, 4, 0, 5]},\n  {\"input\": {\"numbers\": [7, 8, 9], \"delimeter\": 10}, \"output\": [7, 10, 8, 10, 9]},\n  {\"input\": {\"numbers\": [-1, -2, -3, -4], \"delimeter\": -5}, \"output\": [-1, -5, -2, -5, -3, -5, -4]},\n  {\"input\": {\"numbers\": [11, 22, 33], \"delimeter\": 44}, \"output\": [11, 44, 22, 44, 33]},\n  {\"input\": {\"numbers\": [], \"delimeter\": 1}, \"output\": []},\n  {\"input\": {\"numbers\": [1], \"delimeter\": 2}, \"output\": [1]},\n  {\"input\": {\"numbers\": [2, 4], \"delimeter\": 3}, \"output\": [2, 3, 4]}\n])"}
{"task_id": "HumanEval/6", "modified_prompt": "{\"input\": \"('from typing import List\\n\\ndef parse_nested_parens(paren_string: str) -> List[int]:\\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\\n    For each of the group, output the deepest level of nesting of parentheses.\\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.')\", \"output\": [\"parse_nested_parens('(()()) ((()))')\", \"parse_nested_parens('(()()()) (((())))')\", \"parse_nested_parens('()')\", \"parse_nested_parens('((((((((((((((((((()))))))))))))))))))')\", \"parse_nested_parens('()()()()()')\", \"parse_nested_parens('((()()) ())')\", \"parse_nested_parens('(()) ((())) (())')\", \"parse_nested_parens('')\", \"parse_nested_parens('((((((')\"]}"}
{"task_id": "HumanEval/7", "modified_prompt": "(\"from typing import List\\n\\n\\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\\n    \"\"\" Filter an input list of strings only for ones that contain given substring\", [\n  {\"input\": '[\"apple\", \"banana\", \"cherry\", \"dates\", \"elderberry\"], \"an\"', \"output\": '[\"banana\"]'},\n  {\"input\": '[\"programming\", \"prom\", \"pro\", \"pr\"], \"pro\"', \"output\": '[\"programming\", \"pro\"]'},\n  {\"input\": '[\"odd\", \"mad\", \"sad\", \"glad\"], \"ad\"', \"output\": '[\"mad\", \"sad\", \"glad\"]'},\n  {\"input\": '[], \"test\"', \"output\": '[]'},\n  {\"input\": '[\"this\", \"that\", \"these\", \"those\"], \"th\"', \"output\": '[\"this\", \"that\", \"these\", \"those\"]'},\n  {\"input\": '[\"red\", \"blue\", \"green\", \"yellow\", \"black\"], \"z\"', \"output\": '[]'},\n  {\"input\": '[\"123\", \"456\", \"789\", \"000\"], \"0\"', \"output\": '[\"000\"]'},\n  {\"input\": '[\"class\", \"method\", \"function\", \"variable\"], \"var\"', \"output\": '[\"variable\"]'}\n])"}
{"task_id": "HumanEval/8", "modified_prompt": "(\"from typing import List, Tuple\\n\\n\\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\\n    Empty sum should be equal to 0 and empty product should be equal to 1.\", [{\"input\": \"[5, 2, 4, 3]\", \"output\": (14, 120)}, {\"input\": \"[1, 1, 1, 1, 1, 1]\", \"output\": (6, 1)}, {\"input\": \"[3, 3, 3]\", \"output\": (9, 27)}, {\"input\": \"[-3, 3]\", \"output\": (0, -9)}, {\"input\": \"[]\", \"output\": (0, 1)}, {\"input\": \"[0, 2, 4, 6]\", \"output\": (12, 0)}])"}
{"task_id": "HumanEval/9", "modified_prompt": "{\"input\": \"from typing import List, Tuple\\n\\n\\ndef rolling_max(numbers: List[int]) -> List[int]:\\n    \\\"\\\"\\\" From a given list of integers, generate a list of rolling maximum element found until given moment\\n    in the sequence.\", \"output\": [\n    {\"input\": [3, 4, 5, 1, 2], \"output\": [3, 4, 5, 5, 5]},\n    {\"input\": [1, 2, 3, 4, 5], \"output\": [1, 2, 3, 4, 5]},\n    {\"input\": [5, 4, 3, 2, 1], \"output\": [5, 5, 5, 5, 5]},\n    {\"input\": [1, 3, 2, 5, 4], \"output\": [1, 3, 3, 5, 5]},\n    {\"input\": [3, 1, 4, 2, 5], \"output\": [3, 3, 4, 4, 5]},\n    {\"input\": [3], \"output\": [3]},\n    {\"input\": [], \"output\": []}\n]}"}
{"task_id": "HumanEval/10", "modified_prompt": "(\"def is_palindrome(string: str) -> bool:\\n    \"\"\" Test if given string is a palindrome \"\"\"\\n    return string == string[::-1]\\n\\ndef make_palindrome(string: str) -> str:\\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\\n    Algorithm idea is simple:\\n    - Find the longest postfix of supplied string that is a palindrome.\\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\", [\n{\"input\": \"\\\"racecar\\\"\", \"output\": \"True\"},\n{\"input\": \"\\\"python\\\"\", \"output\": \"False\"},\n{\"input\": \"\\\"nurses run\\\"\", \"output\": \"False\"},\n{\"input\": \"\\\"mom\\\"\", \"output\": \"True\"},\n{\"input\": \"\\\"dad\\\"\", \"output\": \"True\"},\n{\"input\": \"\\\"pipe\\\"\", \"output\": \"epepi\"},\n{\"input\": \"\\\"level\\\"\", \"output\": \"level\"},\n{\"input\": \"\\\"civic\\\"\", \"output\": \"civic\"},\n{\"input\": \"\\\"python\\\"\", \"output\": \"pythonnohtyp\"},\n{\"input\": \"\\\"hello\\\"\", \"output\": \"helloolleh\"}\n])"}
{"task_id": "HumanEval/11", "modified_prompt": "{\"input\": \"('HumanEval/11', 'from typing import List\\n\\n\\ndef string_xor(a: str, b: str) -> str:\\n    \\\"\\\"\\\" Input are two strings a and b consisting only of 1s and 0s.\\n    Perform binary XOR on these inputs and return result also as a string.\", \"tests\": [{\"input\": \"('1101', '1011')\", \"output\": '0110'}, {\"input\": \"('1010', '1001')\", \"output\": '0011'}, {\"input\": \"('1111', '0000')\", \"output\": '1111'}, {\"input\": \"('0010', '0011')\", \"output\": '0001'}, {\"input\": \"('0000', '0000')\", \"output\": '0000'}]}"}
{"task_id": "HumanEval/12", "modified_prompt": "{\"input\": \"('HumanEval/12', 'from typing import List, Optional\\n\\n\\ndef longest(strings: List[str]) -> Optional[str]:\\n    \\\"\\\"\\\" Out of list of strings, return the longest one. Return the first one in case of multiple\\n    strings of the same length. Return None in case the input list is empty.\", \"output\": [\n  {\n    \"input\": [\"string1\", \"longeststring\", \"short\"],\n    \"output\": \"longeststring\"\n  },\n  {\n    \"input\": [\"longest1\", \"longest2\", \"longest3\"],\n    \"output\": \"longest1\"\n  },\n  {\n    \"input\": [\"short\", \"middle\", \"longer\"],\n    \"output\": \"longer\"\n  },\n  {\n    \"input\": [],\n    \"output\": None\n  },\n  {\n    \"input\": [\"\", \"empty\", \"nonempty\"],\n    \"output\": \"nonempty\"\n  },\n  {\n    \"input\": [\"single\"],\n    \"output\": \"single\"\n  }\n]}"}
{"task_id": "HumanEval/13", "modified_prompt": "(\"HumanEval/13\", \"def greatest_common_divisor(a: int, b: int) -> int:\\n    \\\"\\\"\\\" Return a greatest common divisor of two integers a and b\", [\n    {\"input\": \"(10, 15)\", \"output\": \"5\"},\n    {\"input\": \"(17, 23)\", \"output\": \"1\"},\n    {\"input\": \"(100, 105)\", \"output\": \"5\"},\n    {\"input\": \"(44, 56)\", \"output\": \"4\"}, \n    {\"input\": \"(81, 9)\", \"output\": \"9\"},\n    {\"input\": \"(0, 50)\", \"output\": \"50\"},\n    {\"input\": \"(-4, -2)\", \"output\": \"2\"},\n    {\"input\": \"(0, 0)\", \"output\": Exception(\"GCD of 0 and 0 is undefined\")}\n])"}
{"task_id": "HumanEval/14", "modified_prompt": "(\"from typing import List\\n\\n\\ndef all_prefixes(string: str) -> List[str]:\\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\", [{\"input\": \"string: \\\"Hello\\\"\", \"output\": [\"H\", \"He\", \"Hel\", \"Hell\", \"Hello\"]}, {\"input\": \"string: \\\"\\\"\", \"output\": []}, {\"input\": \"string: \\\"a\\\"\", \"output\": [\"a\"]}, {\"input\": \"string: \\\"abc\\\"\", \"output\": [\"a\", \"ab\", \"abc\"]}, {\"input\": \"string: \\\"  \\\"\", \"output\": [\" \", \"  \"]}, {\"input\": \"string: \\\"123\\\"\", \"output\": [\"1\", \"12\", \"123\"]}])"}
{"task_id": "HumanEval/15", "modified_prompt": "(\"def string_sequence(n: int) -> str:\\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\", [{\"input\": \"5\", \"output\": \"0 1 2 3 4 5\"}, {\"input\": \"0\", \"output\": \"0\"}, {\"input\": \"10\", \"output\": \"0 1 2 3 4 5 6 7 8 9 10\"}, {\"input\": \"1\", \"output\": \"0 1\"}, {\"input\": \"2\", \"output\": \"0 1 2\"}])"}
{"task_id": "HumanEval/16", "modified_prompt": "(\"def count_distinct_characters(string: str) -> int:\\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\",\n[{\"input\": \"Hello, World!\", \"output\": 10},\n {\"input\": \"\", \"output\": 0},\n {\"input\": \"AAAAAAAaaaaaa\", \"output\": 1},\n {\"input\": \"1234567890\", \"output\": 10},\n {\"input\": \"',.!@#$%^&*()-_=+{}[]|\\\\:;<>,.?/~`\", \"output\": 29},\n {\"input\": \"special $\\u00E9 character test\", \"output\": 19}])"}
{"task_id": "HumanEval/17", "modified_prompt": "(\"from typing import List\\n\\n\\ndef parse_music(music_string: str) -> List[int]:\\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\\n    not last.\\n\\n    Here is a legend:\\n    \\'o\\' - whole note, lasts four beats\\n    \\'o|\\' - half note, lasts two beats\\n    \\'.|\\' - quater note, lasts one beat\", {\"test_cases\": [{\"input\": \"o|o|.||.||o|o\", \"output\": [2,4,1,1,2,4]}, {\"input\": \"o||o|.|.||.|o|o|.|.||.|o\", \"output\": [2,4,1,1,2,1,4,2,1,1,2,1,4]}, {\"input\": \"o|o|.||o||o||.||o.o|\", \"output\": [2,4,1,4,2,4,1,1,4,2]}, {\"input\": \"o|\", \"output\": [2]}, {\"input\": \"o\", \"output\": [4]}, {\"input\": \".|\", \"output\": [1]}]})"}
{"task_id": "HumanEval/18", "modified_prompt": "(\"def how_many_times(string: str, substring: str) -> int:\\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\", [\n  {\"input\": '(\"hello world\", \"l\")', \"output\": 3},\n  {\"input\": '(\"hello world\", \"o\")', \"output\": 2},\n  {\"input\": '(\"hello world\", \"hello\")', \"output\": 1},\n  {\"input\": '(\"hello world\", \"world\")', \"output\": 1},\n  {\"input\": '(\"hello world\", \" \")', \"output\": 1},\n  {\"input\": '(\"hello world\", \"xyz\")', \"output\": 0},\n  {\"input\": '(\"banana\", \"na\")', \"output\": 2},\n  {\"input\": '(\"hohoho\", \"ho\")', \"output\": 3},\n  {\"input\": '(\"\", \"a\")', \"output\": 0},\n  {\"input\": '(\"a\", \"\")', \"output\": 2}\n])"}
{"task_id": "HumanEval/19", "modified_prompt": "(\"from typing import List\\n\\n\\ndef sort_numbers(numbers: str) -> str:\\n    \\\"\\\"\\\" Input is a space-delimited string of numerals from 'zero' to 'nine'.\\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\\n    Return the string with numbers sorted from smallest to largest\",\n[\n    {\"input\": \"zero six two five \", \"output\": \"zero two five six\"},\n    {\"input\": \"one nine three seven \", \"output\": \"one three seven nine\"},\n    {\"input\": \"four eight zero two \", \"output\": \"zero two four eight\"},\n    {\"input\": \"nine eight seven six \", \"output\": \"six seven eight nine\"},\n    {\"input\": \"one one one one \", \"output\": \"one one one one\"},\n    {\"input\": \"six three nine four\", \"output\": \"three four six nine\"}\n])"}
{"task_id": "HumanEval/20", "modified_prompt": "{\"input\": \"from typing import List, Tuple\\n\\n\\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\\n    \\\"\\\"\\\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\\n    other and return them in order (smaller number, larger number).\", \"output\": [{\"input\": \"[1.0, 2.0, 3.0, 4.0, 5.0]\", \"output\": (1.0, 2.0)}, {\"input\": \"[9.6, 1.2, 3.4, 9.5, 5.9]\", \"output\": (9.5, 9.6)}, {\"input\": \"[-1.0, -0.99, 0.0, 1.0]\", \"output\": (-1.0, -0.99)}, {\"input\": \"[0.1, 0.2, 0.15, 0.12, 0.16]\", \"output\": (0.15, 0.16)}, {\"input\": \"[100.0, -100.1, 50.0, -50.01, 0.0]\", \"output\": (-50.01, -50.0)}]}"}
{"task_id": "HumanEval/21", "modified_prompt": "(\"from typing import List\\n\\n\\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\\n    such that the smallest number will become 0 and the largest will become 1\", [{\"input\": \"[1.0, 2.0, 3.0, 4.0, 5.0]\", \"output\": \"[0.0, 0.25, 0.5, 0.75, 1.0]\"}, {\"input\": \"[-10, 0, 10]\", \"output\": \"[0.0, 0.5, 1.0]\"}, {\"input\": \"[0, 1, 1, 2]\", \"output\": \"[0.0, 0.5, 0.5, 1.0]\"}, {\"input\": \"[100, 200, 300, 400, 500]\", \"output\": \"[0.0, 0.25, 0.5, 0.75, 1.0]\"}, {\"input\": \"[5, 1, 2, 3, 4]\", \"output\": \"[1.0, 0.0, 0.25, 0.5, 0.75]\"}])"}
{"task_id": "HumanEval/22", "modified_prompt": "(\"from typing import List, Any\\n\\n\\ndef filter_internals(values: List[Any]) -> List[int]:\\n    \\\"\\\"\\\" Filter given list of any python values only for integers\", [{\"input\": \"[1, 2, 3, 'hello', True, [10], {'name': 'John'}]\", \"output\": \"[1, 2, 3]\"}, {\"input\": \"['string', False, None, [10], {'name': 'John'}]\", \"output\": \"[]\"}, {\"input\": \"[10, 20, 30, 40]\", \"output\": \"[10, 20, 30, 40]\"}, {\"input\": \"[15, '15', 15.0, 'a', 20]\", \"output\": \"[15, 20]\"}, {\"input\": \"['1', '2', '3']\", \"output\": \"[]\"}, {\"input\": \"[1.5, 2.5, 3.5, 4.5]\", \"output\": \"[]\"}, {\"input\": \"[234, '234', 234.56, 'abc', True, None, [1, 2, 3], {'key': 'value'}]\", \"output\": \"[234]\"}])"}
{"task_id": "HumanEval/23", "modified_prompt": "(\"HumanEval/23\", \"def strlen(string: str) -> int:\\n    \"\"\" Return length of given string\", [\n  {\"input\": \"Hello, world!\", \"output\": 13},\n  {\"input\": \"strlen\", \"output\": 6},\n  {\"input\": \"\", \"output\": 0},\n  {\"input\": \"1234567890\", \"output\": 10},\n  {\"input\": \"   \", \"output\": 3},\n  {\"input\": \"Python programming\", \"output\": 18},\n  {\"input\": \"a\", \"output\": 1}\n])"}
{"task_id": "HumanEval/24", "modified_prompt": "(\"HumanEval/24\", \"def largest_divisor(n: int) -> int:\\n    \\\"\\\"\\\" For a given number n, find the largest number that divides n evenly, smaller than n\", [{\"input\": \"10\", \"output\": \"5\"}, {\"input\": \"20\", \"output\": \"10\"}, {\"input\": \"21\", \"output\": \"7\"}, {\"input\": \"1\", \"output\": \"1\"}, {\"input\": \"30\", \"output\": \"15\"}, {\"input\": \"100\", \"output\": \"50\"}, {\"input\": \"13\", \"output\": \"1\"}, {\"input\": \"450\", \"output\": \"225\"}, {\"input\": \"816\", \"output\": \"408\"}, {\"input\": \"2000\", \"output\": \"1000\"}])"}
{"task_id": "HumanEval/25", "modified_prompt": "(\"from typing import List\\n\\n\\ndef factorize(n: int) -> List[int]:\\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\\n    Input number should be equal to the product of all factors\", [{\"input\": \"factorize(10)\", \"output\": [2, 5]}, {\"input\": \"factorize(13) \", \"output\": [13]}, {\"input\": \"factorize(50)\", \"output\": [2, 5, 5]}, {\"input\": \"factorize(60)\", \"output\": [2, 2, 3, 5]}, {\"input\": \"factorize(1)\", \"output\": []}, {\"input\": \"factorize(0)\", \"output\": []}])"}
{"task_id": "HumanEval/26", "modified_prompt": "(\"from typing import List\\n\\n\\ndef remove_duplicates(numbers: List[int]) -> List[int]:\\n    \"\"\"From a list of integers, remove all elements that occur more than once.\\n    Keep order of elements left the same as in the input.\", [\n{\"input\": \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\", \"output\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},\n{\"input\": \"[1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\", \"output\": [1, 2, 3, 4, 5]},\n{\"input\": \"[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\", \"output\": [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]},\n{\"input\": \"[2, 4, 6, 8, 10, 2, 4, 6, 8, 10]\", \"output\": [2, 4, 6, 8, 10]},\n{\"input\": \"[-1, -2, -3, -1, -2, -3]\", \"output\": [-1, -2, -3]},\n{\"input\": \"[100, 200, 300, 100, 200, 300]\", \"output\": [100, 200, 300]},\n{\"input\": \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"output\": [0]},\n{\"input\": \"[]\", \"output\": []}\n])"}
{"task_id": "HumanEval/27", "modified_prompt": "(\"def flip_case(string: str) -> str:\\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\", [\n{\"input\": \"This is An Example String\", \"output\": \"tHIS IS aN eXAMPLE sTRING\"},\n{\"input\": \"\", \"output\": \"\"},\n{\"input\": \"1234567890\", \"output\": \"1234567890\"},\n{\"input\": \"HELLO\", \"output\": \"hello\"},\n{\"input\": \"world\", \"output\": \"WORLD\"},\n{\"input\": \"PYTHON is Fun\", \"output\": \"python IS fUN\"},\n{\"input\": \"JaVaScRiPt\", \"output\": \"jAvAsCrIpT\"}\n])"}
{"task_id": "HumanEval/28", "modified_prompt": "(\"from typing import List\\n\\n\\ndef concatenate(strings: List[str]) -> str:\\n    \\\"\\\"\\\" Concatenate list of strings into a single string\", [\n{\"input\": '[\"Hello\", \" \", \"World\", \"!\"]', \"output\": \"Hello World!\"},\n{\"input\": '[\"\", \"\", \"\", \"\"]', \"output\": \"\"},\n{\"input\": '[\"123\", \"456\", \"789\"]', \"output\": \"123456789\"},\n{\"input\": '[\"a\", \"b\", \"c\", \"d\", \"e\"]', \"output\": \"abcde\"},\n{\"input\": '[\", \", \". \", \"? \", \"! \", \": \"]', \"output\": \", . ? ! : \"}\n])"}
{"task_id": "HumanEval/29", "modified_prompt": "(\"from typing import List\\n\\n\\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\", [\n  {\"input\": '[\"dog\", \"dolphin\", \"cat\", \"duck\"], \"d\"', \"output\": '[\"dog\", \"dolphin\", \"duck\"]'},\n  {\"input\": '[\"apple\", \"banana\", \"cherry\", \"date\"], \"a\"', \"output\": '[\"apple\"]'},\n  {\"input\": '[\"pineapple\", \"pear\", \"peach\"], \"pe\"', \"output\": '[\"pear\", \"peach\"]'},\n  {\"input\": '[\"zoo\", \"zebra\", \"zoom\"], \"zo\"', \"output\": '[\"zoo\", \"zoom\"]'},\n  {\"input\": '[\"alpha\", \"bravo\", \"charlie\", \"delta\"], \"e\"', \"output\": '[]'},\n  {\"input\": '[\"\", \"\", \"\", \"\"], \"\"', \"output\": '[\"\", \"\", \"\", \"\"]'},\n  {\"input\": '[\"duck\", \"dove\", \"dog\"], \"du\"', \"output\": '[\"duck\"]'}\n])"}
{"task_id": "HumanEval/30", "modified_prompt": "(\"def get_positive(l: list):\\n    \\\"\\\"\\\"Return only positive numbers in the list.\", [\n  {\"input\": \"[1, -1, 2, -2, 3, -3]\", \"output\": \"[1, 2, 3]\"},\n  {\"input\": \"[0, -5, 10, -15, 20]\", \"output\": \"[0, 10, 20]\"},\n  {\"input\": \"[-5, -10, -20]\", \"output\": \"[]\"},\n  {\"input\": \"[5, 10, 20]\", \"output\": \"[5, 10, 20]\"},\n  {\"input\": \"[]\", \"output\": \"[]\"}\n])"}
{"task_id": "HumanEval/31", "modified_prompt": "(\"HumanEval/31\", \"def is_prime(n):\\n    \\\"\\\"\\\"Return true if a given number is prime, and false otherwise.\", [\n    {\"input\": \"2\", \"output\": True},\n    {\"input\": \"3\", \"output\": True},\n    {\"input\": \"4\", \"output\": False},\n    {\"input\": \"5\", \"output\": True},\n    {\"input\": \"10\", \"output\": False},\n    {\"input\": \"13\", \"output\": True},\n    {\"input\": \"17\", \"output\": True},\n    {\"input\": \"20\", \"output\": False},\n    {\"input\": \"23\", \"output\": True},\n    {\"input\": \"97\", \"output\": True},\n    {\"input\": \"100\", \"output\": False},\n    {\"input\": \"101\", \"output\": True},\n    {\"input\": \"104\", \"output\": False},\n])"}
{"task_id": "HumanEval/32", "modified_prompt": "(\"HumanEval/32\", [\n  {\n    \"input\": '([[2, -3, 1], 1])',\n    \"output\": '4.0'\n  },\n  {\n    \"input\": '([[1, 2, 1], -1])',\n    \"output\": '0.0'\n  },\n  {\n    \"input\": '([[1, 0, 0, 5], 2])',\n    \"output\": '41.0'\n  },\n  {\n    \"input\": '([[-1, -2, -1], -1])',\n    \"output\": '0.0'\n  },\n  {\n    \"input\": '([[2, 0, 1, 3], 3])',\n    \"output\": '108.0'\n  },\n  {\n    \"input\": '([[1, 2, 4, 8], 1])',\n    \"output\": '15.0'\n  }\n])"}
{"task_id": "HumanEval/33", "modified_prompt": "(\"HumanEval/33\", \"def sort_third(l: list):\\n    \"\"\"This function takes a list l and returns a list l' such that\\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\\n    to the values of the corresponding indicies of l, but sorted.\", [\n    {\"input\": \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\", \"output\": \"[1, 2, 3, 4, 5, 6,  7, 8, 9,  10, 11, 12,  13, 14, 15]\"},\n    {\"input\": \"[9, 2, 8, 7, 5, 6, 4, 1, 3]\", \"output\": \"[4, 2, 8, 7, 5, 6, 9, 1, 3]\"},\n    {\"input\": \"[10, 2, 3, 5, 8]\", \"output\": \"[5, 2, 3, 10, 8]\"},\n    {\"input\": \"[1, 2, 3]\", \"output\": \"[1, 2, 3]\"},\n    {\"input\": \"[3, 2, 1]\", \"output\": \"[3, 2, 1]\"},\n    {\"input\": \"[]\", \"output\": \"[]\"}\n])"}
{"task_id": "HumanEval/34", "modified_prompt": "(\"def unique(l: list):\\n    \"\"\"Return sorted unique elements in a list\", [\n  {\n    \"input\": \"[3,4,5,1,8,5,4,3,9,1,1,10]\",\n    \"output\": \"[1,3,4,5,8,9,10]\"\n  },\n  {\n    \"input\": \"['a', 'b', 'a', 'c', 'a']\",\n    \"output\": \"['a', 'b', 'c']\"\n  },\n  {\n    \"input\": \"[1, 2, 1, 1, 3, 4, 4, 5, 5]\",\n    \"output\": \"[1, 2, 3, 4, 5]\"\n  },\n  {\n    \"input\": \"['unique', 'function', 'test', 'function', 'test']\",\n    \"output\": \"['function', 'test', 'unique']\"\n  },\n  {\n    \"input\": \"[100, 90, 80, 100, 90]\",\n    \"output\": \"[80, 90, 100]\"\n  },\n  {\n    \"input\": \"[]\",\n    \"output\": \"[]\"\n  }\n])"}
{"task_id": "HumanEval/35", "modified_prompt": "(\"HumanEval/35\", \"def max_element(l: list):\\n    \\\"\\\"\\\"Return maximum element in the list.\", [\n  {\"input\": \"[1,2,3,4,5]\", \"output\": \"5\"},\n  {\"input\": \"[20,50,32,10,5]\", \"output\": \"50\"},\n  {\"input\": \"[1]\", \"output\": \"1\"},\n  {\"input\": \"[-1,-2,-3,-4,-5]\", \"output\": \"-1\"},\n  {\"input\": \"[5,5,5,5,5]\", \"output\": \"5\"},\n  {\"input\": \"[10,20,30,40,50,100]\", \"output\": \"100\"},\n  {\"input\": \"[1000,200,30,5]\", \"output\": \"1000\"}\n])"}
{"task_id": "HumanEval/36", "modified_prompt": "(\"def fizz_buzz(n: int):\\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\", [{\"input\": \"100\", \"output\": \"1\"}, {\"input\": \"77\", \"output\": \"2\"}, {\"input\": \"200\", \"output\": \"5\"}, {\"input\": \"500\", \"output\": \"10\"}, {\"input\": \"0\", \"output\": \"0\"}, {\"input\": \"1\", \"output\": \"0\"}, {\"input\": \"220\", \"output\": \"7\"}])"}
{"task_id": "HumanEval/37", "modified_prompt": "(\"def sort_even(l: list):\\n    \"\"\"This function takes a list l and returns a list l' such that\\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\\n    to the values of the even indicies of l, but sorted.\",\n[{\"input\": \"[1, 2, 3, 4, 5, 6]\", \"output\": \"[1, 2, 3, 4, 5, 6]\"},\n {\"input\": \"[6, 5, 4, 3, 2, 1]\", \"output\": \"[2, 5, 4, 3, 6, 1]\"},\n {\"input\": \"[9, 8, 7, 6, 5, 4, 3, 2, 1]\", \"output\": \"[3, 8, 5, 6, 7, 4, 9, 2, 1]\"},\n {\"input\": \"[1, 1, 1, 1, 1, 1]\", \"output\": \"[1, 1, 1, 1, 1, 1]\"},\n {\"input\": \"[]\", \"output\": \"[]\"},\n {\"input\": \"[1]\", \"output\": \"[1]\"},\n {\"input\": \"[2, 1]\", \"output\": \"[2, 1]\"},\n {\"input\": \"[1, 3, 5, 7]\", \"output\": \"[1, 3, 5, 7]\"},\n {\"input\": \"[10, 20, 30, 40, 50]\", \"output\": \"[10, 20, 30, 40, 50]\"},\n {\"input\": \"[50, 40, 30, 20, 10]\", \"output\": \"[10, 40, 20, 30, 30, 10]\"}])"}
{"task_id": "HumanEval/38", "modified_prompt": "(\"HumanEval/38\", \"\\ndef encode_cyclic(s: str):\\n    \\\"\\\"\\\"\\n    returns encoded string by cycling groups of three characters.\\n    \\\"\\\"\\\"\\n    # split string to groups. Each of length 3.\\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\\n    # cycle elements in each group. Unless group has fewer elements than 3.\\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\\n    return \\\"\\\".join(groups)\\n\\n\\ndef decode_cyclic(s: str):\\n    \\\"\\\"\\\"\\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\\n    \\\"\\\"\\\"\\n\", [{\"input\": \"encode_cyclic('abcdef')\", \"output\": \"bcadef\"}, {\"input\": \"encode_cyclic('abcde')\", \"output\": \"bcade\"}, {\"input\": \"encode_cyclic('mag')\", \"output\": \"agm\"}, {\"input\": \"encode_cyclic('magi')\", \"output\": \"agmi\"}, {\"input\": \"encode_cyclic('')\", \"output\": \"\"}, {\"input\": \"decode_cyclic('bcadef')\", \"output\": \"abcdef\"}, {\"input\": \"decode_cyclic('bcade')\", \"output\": \"abcde\"}, {\"input\": \"decode_cyclic('agm')\", \"output\": \"mag\"}, {\"input\": \"decode_cyclic('agmi')\", \"output\": \"magi\"}, {\"input\": \"decode_cyclic('')\", \"output\": \"\"}])"}
{"task_id": "HumanEval/39", "modified_prompt": "(\"prime_fib(n: int):\\n    \"\"\"\\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\", [{\"input\": \"prime_fib(1)\", \"output\": \"2\"}, {\"input\": \"prime_fib(2)\", \"output\": \"3\"}, {\"input\": \"prime_fib(3)\", \"output\": \"5\"}, {\"input\": \"prime_fib(4)\", \"output\": \"13\"}, {\"input\": \"prime_fib(5)\", \"output\": \"89\"}, {\"input\": \"prime_fib(6)\", \"output\": \"233\"}, {\"input\": \"prime_fib(7)\", \"output\": \"1597\"}, {\"input\": \"prime_fib(8)\", \"output\": \"28657\"}, {\"input\": \"prime_fib(9)\", \"output\": \"514229\"}, {\"input\": \"prime_fib(10)\", \"output\": \"433494437\"}])"}
{"task_id": "HumanEval/40", "modified_prompt": "(\"def triples_sum_to_zero(l: list):\\n    \"\"\"\\n    triples_sum_to_zero takes a list of integers as an input.\\n    it returns True if there are three distinct elements in the list that\\n    sum to zero, and False otherwise.\", [\n  {\"input\": [[1, 2, 3]], \"output\": False},\n  {\"input\": [[1, -1, 0]], \"output\": True},\n  {\"input\": [[1, -2, 1, -1, 2]], \"output\": True},\n  {\"input\": [[0, 0, 0]], \"output\": True},\n  {\"input\": [[5, -7, 6, 2, -1]], \"output\": False},\n  {\"input\": [[5, 4, -9]], \"output\": True},\n  {\"input\": [[100, -100, 0]], \"output\": True},\n  {\"input\": [[0, 0, 0, 0, 0]], \"output\": True},\n  {\"input\": [[1, 2, 3, 4, -5]], \"output\": True}\n])"}
{"task_id": "HumanEval/41", "modified_prompt": "(\"def car_race_collision(n: int):\\n    \\\"\\\"\\\"\\n    Imagine a road that's a perfectly straight infinitely long line.\\n    n cars are driving left to right;  simultaneously, a different set of n cars\\n    are driving right to left.   The two sets of cars start out being very far from\\n    each other.  All cars move in the same speed.  Two cars are said to collide\\n    when a car that's moving left to right hits a car that's moving right to left.\\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\\n    in their trajectory as if they did not collide.\\n\\n    This function outputs the number of such collisions.\\n    \\\"\\\"\\\"\\n\", \n[\n  {\"input\": \"5\", \"output\": \"5\"},\n  {\"input\": \"1\", \"output\": \"1\"},\n  {\"input\": \"10\", \"output\": \"10\"},\n  {\"input\": \"0\", \"output\": \"0\"},\n  {\"input\": \"100\", \"output\": \"100\"},\n  {\"input\": \"500\", \"output\": \"500\"}\n])"}
{"task_id": "HumanEval/42", "modified_prompt": "{\"input\": \"def incr_list(l: list):\\n    \\\"\\\"\\\"Return list with elements incremented by 1.\", \"output\": [{\"input\": \"incr_list([1, 2, 3, 4, 5])\", \"output\": [2, 3, 4, 5, 6]}, {\"input\": \"incr_list([-1, -2, -3, -4, -5])\", \"output\": [0, -1, -2, -3, -4]}, {\"input\": \"incr_list([0, 0, 0, 0, 0])\", \"output\": [1, 1, 1, 1, 1]}, {\"input\": \"incr_list([])\", \"output\": []}, {\"input\": \"incr_list([10, 100, 1000])\", \"output\": [11, 101, 1001]} ] }"}
{"task_id": "HumanEval/43", "modified_prompt": "(\"def pairs_sum_to_zero(l):\\n    \\\"\\\"\\\"\\n    pairs_sum_to_zero takes a list of integers as an input.\\n    it returns True if there are two distinct elements in the list that\\n    sum to zero, and False otherwise.\", [{'input': '[1, 2, 3, -1]', 'output': True}, {'input': '[5, 3, 0, 2]', 'output': False}, {'input': '[6, 7, 1, -1]', 'output': True}, {'input': '[-3, -7, -10, 3]', 'output': True}, {'input': '[7, 9, 10, 11]', 'output': False}, {'input': '[0, 0]', 'output': False}, {'input': '[-2, 0, 2]', 'output': True}, {'input': '[]', 'output': False}])"}
{"task_id": "HumanEval/44", "modified_prompt": "(\"def change_base(x: int, base: int):\\n    \\\"\\\"Change numerical base of input number x to base.\\n    return string representation after the conversion.\\n    base numbers are less than 10.\\\"\", [{\"input\": \"10, 2\", \"output\": \"1010\"}, {\"input\": \"20, 8\", \"output\": \"24\"}, {\"input\": \"100, 3\", \"output\": \"10201\"}, {\"input\": \"15, 5\", \"output\": \"30\"}, {\"input\": \"1234, 7\", \"output\": \"3413\"}, {\"input\": \"0, 4\", \"output\": \"0\"}, {\"input\": \"1, 9\", \"output\": \"1\"}, {\"input\": \"123, 1\", \"output\": None}, {\"input\": \"-10, 2\", \"output\": None}, {\"input\": \"10, -2\", \"output\": None}])"}
{"task_id": "HumanEval/45", "modified_prompt": "(\"def triangle_area(a, h):\\n    \\\"\\\"Given length of a side and high return area for a triangle.\", [{\"input\": \"triangle_area(3, 2)\", \"output\": \"3.0\"}, {\"input\": \"triangle_area(5, 6)\", \"output\": \"15.0\"}, {\"input\": \"triangle_area(8, 2)\", \"output\": \"8.0\"}, {\"input\": \"triangle_area(0, 5)\", \"output\": \"0.0\"}, {\"input\": \"triangle_area(7.6, 4.2)\", \"output\": \"15.96\"}])"}
{"task_id": "HumanEval/46", "modified_prompt": "{\"prompt\": \"def fib4(n: int):\\n    \\\"\\\"\\\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\\n    fib4(0) -> 0\\n    fib4(1) -> 0\\n    fib4(2) -> 2\\n    fib4(3) -> 0\\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\", \"tests\": [{\"input\": \"5\", \"output\": \"2\"}, {\"input\": \"6\", \"output\": \"4\"}, {\"input\": \"7\", \"output\": \"6\"}, {\"input\": \"8\", \"output\": \"8\"}, {\"input\": \"9\", \"output\": \"14\"}, {\"input\": \"10\", \"output\": \"20\"}, {\"input\": \"11\", \"output\": \"28\"}, {\"input\": \"12\", \"output\": \"40\"}, {\"input\": \"20\", \"output\": \"563\"}, {\"input\": \"0\", \"output\": \"0\"}, {\"input\": \"2\", \"output\": \"2\"}]}"}
{"task_id": "HumanEval/47", "modified_prompt": "(\"def median(l: list):\\n    \"\"Return median of elements in the list l.\", [{\"input\": \"[1, 2, 3, 4, 5]\", \"output\": \"3\"}, {\"input\": \"[3, 3, 3, 3]\", \"output\": \"3\"}, {\"input\": \"[1]\", \"output\": \"1\"}, {\"input\": \"[1, 2, 4, 3]\", \"output\": \"2.5\"}, {\"input\": \"[]\", \"output\" : \"Error: List is Empty\"}, {\"input\" : \"[5, 5, 1, 2, 6, 6, 3, 7, 2, 5]\", \"output\": \"5\"}, {\"input\": \"[20, 50, 35, 40, 60]\", \"output\": \"40\"}, {\"input\": \"[1, 2, 6, 3, 10]\", \"output\": \"3\"}])"}
{"task_id": "HumanEval/48", "modified_prompt": "(\"def is_palindrome(text: str):\\n    \\\"\\\"\\\"\\n    Checks if given string is a palindrome\", [\n  {\"input\": \"\\\"radar\\\"\", \"output\": True},\n  {\"input\": \"\\\"random\\\"\", \"output\": False},\n  {\"input\": \"\\\"MADAM\\\"\", \"output\": True},\n  {\"input\": \"\\\"race car\\\"\", \"output\": False},\n  {\"input\": \"\\\"\\\"\", \"output\": True},\n  {\"input\": \"\\\"level\\\"\", \"output\": True},\n  {\"input\": \"\\\"Seasons\\\"\", \"output\": False},\n  {\"input\": \"\\\"a\\\"\", \"output\": True},\n])"}
{"task_id": "HumanEval/49", "modified_prompt": "(\"def modp(n: int, p: int):\\n    \\\"\\\"\\\"Return 2^n modulo p (be aware of numerics).\", [{\"input\": \"7, 3\", \"output\": \"1\"}, {\"input\": \"2, 5\", \"output\": \"4\"}, {\"input\": \"8, 2\", \"output\": \"0\"}, {\"input\": \"11, 7\", \"output\": \"3\"}, {\"input\": \"0, 9\", \"output\": \"1\"}, {\"input\": \"5, 1\", \"output\": \"0\"}, {\"input\": \"15, 6\", \"output\": \"4\"}])"}
{"task_id": "HumanEval/50", "modified_prompt": "(\"HumanEval/50\", \n\n[\n  {\n    \"input\": \"encode_shift('abc')\", \n    \"output\": \"fgh\"\n  },\n  {\n    \"input\": \"decode_shift('fgh')\", \n    \"output\": \"abc\"\n  },\n  {\n    \"input\": \"encode_shift('xyz')\", \n    \"output\": \"cde\"\n  },\n  {\n    \"input\": \"decode_shift('cde')\", \n    \"output\": \"xyz\"\n  },\n  {\n    \"input\": \"encode_shift('hello')\",\n    \"output\": \"mjqqt\"\n  },\n  {\n    \"input\": \"decode_shift('mjqqt')\",\n    \"output\": \"hello\"\n  },\n  {\n    \"input\": \"encode_shift('python')\",\n    \"output\": \"udymts\"\n  },\n  {\n    \"input\": \"decode_shift('udymts')\",\n    \"output\": \"python\"\n  }\n])"}
{"task_id": "HumanEval/51", "modified_prompt": "(\"def remove_vowels(text):\\n\\nremove_vowels is a function that takes string and returns string without vowels.\", [\n    {\"input\": \"Hello, World!\", \"output\": \"Hll, Wrld!\"},\n    {\"input\": \"The quick brown fox jumps over the lazy dog.\", \"output\": \"Th qck brwn fx jmps vr th lzy dg.\"},\n    {\"input\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"output\": \"BCDFGHJKLMNPQRSTVWXYZ\"},\n    {\"input\": \"abcdefghijklmnopqrstuvwxyz\", \"output\": \"bcdfghjklmnpqrstvwxyz\"},\n    {\"input\": \"This is a TEST\", \"output\": \"Ths s  TST\"},\n    {\"input\": \"aeiou\", \"output\": \"\"},\n    {\"input\": \"AEIOU\", \"output\": \"\"},\n    {\"input\": \"\", \"output\": \"\"}\n])"}
{"task_id": "HumanEval/52", "modified_prompt": "(\"HumanEval/52\", \"def below_threshold(l: list, t: int):\\n     Return True if all numbers in the list l are below threshold t.\", [\n    {\"input\": \"[1, 2, 3], 4\", \"output\": True},\n    {\"input\": \"[5, 6, 7], 4\", \"output\": False},\n    {\"input\": \"[], 0\", \"output\": True},\n    {\"input\": \"[1, 2, 3, 4, 5], 5\", \"output\": False},\n    {\"input\": \"[10, 20, 30], 40\", \"output\": True},\n    {\"input\": \"[1, 2, 3], 2\" , \"output\": False},\n    {\"input\": \"[-1, -2, -3], -4\", \"output\": True},\n    {\"input\": \"[-5, -6, -7], -4\", \"output\": False}\n])"}
{"task_id": "HumanEval/53", "modified_prompt": "(\"def add(x: int, y: int):\\n     Add two numbers x and y\", [{\"input\": \"add(2, 3)\", \"output\": 5}, {\"input\": \"add(-2, 3)\", \"output\": 1}, {\"input\": \"add(100, 200)\", \"output\": 300}, {\"input\": \"add(0, 0)\", \"output\": 0}, {\"input\": \"add(-5, -5)\", \"output\": -10}])"}
{"task_id": "HumanEval/54", "modified_prompt": "(\"def same_chars(s0: str, s1: str):\\n    \\n    Check if two words have the same characters.\", [{\"input\": \"('listen', 'silent')\", \"output\": True}, {\"input\": \"('mary', 'army')\", \"output\": True}, {\"input\": \"('test', 'tset')\", \"output\": True}, {\"input\": \"('spark', 'parcel')\", \"output\": False}, {\"input\": \"('check', 'chick')\", \"output\": False}, {\"input\": \"('tea', 'eat')\", \"output\": True}, {\"input\": \"('happy', 'papaya')\", \"output\": False}, {\"input\": \"('blank', 'bank')\", \"output\": False}, {\"input\": \"('world', 'lord')\", \"output\": False}, {\"input\": \"('python', 'thypon')\", \"output\": True}])"}
{"task_id": "HumanEval/55", "modified_prompt": "(\"def fib(n: int):\\\\n    return n-th Fibonacci number.\", [{\"input\": \"5\", \"output\": \"5\"}, {\"input\": \"0\", \"output\": \"0\"}, {\"input\": \"1\", \"output\": \"1\"}, {\"input\": \"10\", \"output\": \"55\"}, {\"input\": \"13\", \"output\": \"233\"}, {\"input\": \"20\", \"output\": \"6765\"}, {\"input\": \"6\", \"output\": \"8\"}, {\"input\": \"9\", \"output\": \"34\"}, {\"input\": \"15\", \"output\": \"610\"}])"}
{"task_id": "HumanEval/56", "modified_prompt": "(\"def correct_bracketing(brackets: str):\\n      brackets is a string of '<' and '>'.\\n    return True if every opening bracket has a corresponding closing bracket.\", [{\"input\": \"<<>>\", \"output\": True}, {\"input\": \"<<>\", \"output\": False}, {\"input\": \"><>\", \"output\": False}, {\"input\": \"><><\", \"output\": False}, {\"input\": \"<><>\", \"output\": True}, {\"input\": \"<<<<<<>>>>>>\", \"output\": True}, {\"input\": \"<<<<<>>>>>\", \"output\": False}, {\"input\": \"<<<>\", \"output\": False}, {\"input\": \"\", \"output\": True}, {\"input\": \"<><><>\", \"output\": True}])"}
{"task_id": "HumanEval/57", "modified_prompt": "(\"def monotonic(l: list):\\n     Return True is list elements are monotonically increasing or decreasing.\", [\n  {\"input\": \"[1, 2, 3, 4, 5]\", \"output\": True},\n  {\"input\": \"[5, 4, 3, 2, 1]\", \"output\": True},\n  {\"input\": \"[1, 2, 3, 2, 1]\", \"output\": False},\n  {\"input\": \"[5, 4, 3, 4, 5]\", \"output\": False},\n  {\"input\": \"[2, 2, 2, 2, 2]\", \"output\": True},\n  {\"input\": \"[]\", \"output\": True}\n])"}
{"task_id": "HumanEval/58", "modified_prompt": "{\"value\": \"def common(l1: list, l2: list):\\n     Return sorted unique common elements for two lists.\", \"test_cases\": [{\"input\": \"[1,2,3,4,5,5,5], [5,5,3,3,2,1]\", \"output\": \"[1, 2, 3, 5]\"}, {\"input\": \"[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]\", \"output\": \"[]\"}, {\"input\": \"['apple', 'banana', 'cherry'], ['banana', 'cherry', 'date']\", \"output\": \"['banana', 'cherry']\"}, {\"input\": \"['apple', 'banana', 'cherry'], ['date', 'elderberry', 'fig']\", \"output\": \"[]\"}, {\"input\": \"[], []\", \"output\": \"[]\"}, {\"input\": \"[1,1,1,1,1], [1,1,1,1,1]\", \"output\": \"[1]\"}]}"}
{"task_id": "HumanEval/59", "modified_prompt": "(\"def largest_prime_factor(n: int):\\n     Return the largest prime factor of n. Assume n > 1 and is not a prime.\", [{\"input\": \"15\", \"output\": \"5\"}, {\"input\": \"100\", \"output\": \"5\"}, {\"input\": \"120\", \"output\": \"5\"}, {\"input\": \"81\", \"output\": \"3\"}, {\"input\": \"54\", \"output\": \"3\"}, {\"input\": \"144\", \"output\": \"3\"}, {\"input\": \"49\", \"output\": \"7\"}, {\"input\": \"350\", \"output\": \"7\"}, {\"input\": \"64\", \"output\": \"2\"}, {\"input\": \"50\", \"output\": \"5\"}, {\"input\": \"144\", \"output\": \"3\"}])"}
{"task_id": "HumanEval/60", "modified_prompt": "(\"HumanEval/60\", \"def sum_to_n(n: int):\\n     sum_to_n is a function that sums numbers from 1 to n.\", [\n    {\"input\": \"sum_to_n(0)\", \"output\": \"0\"},\n    {\"input\": \"sum_to_n(1)\", \"output\": \"1\"},\n    {\"input\": \"sum_to_n(5)\", \"output\": \"15\"},\n    {\"input\": \"sum_to_n(10)\", \"output\": \"55\"},\n    {\"input\": \"sum_to_n(100)\", \"output\": \"5050\"}\n])"}
{"task_id": "HumanEval/61", "modified_prompt": "(\"def correct_bracketing(brackets: str):\\n      brackets is a string of '(' and ')'.\\n    return True if every opening bracket has a corresponding closing bracket.\", [\n  {\"input\": \"(())\", \"output\": True},\n  {\"input\": \"(()))\", \"output\": False},\n  {\"input\": \"(((((((())))))\", \"output\": True},\n  {\"input\": \"))(((\", \"output\": False},\n  {\"input\": \"\", \"output\": True},\n  {\"input\": \"()\", \"output\": True},\n  {\"input\": \"(\", \"output\": False},\n  {\"input\": \")\", \"output\": False},\n  {\"input\": \")(())\", \"output\": False},\n  {\"input\": \"(())()()()\", \"output\": True}\n])"}
{"task_id": "HumanEval/62", "modified_prompt": "{\"input\": \"('HumanEval/62', 'def derivative(xs: list):\\n      xs represent coefficients of a polynomial.\\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\\n     Return derivative of this polynomial in the same form.')\", \"output\": [\n  {\"input\": [5, 3, 2], \"output\": [3, 4]}, \n  {\"input\": [1, 2, 3, 4, 5], \"output\": [2, 6, 12, 20]},  \n  {\"input\": [0, 0, 0], \"output\": [0, 0]}, \n  {\"input\": [1, 0, 0, 2], \"output\": [0, 0, 6]}, \n  {\"input\": [-2, 1, 4, -1], \"output\": [1, 8, -3]},\n  {\"input\": [], \"output\": []}\n]}"}
{"task_id": "HumanEval/63", "modified_prompt": "{\"input\": \"fibfib(3)\", \"output\": 1}, {\"input\": \"fibfib(4)\", \"output\": 2}, {\"input\": \"fibfib(5)\", \"output\": 4}, {\"input\": \"fibfib(6)\", \"output\": 7}, {\"input\": \"fibfib(7)\", \"output\": 13}, {\"input\": \"fibfib(8)\", \"output\": 24}, {\"input\": \"fibfib(9)\", \"output\": 44}, {\"input\": \"fibfib(10)\", \"output\": 81}, {\"input\": \"fibfib(0)\", \"output\": 0}, {\"input\": \"fibfib(2)\", \"output\": 1}"}
{"task_id": "HumanEval/64", "modified_prompt": "(\"HumanEval/64\", \"FIX =  \\nAdd more test cases.\\n \\n\\ndef vowels_count(s):\\n     Write a function vowels_count which takes a string representing\\n    a word as input and returns the number of vowels in the string.\\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\\n    vowel, but only when it is at the end of the given word.\", [\n{\"input\": \"hello\", \"output\": 2}, \n{\"input\": \"world\", \"output\": 1}, \n{\"input\": \"python\", \"output\": 1}, \n{\"input\": \"programming\", \"output\": 3}, \n{\"input\": \"happyy\", \"output\": 2},\n{\"input\": \"y\", \"output\": 1}, \n{\"input\": \"aaa\", \"output\": 3},\n{\"input\": \"yoyo\", \"output\": 2}\n])"}
{"task_id": "HumanEval/65", "modified_prompt": "(\"HumanEval/65\", \"def circular_shift(x, shift):\\n     Circular shift the digits of the integer x, shift the digits right by shift\\n    and return the result as a string.\\n    If shift > number of digits, return digits reversed.\", [\n  {\"input\": \"(12345, 2)\", \"output\": \"45123\"},\n  {\"input\": \"(54321, 5)\", \"output\": \"12345\"},\n  {\"input\": \"(987654321, 9)\", \"output\": \"123456789\"},\n  {\"input\": \"(0, 2)\", \"output\": \"0\"},\n  {\"input\": \"(4488, 4)\", \"output\": \"8844\"},\n  {\"input\": \"(123, 4)\", \"output\": \"321\"},\n  {\"input\": \"(789, 1)\", \"output\": \"978\"},\n  {\"input\": \"(111, 2)\", \"output\": \"111\"},\n  {\"input\": \"(23798, 6)\", \"output\": \"89732\"},\n  {\"input\": \"(123456789, 2)\", \"output\": \"891234567\"}])"}
{"task_id": "HumanEval/66", "modified_prompt": "(\"def digitSum(s):\\n     Task\\n    Write a function that takes a string as input and returns the sum of the upper characters only'\\n    ASCII codes.\", [{\"input\": \"Hello World!\", \"output\": 274}, {\"input\": \"Python\", \"output\": 80}, {\"input\": \"JAVA SCRIPT\", \"output\": 488}, {\"input\": \"Run Forest, run!\", \"output\": 174}, {\"input\": \"123abcDEF\", \"output\": 230}, {\"input\": \"\", \"output\": 0}, {\"input\": \"no uppercase here\", \"output\": 0}, {\"input\": \"ALL UPPERCASE HERE\", \"output\": 1040}, {\"input\": \"MiXeD cAsE HeRe\", \"output\": 251}])"}
{"task_id": "HumanEval/67", "modified_prompt": "(\"def fruit_distribution(s,n):\\n     \\n    In this task, you will be given a string that represents a number of apples and oranges \\n    that are distributed in a basket of fruit this basket contains \\n    apples, oranges, and mango fruits. Given the string that represents the total number of \\n    the oranges and apples and an integer that represent the total number of the fruits \\n    in the basket return the number of the mango fruits in the basket.\\n    \\n\", \n[\n{\"input\": (\"'10 apples and 15 oranges'\", 30), \"output\": 5},\n{\"input\": (\"'7 apples and 3 oranges'\", 15), \"output\": 5},\n{\"input\": (\"'5 apples and 5 oranges'\", 12), \"output\": 2},\n{\"input\": (\"'0 apples and 0 oranges'\", 20), \"output\": 20},\n{\"input\": (\"'20 apples and 0 oranges'\", 25), \"output\": 5}\n])"}
{"task_id": "HumanEval/68", "modified_prompt": "(\"def pluck(arr):\\n     \\n    \\\"Given an array representing a branch of a tree that has non-negative integer nodes\\n    your task is to pluck one of the nodes and return it.\\n    The plucked node should be the node with the smallest even value.\\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\\n\\n    The plucked node should be returned in a list, [ smalest_value, its index ],\\n    If there are no even values or the given array is empty, return [].\", [{\"input\": \"[7, 8, 3, 5, 1, 12]\", \"output\": [8, 1]}, {\"input\": \"[11, 15, 23, 27]\", \"output\": []}, {\"input\": \"[0, 2, 4, 8, 10]\", \"output\": [0, 0]}, {\"input\": \"[2, 2, 2, 2, 2]\", \"output\": [2, 0]}, {\"input\": \"[11, 13, 19, 21]\", \"output\": []}, {\"input\": \"[]\", \"output\": []}, {\"input\": \"[2, 4, 6, 8, 10]\", \"output\": [2, 0]}, {\"input\": \"[3, 5, 7, 9, 11]\", \"output\": []}])"}
{"task_id": "HumanEval/69", "modified_prompt": "(\"HumanEval/69\", \"def search(lst):\\n    \\\"\\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \\n    zero, and has a frequency greater than or equal to the value of the integer itself. \\n    The frequency of an integer is the number of times it appears in the list.\\n    If no such a value exist, return -1.\", [\n  {\"input\": \"[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\", \"output\": 4}, \n  {\"input\": \"[1, 1, 1, 1, 1, 5, 5, 5, 5, 5]\", \"output\": 5}, \n  {\"input\": \"[1]\", \"output\": 1}, \n  {\"input\": \"[2, 2, 3, 3, 3]\", \"output\": 3}, \n  {\"input\": \"[4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]\", \"output\": -1}, \n  {\"input\": \"[4, 10, 10, 10, 10]\", \"output\": 10}\n])"}
{"task_id": "HumanEval/70", "modified_prompt": "(\"def strange_sort_list(lst):\\n    \\\"\\\"\\\"\\n    Given list of integers, return list in strange order.\\n    Strange sorting, is when you start with the minimum value,\\n    then maximum of the remaining integers, then minimum and so on.\", [\n{\"input\": \"[3, 2, 1, 4]\", \"output\": \"[1, 4, 2, 3]\"},\n{\"input\": \"[5, 10, 15, 20, 25]\", \"output\": \"[5, 25, 10, 20, 15]\"},\n{\"input\": \"[1, 1, 1, 1]\", \"output\": \"[1, 1, 1, 1]\"},\n{\"input\": \"[8, 18, 11, 14]\", \"output\": \"[8, 18, 11, 14]\"},\n{\"input\": \"[-8, -6, -3, -1]\", \"output\": \"[-8, -1, -6, -3]\"},\n{\"input\": \"[0, 0, 1, 0, 0]\", \"output\": \"[0, 1, 0, 0, 0]\"},\n{\"input\": \"[]\", \"output\": \"[]\"},\n{\"input\": \"[10]\", \"output\": \"[10]\"}\n])"}
{"task_id": "HumanEval/71", "modified_prompt": "(\"def triangle_area(a, b, c):\\n    \\\"\\n    Given the lengths of the three sides of a triangle. Return the area of\\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \\n    Otherwise return -1\\n    Three sides make a valid triangle when the sum of any two sides is greater \\n    than the third side.\", [{\"input\": \"(3, 4, 5)\", \"output\": \"6.00\"}, {\"input\": \"(6, 8, 10)\", \"output\": \"24.00\"}, {\"input\": \"(10, 15, 25)\", \"output\": \"-1\"}, {\"input\": \"(1.5, 2.3, 1.2)\", \"output\": \"-1\"}, {\"input\": \"(3.2, 4.1, 5.3)\", \"output\": \"6.71\"}, {\"input\": \"(0, 0, 0)\", \"output\": \"-1\"}, {\"input\": \"(5, 5, 5)\", \"output\": \"10.83\"}])"}
{"task_id": "HumanEval/72", "modified_prompt": "(\"def will_it_fly(q,w):\\n    \\\"\\\"\\n    Write a function that returns True if the object q will fly, and False otherwise.\\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\", [{\"input\": \"[1,2,3,2,1], 10\", \"output\": True}, {\"input\": \"[1,2,3,2,1], 8\", \"output\": False}, {\"input\": \"[1,2,3,3,2,1], 20\", \"output\": True}, {\"input\": \"[1,2,3,4,2,1], 15\", \"output\": True}, {\"input\": \"[1,2,3,3,1,1], 10\", \"output\": False}, {\"input\": \"[1,1,1,1], 5\", \"output\": True}, {\"input\": \"[1,2,2,1], 0\", \"output\": False}])"}
{"task_id": "HumanEval/73", "modified_prompt": "(\"def smallest_change(arr):\\n\\nGiven an array arr of integers, find the minimum number of elements that\\nneed to be changed to make the array palindromic. A palindromic array is an array that\\nis read the same backwards and forwards. In one change, you can change one element to any other element.\", [{\"input\": \"[1, 2, 3, 4, 5]\", \"output\": 2}, {\"input\": \"[1, 2, 3, 4, 2, 1]\", \"output\": 0}, {\"input\": \"[5, 5, 5, 5, 5]\", \"output\": 0}, {\"input\": \"[1, 2, 3, 4, 2]\", \"output\": 1}, {\"input\": \"[4, 2, 3, 5, 6]\", \"output\": 3}])"}
{"task_id": "HumanEval/74", "modified_prompt": "(\"def total_match(lst1, lst2):\\n    \\\"\\\"\\\"\\n    Write a function that accepts two lists of strings and returns the list that has \\n    total number of chars in the all strings of the list less than the other list.\\n\\n    if the two lists have the same number of chars, return the first list.\", [{\"input\": [[\"abc\", \"def\", \"ghi\"], [\"jkl\", \"mnop\"]], \"output\": [\"abc\", \"def\", \"ghi\"]}, {\"input\": [[\"one\", \"two\"], [ \"three\", \"four\"]], \"output\": [\"one\", \"two\"]}, {\"input\": [[\"a\", \"b\", \"c\", \"d\"], [\"e\", \"f\"]], \"output\": [\"e\", \"f\"]}, {\"input\": [[\"123\", \"456\"], [\"789\", \"012\"]], \"output\": [\"123\", \"456\"]}, {\"input\": [[\"earth\", \"mars\"], [\"venus\", \"neptune\"]], \"output\": [\"earth\", \"mars\"]}])"}
{"task_id": "HumanEval/75", "modified_prompt": "(\"HumanEval/75\", \"def is_multiply_prime(a):\\n     Write a function that returns true if the given number is the multiplication of 3 prime numbers\\n    and false otherwise.\\n    Knowing that (a) is less than 100.\", [\n  {\"input\": \"is_multiply_prime(8)\", \"output\": \"False\"},\n  {\"input\": \"is_multiply_prime(30)\", \"output\": \"True\"},\n  {\"input\": \"is_multiply_prime(42)\", \"output\": \"False\"},\n  {\"input\": \"is_multiply_prime(100)\", \"output\": \"False\"},\n  {\"input\": \"is_multiply_prime(13)\", \"output\": \"False\"},\n  {\"input\": \"is_multiply_prime(-5)\", \"output\": \"False\"},\n  {\"input\": \"is_multiply_prime(49)\", \"output\": \"False\"},\n  {\"input\": \"is_multiply_prime(3)\", \"output\": \"False\"},\n  {\"input\": \"is_multiply_prime(10)\", \"output\": \"False\"},\n  {\"input\": \"is_multiply_prime(0)\", \"output\": \"False\"}\n])"}
{"task_id": "HumanEval/76", "modified_prompt": "(\"def is_simple_power(x, n):\\n     Your task is to write a function that returns true if a number x is a simple\\n    power of n and false in other cases.\\n    x is a simple power of n if n**int=x\", [{\"input\": \"(8, 2)\", \"output\": True}, {\"input\": \"(9, 3)\", \"output\": True}, {\"input\": \"(10, 2)\", \"output\": False}, {\"input\": \"(81, 9)\", \"output\": True}, {\"input\": \"(16, 4)\", \"output\": True}, {\"input\": \"(24, 3)\", \"output\": False}, {\"input\": \"(27, 3)\", \"output\": True}, {\"input\": \"(1, 100)\", \"output\": True}, {\"input\": \"(100, 1)\", \"output\": True}, {\"input\": \"(0, 0)\", \"output\": False}])"}
{"task_id": "HumanEval/77", "modified_prompt": "(\"def iscube(a):\\n    \\\"\\n    Write a function that takes an integer a and returns True \\n    if this ingeger is a cube of some integer number.\\n    Note: you may assume the input is always valid.\", [{\"input\": \"27\", \"output\": \"True\"}, {\"input\": \"16\", \"output\": \"False\"}, {\"input\": \"1\", \"output\": \"True\"}, {\"input\": \"64\", \"output\": \"True\"}, {\"input\": \"125\", \"output\": \"True\"}])"}
{"task_id": "HumanEval/78", "modified_prompt": "(\"HumanEval/78\", \"def hex_key(num):\\n     You have been tasked to write a function that receives \\n    a hexadecimal number as a string and counts the number of hexadecimal \\n    digits that are primes (prime number, or a prime, is a natural number \\n    greater than 1 that is not a product of two smaller natural numbers).\\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\", \n[{\"input\": \"ABCD\", \"output\": 1}, \n {\"input\": \"1234567890\", \"output\": 4}, \n {\"input\": \"ABCDEF\", \"output\": 1}, \n {\"input\": \"FEDCBA\", \"output\": 1}, \n {\"input\": \"789A\", \"output\": 2}])"}
{"task_id": "HumanEval/79", "modified_prompt": "(\"def decimal_to_binary(decimal):\\n     You will be given a number in decimal form and your task is to convert it to\\n    binary format. The function should return a string, with each character representing a binary\\n    number. Each character in the string will be '0' or '1'.\\n\\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\\n    The extra characters are there to help with the format.\", [{\"input\": \"15\", \"output\": \"db1111db\"}, {\"input\": \"2\", \"output\": \"db10db\"}, {\"input\": \"0\", \"output\": \"db0db\"}, {\"input\": \"255\", \"output\": \"db11111111db\"}, {\"input\": \"128\", \"output\": \"db10000000db\"}, {\"input\": \"693\", \"output\": \"db1010110101db\"}])"}
{"task_id": "HumanEval/80", "modified_prompt": "(\"def is_happy(s):\\n     You are given a string s.\\n    Your task is to check if the string is happy or not.\\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\", [{\"input\": \"'abc'\", \"output\": \"True\"}, {\"input\": \"'aaa'\", \"output\": \"False\"}, {\"input\": \"'abcd'\", \"output\": \"True\"}, {\"input\": \"'abca'\", \"output\": \"False\"}, {\"input\": \"'!!@'\", \"output\": \"True\"}, {\"input\": \"'ab'\", \"output\": \"False\"}, {\"input\": \"'123'\", \"output\": \"True\"}, {\"input\": \"'1q1'\", \"output\": \"False\"}, {\"input\": \"'1q2q3'\", \"output\": \"True\"}])"}
{"task_id": "HumanEval/81", "modified_prompt": "(\"def numerical_letter_grade(grades):\\n     It is the last week of the semester and the teacher has to give the grades\\n    to students. The teacher has been making her own algorithm for grading.\\n    The only problem is, she has lost the code she used for grading.\\n    She has given you a list of GPAs for some students and you have to write \\n    a function that can output a list of letter grades using the following table:\", [{\"input\": \"[4.0, 3.7, 3.33, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0]\", \"output\": [\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"F\"]}, {\"input\": \"[3.5, 2.5, 1.5, 0.5]\", \"output\": [\"A-\", \"C+\", \"D+\", \"F\"]}, {\"input\": \"[]\", \"output\": []}])"}
{"task_id": "HumanEval/82", "modified_prompt": "(\"def prime_length(string):\\n     Write a function that takes a string and returns True if the string\\n    length is a prime number or False otherwise\", [{\"input\": \"\\\"hello world\\\"\", \"output\": \"False\"}, {\"input\": \"\\\"I love Python!\\\"\", \"output\": \"True\"}, {\"input\": \"\\\"123456789\\\"\", \"output\": \"True\"}, {\"input\": \"\\\"prime\\\"\", \"output\": \"False\"}, {\"input\": \"\\\"\\\"\", \"output\": \"False\"}, {\"input\": \"\\\"four\\\"\", \"output\": \"True\"}])"}
{"task_id": "HumanEval/83", "modified_prompt": "(\"def starts_one_ends(n):\\n     \\n    Given a positive integer n, return the count of the numbers of n-digit\\n    positive integers that start or end with 1.\", [{\"input\": \"1\", \"output\": \"2\"}, {\"input\": \"2\", \"output\": \"20\"}, {\"input\": \"3\", \"output\": \"200\"}, {\"input\": \"4\", \"output\": \"2000\"}, {\"input\": \"5\", \"output\": \"20000\"}, {\"input\": \"10\", \"output\": \"2000000000\"}, {\"input\": \"0\", \"output\": \"0\"}])"}
{"task_id": "HumanEval/84", "modified_prompt": "(\"Given a positive integer N, return the total sum of its digits in binary.\", [{\"input\": \"1\", \"output\": \"1\"}, {\"input\": \"2\", \"output\": \"1\"}, {\"input\": \"3\", \"output\": \"2\"}, {\"input\": \"4\", \"output\": \"1\"}, {\"input\": \"5\", \"output\": \"2\"}, {\"input\": \"6\", \"output\": \"2\"}, {\"input\": \"7\", \"output\": \"3\"}, {\"input\": \"8\", \"output\": \"1\"}, {\"input\": \"9\", \"output\": \"2\"}, {\"input\": \"10\", \"output\": \"2\"}, {\"input\": \"50\", \"output\": \"3\"}, {\"input\": \"100\", \"output\": \"3\"}, {\"input\": \"500\", \"output\": \"6\"}, {\"input\": \"1000\", \"output\": \"6\"}, {\"input\": \"1024\", \"output\": \"1\"}, {\"input\": \"2047\", \"output\": \"11\"}])"}
{"task_id": "HumanEval/85", "modified_prompt": "(\"def add(lst):\\n     Given a non-empty list of integers lst. add the even elements that are at odd indices..\", [{\"input\": \"[1, 2, 3, 4, 5, 6]\", \"output\": \"6\"}, {\"input\": \"[2, 10, 3, 6, 5, 12]\", \"output\": \"18\"}, {\"input\": \"[100, 200, 300, 400]\", \"output\": \"400\"}, {\"input\": \"[13, 22, 31, 44, 233, 88]\", \"output\": \"154\"}, {\"input\": \"[32, 64, 128, 256]\", \"output\": \"256\"}, {\"input\": \"[2, 4, 4, 6, 6, 8]\", \"output\": \"12\"}, {\"input\": \"[1, 3, 5, 7]\", \"output\": \"0\"}, {\"input\": \"[1]\", \"output\": \"0\"}, {\"input\": \"[2, 1]\", \"output\": \"0\"}, {\"input\": \"[2, 2]\", \"output\": \"2\"}])"}
{"task_id": "HumanEval/86", "modified_prompt": "(\"def anti_shuffle(s):\\n    Write a function that takes a string and returns an ordered version of it.\\n    Ordered version of string, is a string where all words (separated by space) are replaced by a new word where all the characters arranged in ascending order based on ascii value.\\n    Note: You should keep the order of words and blank spaces in the sentence.\",\n[\n{\"input\": \"hello world\", \"output\": \"ehllo dlorw\"},\n{\"input\": \"This is a test\", \"output\": \"Hist is a estt\"},\n{\"input\": \"Programming is fun\", \"output\": \"Pamgimnorr is fnu\"},\n{\"input\": \"python java ruby\", \"output\": \"hnopty aajv byru\"},\n{\"input\": \"I love to play the piano\", \"output\": \"I elov to alyp eht aainop\"}, \n{\"input\": \"aBcD EfGh\", \"output\": \"BDac EGfh\"},\n{\"input\": \"123 456\", \"output\": \"123 456\"},\n{\"input\": \"\", \"output\": \"\"}\n])"}
{"task_id": "HumanEval/87", "modified_prompt": "(\"HumanEval/87\", \"def get_row(lst, x):\\n     \\n    You are given a 2 dimensional data, as a nested lists,\\n    which is similar to matrix, however, unlike matrices,\\n    each row may contain a different number of columns.\\n    Given lst, and integer x, find integers x in the list,\\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\\n    each tuple is a coordinate - (row, columns), starting with 0.\\n    Sort coordinates initially by rows in ascending order.\\n    Also, sort coordinates of the row by columns in descending order.\", [\n{\"input\": '([[1, 2, 1], [1, 3, 4]], 1)', \"output\": '[(0, 0), (0, 2), (1, 0)]'},\n{\"input\": '([[5, 2, 3], [4, 1, 5]], 5)', \"output\": '[(0, 0), (1, 2)]'},\n{\"input\": '([[4, 4, 4], [4, 4, 4]], 4)', \"output\": '[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)]'},\n{\"input\": '([[7], [8, 9], [10]], 10)', \"output\": '[(2, 0)]'},\n{\"input\": '([], 10)', \"output\": '[]'}\n])"}
{"task_id": "HumanEval/88", "modified_prompt": "(\"def sort_array(array):\\n     \\n    Given an array of non-negative integers, return a copy of the given array after sorting,\\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\\n    or sort it in descending order if the sum( first index value, last index value) is even.\\n\\n    Note:\\n    * don't change the given array.\", [{\"input\": \"[4, 3, 2, 1]\", \"output\": \"[4, 3, 2, 1]\"}, {\"input\": \"[1, 2, 3, 4]\", \"output\": \"[1, 2, 3, 4]\"}, {\"input\": \"[6, 2, 1, 7]\", \"output\": \"[7, 6, 2, 1]\"}, {\"input\": \"[80, 20, 56, 9]\", \"output\": \"[9, 20, 56, 80]\"}, {\"input\": \"[7, 3, 5, 1]\", \"output\": \"[7, 5, 3, 1]\"}])"}
{"task_id": "HumanEval/89", "modified_prompt": "(\"def encrypt(s):\\n     Create a function encrypt that takes a string as an argument and\\n    returns a string encrypted with the alphabet being rotated. \\n    The alphabet should be rotated in a manner such that the letters \\n    shift down by two multiplied to two places.\", [{\"input\": \"apple\", \"output\": \"crrng\"}, {\"input\": \"hello world\", \"output\": \"jgnnq yqtnf\"}, {\"input\": \"Python\", \"output\": \"R{vjqp\"}, {\"input\": \"Programming is fun\", \"output\": \"Rtgqbqtkcnk ku hwp\"}, {\"input\": \"abc xyz\", \"output\": \"cde zab\"}])"}
{"task_id": "HumanEval/90", "modified_prompt": "(\"HumanEval/90\", \"\\ndef next_smallest(lst):\\n     \\n    You are given a list of integers.\\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\\n    Return None if there is no such element.\\n    \\n   \", [{\"input\": \"[4, 1, 2, 10, 5, 7]\", \"output\": 2}, {\"input\": \"[12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\", \"output\": 2}, {\"input\": \"[1, 1, 1, 1, 1]\", \"output\": None}, {\"input\": \"[45]\", \"output\": None}, {\"input\": \"[300, 100]\", \"output\": 300}, {\"input\": \"[7, 7, 3, 3, 2, 2, 1, 1]\", \"output\": 2}, {\"input\": \"[-5, -7, -8, -2, -1]\", \"output\": -2}, {\"input\": \"[105, 89, 39, 52, 21, -14, 9, 0]\", \"output\": 0}, {\"input\": \"[5, 2, 6, 8, 1, 3, 4, 7, 0]\", \"output\": 1}])"}
{"task_id": "HumanEval/91", "modified_prompt": "(\"def is_bored(S):\\n     \\\"\\n    You'll be given a string of words, and your task is to count the number\\n    of boredoms. A boredom is a sentence that starts with the word \\\"I\\\".\\n    Sentences are delimited by '.', '?' or '!'.\",\n[\n  {\"input\": \"I am bored. I want to go home. Let's leave soon!\", \"output\": 2},\n  {\"input\": \"Are you the one behind this? I think I know who you are. Mystery solved!\", \"output\": 1},\n  {\"input\": \"I don't want to do this anymore. Is this really worth it?\", \"output\": 1},\n  {\"input\": \"This is a sentence without the word I. And this is another one.\", \"output\": 0},\n  {\"input\": \"I? I. I! You?\", \"output\": 3},\n  {\"input\": \"What I want is not important. I am what I am!\", \"output\": 1},\n  {\"input\": \"I. I I. I I I.\", \"output\": 3}\n])"}
{"task_id": "HumanEval/92", "modified_prompt": "(\"HumanEval/92\", \"def any_int(x, y, z):\\n    \\\"\\n    Create a function that takes 3 numbers.\\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\\n    Returns false in any other cases.\", [\n    {\"input\": \"(1, 2, 3)\", \"output\": \"True\"},\n    {\"input\": \"(3, 2, 1)\", \"output\": \"True\"},\n    {\"input\": \"(2, 1, 3)\", \"output\": \"True\"},\n    {\"input\": \"(10, 2, 8)\", \"output\": \"True\"},\n    {\"input\": \"(100, 50, 50)\", \"output\": \"True\"},\n    {\"input\": \"(1, 2, 4)\", \"output\": \"False\"},\n    {\"input\": \"(10, 5, 2)\", \"output\": \"False\"},\n    {\"input\": \"(10, 20, 30)\", \"output\": \"False\"},\n    {\"input\": \"(6.2, 4.2, 2)\", \"output\": \"False\"},\n    {\"input\": \"(6, 3.0, 3)\", \"output\": \"False\"},\n    {\"input\": \"(0, 0, 0)\", \"output\": \"True\"}\n])"}
{"task_id": "HumanEval/93", "modified_prompt": "(\"def encode(message):\\n     \\\"\\n    Write a function that takes a message, and encodes in such a \\n    way that it swaps case of all letters, replaces all vowels in \\n    the message with the letter that appears 2 places ahead of that \\n    vowel in the english alphabet. \\n    Assume only letters.\", [{\"input\": \"Hello\", \"output\": \"jGnnq\"}, {\"input\": \"World\", \"output\": \"tqYkg\"}, {\"input\": \"Python\", \"output\": \"pDrQnq\"}, {\"input\": \"Coding\", \"output\": \"cNgkQe\"}, {\"input\": \"GFG\", \"output\": \"giA\"}, {\"input\": \"DataScience\", \"output\": \"dCrcuKjgpca\"}, {\"input\": \"lowercase\", \"output\": \"qskcgrscg\"}, {\"input\": \"UPPERCASE\", \"output\": \"yqqgrcgrca\"}])"}
{"task_id": "HumanEval/94", "modified_prompt": "(\"def skjkasdkd(lst):\\n     \\\"You are given a list of integers.\\n    You need to find the largest prime value and return the sum of its digits.\", [\n  {\n    \"input\": \"[1, 2, 3, 5, 7, 11]\",\n    \"output\": 2\n  },\n  {\n    \"input\": \"[11, 13, 17, 19, 23]\",\n    \"output\": 5\n  },\n  {\n    \"input\": \"[89, 97, 101, 103, 107, 113]\",\n    \"output\": 5\n  },\n  {\n    \"input\": \"[131, 137, 139, 149, 151]\",\n    \"output\": 11\n  },\n  {\n    \"input\": \"[200, 300, 400, 500]\",\n    \"output\": \"None\"\n  },\n  {\n    \"input\": \"[100, 90, 80, 70]\",\n    \"output\": 7\n  },\n  {\n    \"input\": \"[2]\",\n    \"output\": 2\n  },\n  {\n    \"input\": \"[101, 103, 107, 109, 113]\",\n    \"output\": 13\n  }\n])"}
{"task_id": "HumanEval/95", "modified_prompt": "(\"def check_dict_case(dict):\\n     \\\"\\\"\\\"\\n    Given a dictionary, return True if all keys are strings in lower \\n    case or all keys are strings in upper case, else return False.\\n    The function should return False is the given dictionary is empty.\\n    \\\"\\\"\\\"\\n\", [\n{\"input\": \"{'apple': 'fruit', 'banana': 'fruit', 'cherry': 'fruit'}\", \"output\": True},\n{\"input\": \"{'APPLE': 'fruit', 'BANANA': 'fruit', 'CHERRY': 'fruit'}\", \"output\": True},\n{\"input\": \"{'Apple': 'fruit', 'banana': 'fruit', 'Cherry': 'fruit'}\", \"output\": False},\n{\"input\": \"{}\", \"output\": False},\n{\"input\": \"{'APPLE': 'fruit', 'BANana': 'fruit', 'CHERRY': 'fruit'}\", \"output\": False},\n{\"input\": \"{'123': 1, '456': 2, '789': 3}\", \"output\": True}\n])"}
{"task_id": "HumanEval/96", "modified_prompt": "(\"Implement a function that takes an non-negative integer and returns an array of the first n\\n    integers that are prime numbers and less than n.\",\n[\n  {\"input\": 2, \"output\": []},\n  {\"input\": 3, \"output\": [2]},\n  {\"input\": 5, \"output\": [2, 3]},\n  {\"input\": 10, \"output\": [2, 3, 5, 7]},\n  {\"input\": 20, \"output\": [2, 3, 5, 7, 11, 13, 17, 19]},\n  {\"input\": 0, \"output\": []},\n  {\"input\": 1, \"output\": []},\n  {\"input\": 100, \"output\": [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]}\n])"}
{"task_id": "HumanEval/97", "modified_prompt": "(\"def multiply(a, b):\\n     \\\"Complete the function that takes two integers and returns \\n    the product of their unit digits.\\n    Assume the input is always valid.\", [{\"input\": \"multiply(7, 5)\", \"output\": 35}, {\"input\": \"multiply(23, 10)\", \"output\": 0}, {\"input\": \"multiply(6, 1)\", \"output\": 6}, {\"input\": \"multiply(23, 4)\", \"output\": 12}, {\"input\": \"multiply(13, 52)\", \"output\": 6}, {\"input\": \"multiply(10, 10)\", \"output\": 0}])"}
{"task_id": "HumanEval/98", "modified_prompt": "(\"def count_upper(s):\\n     \\\"\\n    Given a string s, count the number of uppercase vowels in even indices.\", [{\"input\": \"ALabama\", \"output\": 1}, {\"input\": \"Hello World!\", \"output\": 1}, {\"input\": \"I am Iron Man\", \"output\": 2}, {\"input\": \"QUIET\", \"output\": 2}, {\"input\": \"i am lowercase\", \"output\": 0}, {\"input\": \"NO UPPERCASE VOWELS\", \"output\": 2}, {\"input\": \"1234 AEIOU 1234 aeIOU\", \"output\": 3}, {\"input\": \"\", \"output\": 0}])"}
{"task_id": "HumanEval/99", "modified_prompt": "(\"HumanEval/99\", \"def closest_integer(value):\\n    \\\"\\\"\\\"\\n    Create a function that takes a value (string) representing a number\\n    and returns the closest integer to it. If the number is equidistant\\n    from two integers, round it away from zero.\\n\\n  Note:\\n    Rounding away from zero means that if the given number is equidistant\\n    from two integers, the one you should return is the one that is the\\n    farthest from zero.\", [{\"input\": \"\\\"3.2\\\"\", \"output\": \"3\"}, {\"input\": \"\\\"4.9\\\"\", \"output\": \"5\"}, {\"input\": \"\\\"-2.5\\\"\", \"output\": \"-3\"}, {\"input\": \"\\\"0.5\\\"\", \"output\": \"1\"}, {\"input\": \"\\\"-0.5\\\"\", \"output\": \"-1\"}, {\"input\": \"\\\"0\\\"\", \"output\": \"0\"}, {\"input\": \"\\\"-1.49\\\"\", \"output\": \"-1\"}, {\"input\": \"\\\"100.999\\\"\", \"output\": \"101\"}])"}
{"task_id": "HumanEval/100", "modified_prompt": "(\"def make_a_pile(n):\\n     \\\"\\n    Given a positive integer n, you have to make a pile of n levels of stones.\\n    The first level has n stones.\\n    The number of stones in the next level is:\", [{\"input\": \"5\", \"output\": \"15\"}, {\"input\": \"10\", \"output\": \"55\"}, {\"input\": \"3\", \"output\": \"6\"}, {\"input\": \"1\", \"output\": \"1\"}, {\"input\": \"7\", \"output\": \"28\"}] )"}
{"task_id": "HumanEval/101", "modified_prompt": "(\"HumanEval/101\", \"def words_string(s):\\n     \\\"\\n    You will be given a string of words separated by commas or spaces. Your task is\\n    to split the string into words and return an array of the words.\", [\n{\"input\": \"\\\"Hello, how are you today?\\\"\", \"output\": [\"Hello,\", \"how\", \"are\", \"you\", \"today?\"]},\n{\"input\": \"\\\"apple, banana, cherry\\\"\", \"output\": [\"apple,\", \"banana,\", \"cherry\"]},\n{\"input\": \"\\\"123,456 789\\\"\", \"output\": [\"123,456\", \"789\"]},\n{\"input\": \"\\\"singleword\\\"\", \"output\": [\"singleword\"]},\n{\"input\": \"\\\"multiple words without commas\\\"\", \"output\": [\"multiple\", \"words\", \"without\", \"commas\"]},\n{\"input\": \"\\\"multiple,words,with,only,commas\\\"\", \"output\": [\"multiple,words,with,only,commas\"]},\n{\"input\": \"\\\"\\\",\", \"output\": [\"\"]},\n{\"input\": \"\\\" spaces at the start and end \\\"\", \"output\": [\"spaces\", \"at\", \"the\", \"start\", \"and\", \"end\"]},\n{\"input\": \"\\\"commas, at, the, end,\\\"\", \"output\": [\"commas,\", \"at,\", \"the,\", \"end,\"]}\n])"}
{"task_id": "HumanEval/102", "modified_prompt": "(\"def choose_num(x, y):\\n     \\\"This function takes two positive numbers x and y and returns the\\n    biggest even integer number that is in the range [x, y] inclusive. If \\n    there's no such number, then the function should return -1.\", [{\"input\": \"5, 10\", \"output\": \"10\"}, {\"input\": \"11, 16\", \"output\": \"16\"}, {\"input\": \"1, 3\", \"output\": \"-1\"}, {\"input\": \"8, 8\", \"output\": \"8\"}, {\"input\": \"100, 200\", \"output\": \"200\"}, {\"input\": \"7, 7\", \"output\": \"-1\"}])"}
{"task_id": "HumanEval/103", "modified_prompt": "(\"def rounded_avg(n, m):\\n     \\\"You are given two positive integers n and m, and your task is to compute the\\n    average of the integers from n through m (including n and m) . \\n    Round the answer to the nearest integer. \\n    If n is greater than m, return -1.\", [\n  {\"input\": \"rounded_avg(1, 5)\", \"output\": \"3\"},\n  {\"input\": \"rounded_avg(4, 9)\", \"output\": \"6\"},\n  {\"input\": \"rounded_avg(100, 102)\", \"output\": \"101\"},\n  {\"input\": \"rounded_avg(7, 7)\", \"output\": \"7\"},\n  {\"input\": \"rounded_avg(10, 1)\", \"output\": \"-1\"},\n  {\"input\": \"rounded_avg(99, 100)\", \"output\": \"100\"},\n  {\"input\": \"rounded_avg(0, 0)\", \"output\": \"0\"}\n])"}
{"task_id": "HumanEval/104", "modified_prompt": "(\"def unique_digits(x):   \\n     \\\"Given a list of positive integers x. return a sorted list of all \\n    elements that hasn\\'t any even digit.\\n\\n    Note: Returned list should be sorted in increasing order.\", [{\"input\": \"[134, 345, 579, 133, 1111, 11111, 577]\", \"output\": \"[1111, 11111, 133, 345, 577, 579]\"}, {\"input\": \"[1,3,5,7]\", \"output\": \"[1,3,5,7]\"}, {\"input\": \"[1212, 2323, 3434, 4545, 5656, 6767, 7878, 8989, 9090]\", \"output\": \"[6767, 7878, 8989]\"}, {\"input\": \"[1010, 2020, 3030, 4040, 5050, 6060, 7070, 8080, 9090]\", \"output\": \"[7070]\"}, {\"input\": \"[90, 91, 19, 92, 29, 93, 39, 94, 49, 95, 59, 96, 69, 97, 79, 98, 89, 99]\", \"output\": \"[59, 79, 99]\"}, {\"input\": \"[1,2,3,4,5,6,7,8,9]\", \"output\": \"[1,3,5,7,9]\"}])"}
{"task_id": "HumanEval/105", "modified_prompt": "(\"HumanEval/105\", \"def by_length(arr):\\n     \\\"\\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\\n    reverse the resulting array, and then replace each digit by its corresponding name from\\n    \\\"One\\\", \\\"Two\\\", \\\"Three\\\", \\\"Four\\\", \\\"Five\\\", \\\"Six\\\", \\\"Seven\\\", \\\"Eight\\\", \\\"Nine\\\".\", [\n{\"input\": \"[2, 3, 6, 8, 1, 4]\", \"output\": [\"Eight\", \"Six\", \"Four\", \"Three\", \"Two\", \"One\"]},\n{\"input\": \"[9, 5, 2, 7, 3, 8]\", \"output\": [\"Nine\", \"Eight\", \"Seven\", \"Five\", \"Three\", \"Two\"]},\n{\"input\": \"[1, 1, 1, 1, 1, 1]\", \"output\": [\"One\", \"One\", \"One\", \"One\", \"One\", \"One\"]},\n{\"input\": \"[3, 4, 5]\", \"output\": [\"Five\", \"Four\", \"Three\"]},\n{\"input\": \"[9, 7, 5, 3, 1]\", \"output\": [\"Nine\", \"Seven\", \"Five\", \"Three\", \"One\"]},\n{\"input\": \"[1, 2, 3, 4, 5, 6, 7, 8, 9]\", \"output\": [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]},\n{\"input\": \"[]\", \"output\": []},\n{\"input\": \"[11, 22, 33, 44]\", \"output\": []},\n{\"input\": \"[1, 10, 100, 1000]\", \"output\": [\"One\"]},\n{\"input\": \"[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\", \"output\": [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]}\n])"}
{"task_id": "HumanEval/106", "modified_prompt": "(\"def f(n):\\n     \\\" Implement the function f that takes n as a parameter,\\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\\n    or the sum of numbers from 1 to i otherwise.\\n    i starts from 1.\", [{\"input\": \"f(1)\", \"output\": \"[1]\"}, {\"input\": \"f(2)\", \"output\": \"[1, 2]\"}, {\"input\": \"f(3)\", \"output\": \"[1, 2, 6]\"}, {\"input\": \"f(5)\", \"output\": \"[1, 2, 6, 10, 24]\"}, {\"input\": \"f(0)\", \"output\": \"[]\"}, {\"input\": \"f(10)\", \"output\": \"[1, 2, 6, 10, 24, 15, 720, 28, 40320, 45]\"}])"}
{"task_id": "HumanEval/107", "modified_prompt": "(\"HumanEval/107\", \"def even_odd_palindrome(n):\\n     \\\"\\n    Given a positive integer n, return a tuple that has the number of even and odd\\n    integer palindromes that fall within the range(1, n), inclusive.\", [{\"input\": \"10\", \"output\": \"(4, 6)\"}, {\"input\": \"100\", \"output\": \"(4, 6)\"}, {\"input\": \"1000\", \"output\": \"(4, 496)\"}, {\"input\": \"500\", \"output\": \"(4, 246)\"}, {\"input\": \"1\", \"output\": \"(0, 1)\"}, {\"input\": \"50\", \"output\": \"(4, 21)\"}])"}
{"task_id": "HumanEval/108", "modified_prompt": "(\"def count_nums(arr):\\n     \\\"\\\"\\\"\\n    Write a function count_nums which takes an array of integers and returns\\n    the number of elements which has a sum of digits > 0.\\\"\\\"\\\"\",\n[\n{\"input\": \"[1, 2, 3, 4, 5]\", \"output\": 5},\n{\"input\": \"[0, 0, 0, 0, 0]\", \"output\": 0},\n{\"input\": \"[10, 20, 30, 40, 50]\", \"output\": 5},\n{\"input\": \"[-1, -2, -3, -4, -5]\", \"output\": 5},\n{\"input\": \"[123, 456, 789, 0, -12]\", \"output\": 5},\n{\"input\": \"[100, 200, 300, -400, 500]\", \"output\": 5},\n{\"input\": \"[1000, 2000, 3000, 4000, 5000]\", \"output\": 5},\n{\"input\": \"[0, 0, -1, -1, 0]\", \"output\": 2},\n{\"input\": \"[12, 24, 36, 48, 60]\", \"output\": 5},\n{\"input\": \"[-12, -24, -36, -48, -60]\", \"output\": 5}\n])"}
{"task_id": "HumanEval/109", "modified_prompt": "(\"def move_one_ball(arr):\\n     \\\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\\n   numbers in the array will be randomly ordered. Your task is to determine if\\n   it is possible to get an array sorted in non-decreasing order by performing \\n   the following operation on the given array:\", [{\"input\": \"[1, 3, 2, 4, 5]\", \"output\": True}, {\"input\": \"[5, 4, 3, 2, 1]\", \"output\": False}, {\"input\": \"[1, 2, 3, 4, 5]\", \"output\": True}, {\"input\": \"[10, 5, 20, 30, 15]\", \"output\": False}, {\"input\": \"[3, 1, 2]\", \"output\": True}])"}
{"task_id": "HumanEval/110", "modified_prompt": "(\"def exchange(lst1, lst2):\\n     \\\"In this problem, you will implement a function that takes two lists of numbers,\\n    and determines whether it is possible to perform an exchange of elements\\n    between them to make lst1 a list of only even numbers.\", [{\"input\": \"[1, 3, 5], [2, 4, 6]\", \"output\": True}, {\"input\": \"[1, 3, 5], [1, 3, 7]\", \"output\": False}, {\"input\": \"[2, 4, 6], [1, 3, 5]\", \"output\": True}, {\"input\": \"[1, 2, 3, 4, 5], [2, 4, 6, 8, 10]\", \"output\": True}, {\"input\": \"[], [1, 3, 5]\", \"output\": True}, {\"input\": \"[1, 3, 5], []\", \"output\": False}])"}
{"task_id": "HumanEval/111", "modified_prompt": "{\"input\": \"histogram('a b b c c c')\", \"output\": {\"c\": 3}}, \n{\"input\": \"histogram('z z z z a a a')\", \"output\": {\"z\": 4}},\n{\"input\": \"histogram('m m m m m n n n')\", \"output\": {\"m\": 5}},\n{\"input\": \"histogram('x y z')\", \"output\": {\"x\": 1, \"y\": 1, \"z\": 1}},\n{\"input\": \"histogram('')\", \"output\": {}}}"}
{"task_id": "HumanEval/112", "modified_prompt": "(\"def reverse_delete(s,c):\\n     \\\"Task\\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\\n    then check if the result string is palindrome.\\n    A string is called palindrome if it reads the same backward as forward.\\n    You should return a tuple containing the result string and True/False for the check.\", [\n    {\"input\": \"\\\"dad\\\", \\\"a\\\"\", \"output\": \"(\\\"dd\\\", True)\"}, \n    {\"input\": \"\\\"reverse\\\", \\\"r\\\"\", \"output\": \"(\\\"evsee\\\", False)\"},\n    {\"input\": \"\\\"racecar\\\", \\\"a\\\"\", \"output\": \"(\\\"rcecr\\\", False)\"},\n    {\"input\": \"\\\"racecar\\\", \\\"ra\\\"\", \"output\": \"(\\\"ceec\\\", True)\"},\n    {\"input\": \"\\\"python\\\", \\\"p\\\"\", \"output\": \"(\\\"ython\\\", False)\"},\n    {\"input\": \"\\\"python\\\", \\\"yt\\\"\", \"output\": \"(\\\"phon\\\", False)\"},\n    {\"input\": \"\\\"python\\\", \\\"o\\\"\", \"output\": \"(\\\"pythn\\\", False)\"},\n    {\"input\": \"\\\"level\\\", \\\"\\\"\", \"output\": \"(\\\"level\\\", True)\"}\n    ])"}
{"task_id": "HumanEval/113", "modified_prompt": "(\"def odd_count(lst):\\n     \\\"Given a list of strings, where each string consists of only digits, return a list.\\n    Each element i of the output should be \\\"the number of odd elements in the\\n    string i of the input.\\\" where all the i's should be replaced by the number\", [\n{\"input\": [\"12345\", \"67890\", \"24680\", \"13579\", \"11111\", \"00000\"], \"output\": [\"the number of odd elements in the string 1 of the input is 3\", \"the number of odd elements in the string 2 of the input is 0\", \"the number of odd elements in the string 3 of the input is 0\", \"the number of odd elements in the string 4 of the input is 5\", \"the number of odd elements in the string 5 of the input is 5\", \"the number of odd elements in the string 6 of the input is 0\"]},\n{\"input\": [\"56\", \"987\"], \"output\": [\"the number of odd elements in the string 1 of the input is 1\", \"the number of odd elements in the string 2 of the input is 2\"]},\n{\"input\": [\"246\", \"643\", \"345\", \"273\"], \"output\": [\"the number of odd elements in the string 1 of the input is 0\", \"the number of odd elements in the string 2 of the input is 1\", \"the number of odd elements in the string 3 of the input is 3\", \"the number of odd elements in the string 4 of the input is 2\"]},\n{\"input\": [\"2\", \"67\", \"765\", \"/\", \".\", \"\", \"1\"], \"output\": [\"the number of odd elements in the string 1 of the input is 0\", \"the number of odd elements in the string 2 of the input is 1\", \"the number of odd elements in the string 3 of the input is 3\", \"the number of odd elements in the string 4 of the input is 0\", \"the number of odd elements in the string 5 of the input is 0\", \"the number of odd elements in the string 6 of the input is 0\", \"the number of odd elements in the string 7 of the input is 1\"]},\n{\"input\": [], \"output\": []}])"}
{"task_id": "HumanEval/114", "modified_prompt": "(\"def minSubArraySum(nums):\\n     \\\"\\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\\n    of nums.\", [{\"input\": \"[1,2,3,4]\", \"output\": \"1\"}, {\"input\": \"[-2,-3,4,-1,-2,1,5,-3]\", \"output\": \"-5\"}, {\"input\": \"[2,-1,1,4,-2,3]\", \"output\": \"-2\"}, {\"input\": \"[3,7,-3,1,2,4,-8]\", \"output\": \"-8\"}, {\"input\": \"[0,-1,-2,-3,2]\", \"output\": \"-6\"}, {\"input\": \"[-1,-2,-3,-4,-5]\", \"output\": \"-15\"}])"}
{"task_id": "HumanEval/115", "modified_prompt": "(\"def max_fill(grid, capacity):\\n    import math\\n     \\\"\\\"\\n    You are given a rectangular grid of wells. Each row represents a single well,\\n    and each 1 in a row represents a single unit of water.\\n    Each well has a corresponding bucket that can be used to extract water from it, \\n    and all buckets have the same capacity.\", [{\"input\": \"[[1, 0, 1, 1, 0], [0, 0, 1, 1, 1], [1, 1, 0, 0, 0]], 3\", \"output\": \"[1,2,2]\"}, {\"input\": \"[[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], 5\", \"output\": \"[5,5,5]\"}, {\"input\": \"[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 1\", \"output\": \"[0,0,0]\"}, {\"input\": \"[[1, 0, 1], [0, 1, 1], [1, 0, 0]], 2\", \"output\": \"[2,2,1]\"}, {\"input\": \"[[1, 1, 1, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0, 0]], 3\", \"output\": \"[3,2]\"}])"}
{"task_id": "HumanEval/116", "modified_prompt": "(\"def sort_array(arr):\\n    \\\"\\\"\\\"\\n   In this Kata, you have to sort an array of non-negative integers according to\\n   number of ones in their binary representation in ascending order.\\n   For similar number of ones, sort based on decimal value.\\n\\n   It must be implemented like this:\", [\n  {\"input\": [[110, 90, 34, 22, 10]], \"output\": [10, 34, 22, 90, 110]},\n  {\"input\": [[5, 9, 4, 14, 6, 15]], \"output\": [4, 5, 6, 9, 14, 15]},\n  {\"input\": [[20, 32, 10, 1, 0, 15]], \"output\": [0, 1, 10, 20, 32, 15]},\n  {\"input\": [[0, 0, 0, 0]], \"output\": [0, 0, 0, 0]},\n  {\"input\": [[1, 1, 1, 1]], \"output\": [1, 1, 1, 1]},\n  {\"input\": [[32, 64, 128]], \"output\": [32, 64, 128]},\n  {\"input\": [[33, 129, 65]], \"output\": [65, 33, 129]}\n])"}
{"task_id": "HumanEval/117", "modified_prompt": "(\"def select_words(s, n):\\n    \\\"Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s.\", [\n    {\"input\": [\"hello world, my name is Jim\", 1], \"output\": [\"my\", \"is\"]},\n    {\"input\": [\"the quick brown fox jumps over the lazy dog\", 3], \"output\": [\"quick\", \"jumps\", \"over\"]},\n    {\"input\": [\"consonants are not vowels\", 2], \"output\": [\"are\", \"not\"]},\n    {\"input\": [\"select words with specific consonants\", 3], \"output\": [\"words\", \"with\"]},\n    {\"input\": [\"\", 2], \"output\": []},\n    {\"input\": [\"test\", 0], \"output\": []},\n    {\"input\": [\"I like ice cream\", 2], \"output\": [\"like\", \"cream\"]},\n    {\"input\": [\"simple example\", 2], \"output\": [\"simple\", \"example\"]},\n    {\"input\": [\"this function helps to filter words\", 5], \"output\": [\"function\", \"filter\"]},\n    {\"input\": [\"consonants are important in English\", 4], \"output\": [\"important\", \"English\"]}\n])"}
{"task_id": "HumanEval/118", "modified_prompt": "(\"def get_closest_vowel(word):\\n     \\\"You are given a word. Your task is to find the closest vowel that stands between \\n    two consonants from the right side of the word (case sensitive).\\n    \\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\\n    find any vowel met the above condition.\", [{\"input\": \"Hello\", \"output\": \"e\"}, {\"input\": \"world\", \"output\": \"\"}, {\"input\": \"Programming\", \"output\": \"o\"}, {\"input\": \"inefficient\", \"output\": \"i\"}, {\"input\": \"Happy\", \"output\": \"a\"}, {\"input\": \"lonely\", \"output\": \"e\"}, {\"input\": \"LONELY\", \"output\": \"\"}, {\"input\": \"abc\", \"output\": \"\"}, {\"input\": \"BCdaeFG\", \"output\": \"a\"}, {\"input\": \"double\", \"output\": \"o\"}, {\"input\": \"single\", \"output\": \"i\"}, {\"input\": \"\", \"output\": \"\"}])"}
{"task_id": "HumanEval/119", "modified_prompt": "(\"HumanEval/119\", \"def match_parens(lst):\\n    \\\"\\n    You are given a list of two strings, both strings consist of open\\n    parentheses '(' or close parentheses ')' only.\", [\n  {\"input\": '[\"()\", \"\"]', \"output\": \"<expected_output>\"},\n  {\"input\": '[\"(\", \")\"]', \"output\": \"<expected_output>\"},\n  {\"input\": '[\"()\", \"()\"]', \"output\": \"<expected_output>\"},\n  {\"input\": '[\"(((\", \"))\"]', \"output\": \"<expected_output>\"},\n  {\"input\": '[\"((\", \"))(\"]', \"output\": \"<expected_output>\"},\n  {\"input\": '[\"\", \"\"]', \"output\": \"<expected_output>\"},\n  {\"input\": '[\"))))\", \"((((\"]', \"output\": \"<expected_output>\"},\n  {\"input\": '[\"(())\", \"(()())\"]', \"output\": \"<expected_output>\"}\n])"}
{"task_id": "HumanEval/120", "modified_prompt": "(\"HumanEval/120\", \"def maximum(arr, k):\\n     \\\"\\n    Given an array arr of integers and a positive integer k, return a sorted list \\n    of length k with the maximum k numbers in arr.\", [\n{\"input\": \"([1,3,5,7,9,2,4,6,8,0], 5)\", \"output\": \"[5,6,7,8,9]\"},\n{\"input\": \"([-2,-3,-4,-1,0], 3)\", \"output\": \"[0, -1, -2]\"},\n{\"input\": \"([5,5,5,5,5,5], 2)\", \"output\": \"[5,5]\"},\n{\"input\": \"([100,200,300,400,500], 1)\", \"output\": \"[500]\"},\n{\"input\": \"([], 0)\", \"output\": \"[]\"},\n{\"input\": \"([0], 1)\", \"output\": \"[0]\"},\n{\"input\": \"([1,2,3,4,5,6,7,8,9,10], 10)\", \"output\": \"[1,2,3,4,5,6,7,8,9,10]\"},\n{\"input\": \"([1,3,2,4,6,5,7,9,8], 3)\", \"output\": \"[7,8,9]\"},\n{\"input\": \"([1], 1)\", \"output\": \"[1]\"},\n{\"input\": \"([9,8,7,6,5,4,3,2,1], 5)\", \"output\": \"[5,6,7,8,9]\"},\n])"}
{"task_id": "HumanEval/121", "modified_prompt": "(\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\", [{\"input\": \"[1, 2, 3, 4, 5, 6]\", \"output\": \"8\"}, {\"input\": \"[10, 20, 45, 30, 75, 50]\", \"output\": \"120\"}, {\"input\": \"[7, 2, 9, 4, 11, 6]\", \"output\": \"20\"}, {\"input\": \"[1, 5, 1, 5, 1, 5]\", \"output\": \"3\"}, {\"input\": \"[2, 4, 6, 8, 10, 12]\", \"output\": \"0\"}])"}
{"task_id": "HumanEval/122", "modified_prompt": "(\"def add_elements(arr, k):\\n     \\\"\\\"\\\"\\n    Given a non-empty array of integers arr and an integer k, return\\n    the sum of the elements with at most two digits from the first k elements of arr.\", [{\"input\": \"([1, 2, 3, 4, 5], 3)\", \"output\": \"6\"}, {\"input\": \"([-10, -20, 30, 40, 50], 4)\", \"output\": \"-40\"}, {\"input\": \"([123, 45, 67, 89, 90], 5)\", \"output\": \"291\"}, {\"input\": \"([1000, 22, 340, 420, 567], 2)\", \"output\": \"22\"}, {\"input\": \"([12, -45, 67, -89, 10], 1)\", \"output\": \"12\"}])"}
{"task_id": "HumanEval/123", "modified_prompt": "(\"def get_odd_collatz(n):\\n     \\\"\\\"\\\"\\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\\n\\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\\n    as follows: start with any positive integer n.\", [\n{\"input\": \"get_odd_collatz(3)\", \"output\": \"[1, 3, 5]\"},\n{\"input\": \"get_odd_collatz(6)\", \"output\": \"[1, 3, 5]\"},\n{\"input\": \"get_odd_collatz(7)\", \"output\": \"[1, 3, 5, 7, 9, 21, 25, 27, 35, 37, 43, 85, 87, 97, 111, 133, 171, 213, 219, 255, 273, 341, 427, 649, 731, 767, 923, 961, 1021, 1705, 1823, 2047, 3855, 4257, 5213, 5461, 6807, 7281, 7703, 8209, 10923, 17061, 18913, 20495, 21957, 23297, 34961, 42565, 46807, 54613, 56197, 78097, 100485, 113383, 138367, 157905, 177949, 233469, 253241, 342947, 381733, 600853, 744451, 1099477, 14939021, 44717065]\"},\n{\"input\": \"get_odd_collatz(12)\", \"output\": \"[1, 3, 5]\"},\n{\"input\": \"get_odd_collatz(1)\", \"output\": \"[1]\"}\n])"}
{"task_id": "HumanEval/124", "modified_prompt": "(\"def valid_date(date):\\n     \\\"You have to write a function which validates a given date string and\\n    returns True if the date is valid otherwise False.\\n    The date is valid if all of the following rules are satisfied:\", [{\"input\": \"\\\"2022-09-30\\\"\", \"output\": \"True\"}, {\"input\": \"\\\"2022-09-31\\\"\", \"output\": \"False\"}, {\"input\": \"\\\"2021-02-28\\\"\", \"output\": \"True\"}, {\"input\": \"\\\"2021-02-29\\\"\", \"output\": \"False\"}, {\"input\": \"\\\"2020-02-29\\\"\", \"output\": \"True\"}, {\"input\": \"\\\"2000-02-29\\\"\", \"output\": \"True\"}, {\"input\": \"\\\"1900-02-29\\\"\", \"output\": \"False\"}, {\"input\": \"\\\"abcd\\\"\", \"output\": \"False\"}, {\"input\": \"\\\"2020-13-01\\\"\", \"output\": \"False\"}, {\"input\": \"\\\"2022-09-00\\\"\", \"output\": \"False\"}, {\"input\": \"\\\"2022-09-01\\\"\", \"output\": \"True\"}, {\"input\": \"\\\"1899-12-31\\\"\", \"output\": \"True\"}, {\"input\": \"\\\"10000-01-01\\\"\", \"output\": \"False\"}])"}
{"task_id": "HumanEval/125", "modified_prompt": "(\"def split_words(txt):\\n    \\\"\\\"\\\"\\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\\n    alphabet, ord('a') = 0, ord('b') = 1, ...\\\"\", [{\"input\": \"Hello world from function\", \"output\": [\"Hello\", \"world\", \"from\", \"function\"]}, {\"input\": \"one,two,three,four\", \"output\": [\"one\", \"two\", \"three\", \"four\"]}, {\"input\": \"onetwothreefour\", \"output\": 10}, {\"input\": \"Hey, there\", \"output\": [\"Hey,\", \"there\"]}, {\"input\": \"abc\", \"output\": 1}, {\"input\": \"this,is,a,test\", \"output\": [\"this\",\"is\",\"a\",\"test\"]}, {\"input\": \"\", \"output\": 0}])"}
{"task_id": "HumanEval/126", "modified_prompt": "(\"def is_sorted(lst):\\n    \\\"\\\"\\\"\\n    Given a list of numbers, return whether or not they are sorted\\n    in ascending order. If list has more than 1 duplicate of the same\\n    number, return False. Assume no negative numbers and only integers.\", [\n  {\"input\": \"[1, 2, 3, 4, 5]\", \"output\": True},\n  {\"input\": \"[5, 4, 3, 2, 1]\", \"output\": False},\n  {\"input\": \"[1, 1, 2, 3, 4, 5]\", \"output\": False},\n  {\"input\": \"[1, 2, 3, 4, 2]\", \"output\": False},\n  {\"input\": \"[2, 2, 2, 2, 2]\", \"output\": False},\n  {\"input\": \"[1]\", \"output\": True},\n  {\"input\": \"[]\", \"output\": True},\n  {\"input\": \"[1, 3, 5, 7, 9]\", \"output\": True}\n])"}
{"task_id": "HumanEval/127", "modified_prompt": "(\"def intersection(interval1, interval2):\\n     \\\"You are given two intervals,\\n    where each interval is a pair of integers.\\\"\",\n[\n  {\n    \"input\": \"([1, 5], [3, 7])\",\n    \"output\": \"[3, 5]\"\n  },\n  {\n    \"input\": \"([-2, 1], [1, 3])\",\n    \"output\": \"[1, 1]\"\n  },\n  {\n    \"input\": \"([0, 3], [4, 7])\",\n    \"output\": \"[]\"\n  },\n  {\n    \"input\": \"([-10, -3], [-5, 0])\",\n    \"output\": \"[-5, -3]\"\n  },\n  {\n    \"input\": \"([4, 8], [3, 7])\",\n    \"output\": \"[4, 7]\"\n  },\n  {\n    \"input\": \"([-7, -1], [-4, 3])\",\n    \"output\": \"[-4, -1]\"\n  },\n  {\n    \"input\": \"([1, 1], [1, 1])\",\n    \"output\": \"[1, 1]\"\n  },\n  {\n    \"input\": \"([2, 2], [3, 3])\",\n    \"output\": \"[]\"\n  }\n])"}
{"task_id": "HumanEval/128", "modified_prompt": "(\"def prod_signs(arr):\\n     \\\"\\\"\\n    You are given an array arr of integers and you need to return\\n    sum of magnitudes of integers multiplied by product of all signs\\n    of each number in the array, represented by 1, -1 or 0.\\n    Note: return None for empty arr.\", [{\"input\": \"[-1,-2,3]\", \"output\": \"-6\"}, {\"input\": \"[-1, -2, -3, 4, -5, 6]\", \"output\": \"21\"}, {\"input\": \"[0, -2, 3]\", \"output\": \"0\"}, {\"input\": \"[1,2,3]\", \"output\": \"6\"}, {\"input\": \"[4, 5, -1]\", \"output\": \"-9\"}, {\"input\": \"[]\", \"output\": None}])"}
{"task_id": "HumanEval/129", "modified_prompt": "(\"def minPath(grid, k):\\n     \\\"\\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \\n    each cell of the grid contains a value.\", [\n  {\"input\": '[[1,2,3],[4,5,6],[7,8,9], 2]', \"output\": \"Not yet defined\"}, \n  {\"input\": '[[5,1,9],[8,3,2],[11,7,4], 3]', \"output\": \"Not yet defined\"},\n  {\"input\": '[[8,2,4],[5,7,9],[3,6,1], 3]', \"output\": \"Not yet defined\"},\n  {\"input\": '[[5,8,2],[3,4,6],[7,1,9], 2]', \"output\": \"Not yet defined\"},\n  {\"input\": '[[2,4,1],[7,6,3],[5,9,8], 2]', \"output\": \"Not yet defined\"}\n])"}
{"task_id": "HumanEval/130", "modified_prompt": "(\"def tri(n):\\n     \\\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\", \n[{\"input\": \"tri(1)\", \"output\": \"1\"}, \n {\"input\": \"tri(2)\", \"output\": \"1\"}, \n {\"input\": \"tri(3)\", \"output\": \"2\"}, \n {\"input\": \"tri(4)\", \"output\": \"4\"}, \n {\"input\": \"tri(5)\", \"output\": \"7\"}, \n {\"input\": \"tri(6)\", \"output\": \"13\"}, \n {\"input\": \"tri(7)\", \"output\": \"24\"}, \n {\"input\": \"tri(8)\", \"output\": \"44\"}, \n {\"input\": \"tri(10)\", \"output\": \"149\"}, \n {\"input\": \"tri(0)\", \"output\": \"0\"}])"}
{"task_id": "HumanEval/131", "modified_prompt": "(\"Given a positive integer n, return the product of the odd digits. Return 0 if all digits are even.\", [{\"input\": \"1234567890\", \"output\": 945}, {\"input\": \"24680\", \"output\": 0}, {\"input\": \"13579\", \"output\": 945}, {\"input\": \"11111\", \"output\": 1}, {\"input\": \"9876543210\", \"output\": 945}, {\"input\": \"99999\", \"output\": 59049}, {\"input\": \"234567\", \"output\": 105}, {\"input\": \"1\", \"output\": 1}, {\"input\": \"0\", \"output\": 0}, {\"input\": \"55555\", \"output\": 3125}])"}
{"task_id": "HumanEval/132", "modified_prompt": "(\"def is_nested(string):\\n    \\\"\\\"\\\"\\n    Create a function that takes a string as input which contains only square brackets.\\n    The function should return True if and only if there is a valid subsequence of brackets\", [{\"input\": \"[[]]\", \"output\": True}, {\"input\": \"[[[][]]]\", \"output\": True}, {\"input\": \"][\", \"output\": False}, {\"input\": \"[[][]\", \"output\": False}, {\"input\": \"[]][[]\", \"output\": False}, {\"input\": \"[[[[[]]]]]\", \"output\": True}, {\"input\": \"\", \"output\": True}])"}
{"task_id": "HumanEval/133", "modified_prompt": "(\"def sum_squares(lst):\\n     \\\"You are given a list of numbers.\\n    You need to return the sum of squared numbers in the given list,\\n    round each element in the list to the upper int(Ceiling) first.\", [{\"input\": \"[1, 2, 3, 4, 5]\", \"output\": \"55\"}, {\"input\": \"[0.5, 1.2, 3.7, 4.5, 5.9]\", \"output\": \"70\"}, {\"input\": \"[-1,-2,-3,-4,-5]\", \"output\": \"55\"}, {\"input\": \"[2.6, 3.1, 4.7, 5.2, 6.8]\", \"output\": \"119\"}, {\"input\": \"[1.5, 2.6, 3.8]\", \"output\": \"29\"}])"}
{"task_id": "HumanEval/134", "modified_prompt": "(\"def check_if_last_char_is_a_letter(txt):\\n    \\\"\\\"\\\"\\n    Create a function that returns True if the last character\\n    of a given string is an alphabetical character and is not\\n    a part of a word, and False otherwise.\", [\n    {\"input\": \"Hello World!\", \"output\": False},\n    {\"input\": \"Hello World\", \"output\": True},\n    {\"input\": \"12345\", \"output\": False},\n    {\"input\": \"12345a\", \"output\": True},\n    {\"input\": \"Hello World123\", \"output\": False},\n    {\"input\": \"\", \"output\": False},\n    {\"input\": \"@\", \"output\": False},\n    {\"input\": \"a\", \"output\": False}, \n    {\"input\": \"Hello World a\", \"output\": False},\n    {\"input\": \"Hello World a \", \"output\": True} \n])"}
{"task_id": "HumanEval/135", "modified_prompt": "(\"def can_arrange(arr):\\n     \\\"Create a function which returns the largest index of an element which\\n    is not greater than or equal to the element immediately preceding it. If\\n    no such element exists then return -1.\", [{\"input\": \"[1,2,3,4,5]\", \"output\": -1}, {\"input\": \"[5,3,4,2,1]\", \"output\": 4}, {\"input\": \"[10,20,30,25,35]\", \"output\": 3}, {\"input\": \"[100,200,300,300,500]\", \"output\": -1}, {\"input\": \"[1,1,2,2,1,1]\", \"output\": 4}])"}
{"task_id": "HumanEval/136", "modified_prompt": "(\"HumanEval/136\", \"def largest_smallest_integers(lst):\\n    \\\"\\\"\\\"\\n    Create a function that returns a tuple (a, b), where 'a' is\\n    the largest of negative integers, and 'b' is the smallest\\n    of positive integers in a list.\\n    If there is no negative or positive integers, return them as None.\", [{\"input\": \"[-1, -2, -3, 4, 5, 6]\", \"output\": \"(-1, 4)\"}, {\"input\": \"[0, 1, 2, 3, 4, 5]\", \"output\": \"(None, 1)\"}, {\"input\": \"[-1, -2, -3, -4, -5]\", \"output\": \"(-1, None)\"}, {\"input\": \"[1, 2, 3, -1, -2, -3]\", \"output\": \"(-1, 1)\"}, {\"input\": \"[5, 1, 7, 3, 2, -18, -1, -3]\", \"output\": \"(-1,  1)\"}, {\"input\": \"[]\", \"output\": \"(None, None)\"}])"}
{"task_id": "HumanEval/137", "modified_prompt": "(\"def compare_one(a, b):\\n     \\\"\\n    Create a function that takes integers, floats, or strings representing\\n    real numbers, and returns the larger variable in its given variable type.\\n    Return None if the values are equal.\", [{'input': 'compare_one(2,4)', 'output': '4'}, {'input': 'compare_one(-2.5,2.5)', 'output': '2.5'}, {'input': 'compare_one(4,4.0)', 'output': None}, {'input': 'compare_one(4, \"4\")', 'output': None}, {'input': 'compare_one(4.1, \"4.2\")', 'output': '4.2'}, {'input': 'compare_one(\"100\", \"200\")', 'output': \"200\"}])"}
{"task_id": "HumanEval/138", "modified_prompt": "(\"def is_equal_to_sum_even(n):\\n     \\\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\\\"\", [{\"input\": \"8\", \"output\": True}, {\"input\": \"13\", \"output\": False}, {\"input\": \"20\", \"output\": True}, {\"input\": \"0\", \"output\": False}, {\"input\": \"100\", \"output\": True}, {\"input\": \"2\", \"output\": False}, {\"input\": \"6\", \"output\": False}])"}
{"task_id": "HumanEval/139", "modified_prompt": "(\"def special_factorial(n):\\n     \\\"The Brazilian factorial is defined as:\\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\\n    where n > 0\", [{\"input\": \"special_factorial(1)\", \"output\": \"1\"}, {\"input\": \"special_factorial(2)\", \"output\": \"2\"}, {\"input\": \"special_factorial(3)\", \"output\": \"12\"}, {\"input\": \"special_factorial(4)\", \"output\": \"288\"}, {\"input\": \"special_factorial(5)\", \"output\": \"34560\"}, {\"input\": \"special_factorial(6)\", \"output\": \"24883200\"}])"}
{"task_id": "HumanEval/140", "modified_prompt": "(\"def fix_spaces(text):\\n     \\\"\\\"\\n    Given a string text, replace all spaces in it with underscores, \\n    and if a string has more than 2 consecutive spaces, \\n    then replace all consecutive spaces with -\", [{\"input\": \"Hello world\", \"output\": \"Hello_world\"}, {\"input\": \"Hello  world\", \"output\": \"Hello__world\"}, {\"input\": \"Hello   world\", \"output\": \"Hello-world\"}, {\"input\": \" Hello world\", \"output\": \"_Hello_world\"}, {\"input\": \"\", \"output\": \"\"}, {\"input\": \"     \", \"output\": \"-\"}, {\"input\": \"Hello\\nworld\", \"output\": \"Hello\\nworld\"}])"}
{"task_id": "HumanEval/141", "modified_prompt": "(\"def file_name_check(file_name):\\n     \\\"Create a function which takes a string representing a file's name, and returns\\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\", [\n    {\"input\": \"file_name_check('abc.txt')\", \"output\": \"Yes\"},\n    {\"input\": \"file_name_check('abc$%.txt')\", \"output\": \"No\"},\n    {\"input\": \"file_name_check('Valid_File-Name.pdf')\", \"output\": \"Yes\"},\n    {\"input\": \"file_name_check('abc/foo.txt')\", \"output\": \"No\"},\n    {\"input\": \"file_name_check('abc\\\\foo.txt')\", \"output\": \"No\"},\n    {\"input\": \"file_name_check('.gitignore')\", \"output\": \"Yes\"},\n    {\"input\": \"file_name_check('Invalid<>File.txt')\", \"output\": \"No\"},\n    {\"input\": \"file_name_check('\u041f\u0440\u0438\u0432\u0435\u0442-World.txt')\", \"output\": \"Yes\"},\n    {\"input\": \"file_name_check('')\", \"output\": \"No\"},\n    {\"input\": \"file_name_check(' ')\", \"output\": \"No\"},\n    {\"input\": \"file_name_check(None)\", \"output\": \"No\"}\n])"}
{"task_id": "HumanEval/142", "modified_prompt": "(\"def sum_squares(lst):\\n     \\\"\\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3.\", [\n{\"input\": \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\", \"output\": [1, 2, 3, 64, 125, 6, 49, 8, 729, 10]},\n{\"input\": \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"output\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]},\n{\"input\": \"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\", \"output\": [4, 2, 2, 16, 2, 4, 2, 2, 8, 2]},\n{\"input\": \"[1, -1, 1, -1, 1, -1, 1, -1, 1, -1]\", \"output\": [1, -1, 1, 1, 1, -1, 1, -1, 1, -1]},\n{\"input\": \"[5, 3, 8, 4, 6, 1, 9, 7, 0, 2]\", \"output\": [25, 3, 8, 64, 6, 1, 729, 7, 0, 2]}\n])"}
{"task_id": "HumanEval/143", "modified_prompt": "(\"def words_in_sentence(sentence):\\n     \\\"\\\"\\\"\\n    You are given a string representing a sentence,\\n    the sentence contains some words separated by a space,\\n    and you have to return a string that contains the words from the original sentence,\", [{'input': 'Hello world!', 'output': 'Hello world'}, {'input': 'Coding is fun', 'output': 'Coding is fun'}, {'input': 'I love Python programming', 'output': 'I love Python programming'}, {'input': 'Sometimes the sentences can be really long', 'output': 'Sometimes the sentences can be really long'}, {'input': 'JavaScript is also a good language', 'output': 'JavaScript is also a good language'}, {'input': 'Spaces     between     words', 'output': 'Spaces between words'}, {'input': '', 'output': ''}])"}
{"task_id": "HumanEval/144", "modified_prompt": "(\"def simplify(x, n):\\n     \\\"Your task is to implement a function that will simplify the expression\\n    x * n. The function returns True if x * n evaluates to a whole number and False\\n    otherwise.\", [\n  {\"input\": \"simplify(4, 5)\", \"output\": True},\n  {\"input\": \"simplify(2.5, 4)\", \"output\": True},\n  {\"input\": \"simplify(-3, 7)\", \"output\": True},\n  {\"input\": \"simplify(-2.5, 2)\", \"output\": True},\n  {\"input\": \"simplify(3.3, 3)\", \"output\": False},\n  {\"input\": \"simplify(0, 5)\", \"output\": True}\n])"}
{"task_id": "HumanEval/145", "modified_prompt": "(\"def order_by_points(nums):\\n     \\\"Write a function which sorts the given list of integers\\n    in ascending order according to the sum of their digits.\\\"\",\n[{\"input\": \"[23, 11, 45, 31]\", \"output\": \"[11, 23, 31, 45]\"},\n {\"input\": \"[123, 100, 101, 99]\", \"output\": \"[100, 101, 123, 99]\"},\n {\"input\": \"[101, 10, 44, 33, 11, 22]\", \"output\": \"[101, 10, 11, 22, 33, 44]\"},\n {\"input\": \"[89, 77, 67, 44, 55]\", \"output\": \"[44, 55, 67, 77, 89]\"},\n {\"input\": \"[12, 3, 5, 9]\", \"output\": \"[3, 12, 5, 9]\"},\n {\"input\": \"[999, 888, 777, 111, 333]\", \"output\": \"[111, 333, 777, 888, 999]\"},\n {\"input\": \"[0, 0, 0, 0]\", \"output\": \"[0, 0, 0, 0]\"},\n {\"input\": \"[555, 5555, 55555]\", \"output\": \"[555, 5555, 55555]\"}])"}
{"task_id": "HumanEval/146", "modified_prompt": "(\"def specialFilter(nums):\\n     \\\"Write a function that takes an array of numbers as input and returns \\n    the number of elements in the array that are greater than 10 and both \\n    first and last digits of a number are odd\\\"\", [{\"input\": \"[11, 33, 56, 89, 97, 123, 101, 255]\", \"output\": 5}, {\"input\": \"[9, 25, 112, 30, 87]\", \"output\": 2}, {\"input\": \"[733, 2145, 906, 321, 41]\", \"output\": 3}, {\"input\": \"[2, 4, 6, 8, 10]\", \"output\": 0}, {\"input\": \"[53, 797, 253, 907, 79]\", \"output\": 5}])"}
{"task_id": "HumanEval/147", "modified_prompt": "(\"def get_max_triples(n):\\n     \\\"\\\"\\\"\\n    You are given a positive integer n. You have to create an integer array a of length n.\", [{\"input\": \"10\", \"output\": \"[1,2,3,4,5,6,7,8,9,10]\"}, {\"input\": \"5\", \"output\": \"[1,2,3,4,5]\"}, {\"input\": \"1\", \"output\": \"[1]\"}, {\"input\": \"2\", \"output\": \"[1, 2]\"},{\"input\": \"0\", \"output\": \"[]\"}])"}
{"task_id": "HumanEval/148", "modified_prompt": "(\"def bf(planet1, planet2):\\n    \\\"\\n    There are eight planets in our solar system: the closerst to the Sun \\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \\n    Uranus, Neptune.\", [\n{\"input\": \"\", \"output\": \"\"},\n{\"input\": \"\", \"output\": \"\"},\n{\"input\": \"\", \"output\": \"\"},\n{\"input\": \"\", \"output\": \"\"},\n{\"input\": \"\", \"output\": \"\"}])"}
{"task_id": "HumanEval/149", "modified_prompt": "(\"def sorted_list_sum(lst):\\n     \\\"Write a function that accepts a list of strings as a parameter,\\n    deletes the strings that have odd lengths from it,\", [{\"input\": \"[\\\"apple\\\", \\\"banana\\\", \\\"mango\\\", \\\"pear\\\"]\", \"output\": \"[\\\"pear\\\"]\"}, {\"input\": \"[\\\"cat\\\", \\\"dog\\\", \\\"sheep\\\", \\\"cow\\\"]\", \"output\": \"[\\\"dog\\\", \\\"cow\\\"]\"}, {\"input\": \"[\\\"John\\\", \\\"Paul\\\", \\\"Ringo\\\", \\\"George\\\"]\", \"output\": \"[\\\"Paul\\\"]\"}, {\"input\": \"[\\\"table\\\", \\\"chair\\\", \\\"lamp\\\"]\", \"output\": \"[\\\"lamp\\\"]\"}, {\"input\": \"[\\\"one\\\", \\\"two\\\", \\\"three\\\", \\\"four\\\", \\\"five\\\"]\", \"output\": \"[\\\"four\\\"]\"}])"}
{"task_id": "HumanEval/150", "modified_prompt": "(\"def x_or_y(n, x, y):\\n     \\\"A simple program which should return the value of x if n is \\n    a prime number and should return the value of y otherwise.\", [{\"input\": \"2, 'yes', 'no'\", \"output\": \"yes\"}, {\"input\": \"4, 'yes', 'no'\", \"output\": \"no\"}, {\"input\": \"11, 'apple', 'banana'\", \"output\": \"apple\"}, {\"input\": \"22, 'apple', 'banana'\", \"output\": \"banana\"}, {\"input\": \"17, 5, 3\", \"output\": 5}, {\"input\": \"21, 5, 3\",  \"output\": 3}])"}
{"task_id": "HumanEval/151", "modified_prompt": "{\"input\": \"double_the_difference([1, 2, 3, 4, 5])\", \"output\": 35}, {\"input\": \"double_the_difference([0, 5, 8, -9, 10])\", \"output\": 25}, {\"input\": \"double_the_difference([-1, -2, -3, -4, -5])\", \"output\": 0}, {\"input\": \"double_the_difference([11.5, 2.1, 3, 4, 11])\", \"output\": 130}, {\"input\": \"double_the_difference([])\", \"output\": 0}, {\"input\": \"double_the_difference([2, 4, 6, 8, 10])\", \"output\": 0}, {\"input\": \"double_the_difference([1, 3, 5, 7, 9])\", \"output\": 165}"}
{"task_id": "HumanEval/152", "modified_prompt": "(\"def compare(game,guess):\\n     \\\"I think we all remember that feeling when the result of some long-awaited\\n    event is finally known. The feelings and thoughts you have at that moment are\\n    definitely worth noting down and comparing.\\\"\", [{\"input\": \"('Basketball', 'Soccer')\", \"output\": \"\"}, {\"input\": \"('Super Bowl', 'World Series')\", \"output\": \"\"}, {\"input\": \"('Monopoly', 'Chess')\", \"output\": \"\"}, {\"input\": \"('Poker', 'Blackjack')\", \"output\": \"\"}, {\"input\": \"('Ludo', 'Snakes and Ladders')\", \"output\": \"\"}])"}
{"task_id": "HumanEval/153", "modified_prompt": "(\"HumanEval/153\", \"def Strongest_Extension(class_name, extensions):\\n     \\\"You will be given the name of a class (a string) and a list of extensions.\\n    The extensions are to be used to load additional classes to the class.\", [{\"input\": \"('Animal', ['Cat', 'Dog'])\", \"output\": \"\"}, {\"input\": \"('Vehicle', ['Car', 'Plane', 'Bike'])\", \"output\": \"\"}, {\"input\": \"('Tree', ['Oak', 'Pine', 'Maple'])\", \"output\": \"\"}, {\"input\": \"('Flower', ['Rose', 'Sunflower', 'Tulip'])\", \"output\": \"\"}, {\"input\": \"('Fruit', ['Apple', 'Banana', 'Mango'])\", \"output\": \"\"}])"}
{"task_id": "HumanEval/154", "modified_prompt": "(\"def cycpattern_check(a , b):\\n     \\\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\\\"\", [{\"input\": \"('rotation', 'ion')\", \"output\": \"True\"}, {\"input\": \"('pythonprogram', 'gram')\", \"output\": \"True\"}, {\"input\": \"('universe', 'revu')\", \"output\": \"False\"}, {\"input\": \"('computer', 'omputec')\", \"output\": \"True\"}, {\"input\": \"('rotation', 'tar')\", \"output\": \"True\"}, {\"input\": \"('pythonprogram', 'thonpy')\", \"output\": \"False\"}, {\"input\": \"('helloworld', 'loworldhe')\", \"output\": \"True\"}, {\"input\": \"('race', 'acer')\", \"output\": \"True\"}, {\"input\": \"('universe', 'sre')\", \"output\": \"False\"}, {\"input\": \"('computer', 'muter')\", \"output\": \"False\"}])"}
{"task_id": "HumanEval/155", "modified_prompt": "(\"HumanEval/155\", \"def even_odd_count(num):\\n     \\\"Given an integer. return a tuple that has the number of even and odd digits respectively.\\\"\", [\n  {\"input\": \"2468\", \"output\": \"(4, 0)\"},\n  {\"input\": \"1357\", \"output\": \"(0, 4)\"},\n  {\"input\": \"789\", \"output\": \"(1, 2)\"},\n  {\"input\": \"0\", \"output\": \"(1, 0)\"},\n  {\"input\": \"10010100\", \"output\": \"(5, 3)\"},\n  {\"input\": \"1234567890\", \"output\": \"(5, 5)\"},\n  {\"input\": \"-1234567890\", \"output\": \"(5, 5)\"},\n  {\"input\": \"500\", \"output\": \"(3, 0)\"},\n  {\"input\": \"55\", \"output\": \"(0, 2)\"},\n  {\"input\": \"4456\", \"output\": \"(4, 0)\"},\n  {\"input\": \"50505050\", \"output\": \"(8, 0)\"},\n])"}
{"task_id": "HumanEval/156", "modified_prompt": "(\"def int_to_mini_roman(number):\\n     \\\"\\n    Given a positive integer, obtain its roman numeral equivalent as a string,\\n    and return it in lowercase.\", [\n    {\"input\": \"1\", \"output\": \"i\"},\n    {\"input\": \"4\", \"output\": \"iv\"},\n    {\"input\": \"9\", \"output\": \"ix\"},\n    {\"input\": \"10\", \"output\": \"x\"},\n    {\"input\": \"40\", \"output\": \"xl\"},\n    {\"input\": \"90\", \"output\": \"xc\"},\n    {\"input\": \"100\", \"output\": \"c\"}\n])"}
{"task_id": "HumanEval/157", "modified_prompt": "(\"def right_angle_triangle(a, b, c):\\n    \\\"\\n    Given the lengths of the three sides of a triangle. Return True if the three\\n    sides form a right-angled triangle, False otherwise.\", [{\"input\": \"(3, 4, 5)\", \"output\": True}, {\"input\": \"(6, 8, 10)\", \"output\": True}, {\"input\": \"(10, 20, 30)\", \"output\": False}, {\"input\": \"(1, 1, 1)\", \"output\": False}, {\"input\": \"(5, 12, 13)\", \"output\": True}, {\"input\": \"(7, 24, 25)\", \"output\": True}, {\"input\": \"(12, 16, 20)\", \"output\": True},{\"input\": \"(5, 10, 15)\", \"output\": False}])"}
{"task_id": "HumanEval/158", "modified_prompt": "(\"def find_max(words):\\n     \\\"Write a function that accepts a list of strings.\\n    The list contains different words. Return the word with maximum number\\n    of unique characters.\", [{\"input\": \"[\\\"apple\\\", \\\"banana\\\", \\\"cherry\\\"]\", \"output\": \"banana\"}, {\"input\": \"[\\\"hello\\\", \\\"world\\\"]\", \"output\": \"world\"}, {\"input\": \"[\\\"antidisestablishmentarianism\\\", \\\"floccinaucinihilipilification\\\"]\", \"output\": \"floccinaucinihilipilification\"}, {\"input\": \"[\\\"single\\\", \\\"multiple\\\"]\", \"output\": \"multiple\"}, {\"input\": \"[\\\"engaged\\\", \\\"married\\\", \\\"single\\\"]\", \"output\": \"engaged\"}])"}
{"task_id": "HumanEval/159", "modified_prompt": "(\"def eat(number, need, remaining):\\n\\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\\n    but now you need to eat more carrots to complete the day's meals.\", [\n{'input': '(5, 10, 20)', 'output': '15'},\n{'input': '(0, 15, 50)', 'output': '15'},\n{'input': '(30, 20, 60)', 'output': '50'},\n{'input': '(10, 0, 20)', 'output': '10'},\n{'input': '(0, 0, 0)', 'output': '0'},\n{'input': '(999, 1, 2000)', 'output': '1000'},\n{'input': '(1000, 2000, 5000)', 'output': '3000'}])"}
{"task_id": "HumanEval/160", "modified_prompt": "(\"def do_algebra(operator, operand):\\n\\nGiven two lists operator, and operand. The first list has basic algebra operations, and \\nthe second list is a list of integers.\", [{\"input\": '([\"+\", \"-\"], [1, 2, 3])', \"output\": [3, 1]}, {\"input\": '([\"*\", \"/\"], [2, 3, 4])', \"output\": [6, 0.75]}, {\"input\": '([\"+\", \"*\", \"-\", \"/\"], [1, 2, 3, 4])', \"output\": [3, 6, -1, 0.75]}, {\"input\": '([\"+\",\"-\",\"*\",\"/\"], [10,5,2,7])', \"output\": [15, -3, 20, 0.2857142857142857]}, {\"input\": '([\"*\",\"/\",\"+\",\"-\"], [0,1,2,3])', \"output\": [0,1,3,-1]}])"}
{"task_id": "HumanEval/161", "modified_prompt": "(\"def solve(s):\\n     \\\"You are given a string s.\\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \\n    otherwise keep it as it is.\\n    If the string contains no letters, reverse the string.\",\n[\n{\"input\": \"Hello World!\", \"output\": \"hELLO wORLD!\"},\n{\"input\": \"python PROGRAMMING 101\", \"output\": \"PYTHON programming 101\"},\n{\"input\": \"$$1234$$\", \"output\": \"$$4321$$\"},\n{\"input\": \"Test TEST test!\", \"output\": \"tEST test TEST!\"},\n{\"input\": \"1a2B3c4D\", \"output\": \"1A2b3C4d\"}\n])"}
{"task_id": "HumanEval/162", "modified_prompt": "(\"def string_to_md5(text):\\n     \\\"\\\"\\\"\\n    Given a string 'text', return its md5 hash equivalent string.\\n    If 'text' is an empty string, return None.\", [\n    {\"input\": \"Hello, World!\", \"output\": \"65a8e27d8879283831b664bd8b7f0ad4\"},\n    {\"input\": \"password\", \"output\": \"5f4dcc3b5aa765d61d8327deb882cf99\"},\n    {\"input\": \"\", \"output\": None},\n    {\"input\": \"1234567890\", \"output\": \"e807f1fcf82d132f9bb018ca6738a19f\"},\n    {\"input\": \"\ud83d\ude00\", \"output\": \"d415f0e30c471dfdd9bc4f827329ef48\"}\n])"}
{"task_id": "HumanEval/163", "modified_prompt": "(\"def generate_integers(a, b):\\n     \\\"\\\"\\\"\\n    Given two positive integers a and b, return the even digits between a\\n    and b, in ascending order.\", [{\"input\": \"(2, 9)\", \"output\": \"[2, 4, 6, 8]\"}, {\"input\": \"(1, 1)\", \"output\": \"[]\"}, {\"input\": \"(10, 20)\", \"output\": \"[10, 12, 14, 16, 18, 20]\"}, {\"input\": \"(3, 7)\", \"output\": \"[4, 6]\"}, {\"input\": \"(0, 0)\", \"output\": \"[0]\"}])"}
