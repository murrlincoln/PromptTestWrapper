{"task_id": "HumanEval/0", "modified_prompt": "Input: [1, 2, 3, 4, 5], 1\nOutput: True\n\nInput: [1, 2, 3, 4, 5], 0.5\nOutput: False\n\nInput: [1.5, 2.75, 3.2, 4.1, 5.4], 0.2\nOutput: True\n\nInput: [0.8, 3.5, 2.2, 4.9, 7.2], 1\nOutput: True\n\nInput: [], 5\nOutput: False\n\nInput: [-1, -2, -3, -4], 1\nOutput: True"}
{"task_id": "HumanEval/1", "modified_prompt": "{\n    \"prompt\": \"from typing import List\\n\\n\\ndef separate_paren_groups(paren_string: str) -> List[str]:\\n    \\\"\\\"\\\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\\n    separate those group into separate strings and return the list of those.\\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\\n    Ignore any spaces in the input string.\",\n\n    \"test_cases\": [\n        {\n            \"input\": \"()paren_string\", \n            \"output\": [\"()\"]\n        },\n        {\n            \"input\": \"(paren)string\", \n            \"output\": [\"(paren)\"]\n        },\n        {\n            \"input\": \"paren(paren)string\", \n            \"output\": [\"paren(paren)\"]\n        },\n        {\n            \"input\": \"()paren(paren)string\", \n            \"output\": [\"()\", \"paren(paren)\"]\n        },\n        {\n            \"input\": \"((((paren))))string\", \n            \"output\": [\"(((((paren)))))\"]\n        }\n    ]\n}"}
{"task_id": "HumanEval/2", "modified_prompt": "{\n    \"original_prompt\": \"def truncate_number(number: float) -> float:\\n    Given a positive floating point number, it can be decomposed into\\n    and integer part (largest integer smaller than given number) and decimals\\n    (leftover part always smaller than 1).\\n\\n    Return the decimal part of the number.\",\n    \"test_cases\": [\n        1.5,\n        3.14159,\n        0.8,\n        12.345,\n        99.99\n    ]\n}"}
{"task_id": "HumanEval/3", "modified_prompt": "Original Prompt:\n\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account falls below zero, and at that point function should return True. Otherwise it should return False.\n\nGenerated Test Cases:\n1. Input: [100, -200, 300, -400]\n   Output: True\n\n2. Input: [-100, 200, -300, 400]\n   Output: False\n\n3. Input: [0, 0, 0, 0]\n   Output: False\n\n4. Input: [500, -1000, 2000, -3000]\n   Output: True\n\n5. Input: [50, 100, -150, 100]\n   Output: False"}
{"task_id": "HumanEval/4", "modified_prompt": "The user should provide a list of numbers.\nan empty list returns 0.\na list with one number returns 0.\n[1, 2, 3] returns 0.667.\n[1, 2, 3, 4] returns 0.617.\n[2, 4, 6, 8] returns 1.333\n[10, 20, 30, 40, 50] returns 10.\n[-1, -2, -3] returns 0.667.\n[1, -1, 2, -2, 3, -3] returns 0.667."}
{"task_id": "HumanEval/5", "modified_prompt": "{\n  \"prompt\": \"from typing import List\\n\\n\\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\\n    \\\"\\\"\\\" Insert a number \\'delimeter\\' between every two consecutive elements of input list `numbers\\'\",\n  \"test_cases\": [\n    {\n      \"input\": \"[1, 2, 3, 4, 5], 6\",\n      \"output\": \"[1, 6, 2, 6, 3, 6, 4, 6, 5]\"\n    },\n    {\n      \"input\": \"[-1, -2, -3, -4, -5], -6\",\n      \"output\": \"[-1, -6, -2, -6, -3, -6, -4, -6, -5]\"\n    },\n    {\n      \"input\": \"[], 0\",\n      \"output\": \"[]\"\n    },\n    {\n      \"input\": \"[11, 22, 33], 0\",\n      \"output\": \"[11, 0, 22, 0, 33]\"\n    },\n    {\n      \"input\": \"[2], 4\",\n      \"output\": \"[2]\"\n    }\n  ]\n}"}
