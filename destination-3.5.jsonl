{"task_id": "HumanEval/0", "modified_prompt": "Original Prompt:\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n   \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n   given threshold.\n\nGenerated Test Cases:\n1. Input: has_close_elements([1, 2, 3, 4, 5], 2)\n   Output: True\n   Explanation: In the given list, the numbers 1 and 2 are closer to each other than the threshold of 2.\n\n2. Input: has_close_elements([10.2, 12.3, 9.5, 10.8], 0.7)\n   Output: True\n   Explanation: In the given list, the numbers 10.2 and 9.5 are closer to each other than the threshold of 0.7.\n\n3. Input: has_close_elements([-5, -4.2, -3, 0, 0.1], 1)\n   Output: False\n   Explanation: In the given list, the closest numbers are -4.2 and 0, which have a distance greater than the threshold of 1.\n\n4. Input: has_close_elements([3.8, 3.9, 4.5, 4.6], 0.2)\n   Output: True\n   Explanation: In the given list, the numbers 3.8 and 3.9 are closer to each other than the threshold of 0.2."}
{"task_id": "HumanEval/1", "modified_prompt": "{\n  \"prompt\": \"from typing import List\\n\\n\\ndef separate_paren_groups(paren_string: str) -> List[str]:\\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\\n    separate those group into separate strings and return the list of those.\\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\\n    Ignore any spaces in the input string.\",\n  \"test_cases\": [\n    {\n      \"input\": \"()()\",\n      \"expected_output\": [\"()\", \"()\"]\n    },\n    {\n      \"input\": \"(())()\",\n      \"expected_output\": [\"(())\", \"()\"]\n    },\n    {\n      \"input\": \"(((a)(b)))((c))\",\n      \"expected_output\": [\"((a)(b))\", \"((c))\"]\n    },\n    {\n      \"input\": \"((()()()())())\",\n      \"expected_output\": [\"((()()()())())\"]\n    },\n    {\n      \"input\": \"(a(b(c(d)e)f)g)h\",\n      \"expected_output\": [\"(a(b(c(d)e)f)g)\", \"h\"]\n    }\n  ]\n}"}
{"task_id": "HumanEval/2", "modified_prompt": "{\n  \"prompt\": \"def truncate_number(number: float) -> float:\\n    \\\"\\\"\\\" Given a positive floating point number, it can be decomposed into\\n    and integer part (largest integer smaller than given number) and decimals\\n    (leftover part always smaller than 1).\\n\\n    Return the decimal part of the number.\",\n  \"test_cases\": [\n    {\n      \"input\": 5.25,\n      \"output\": 0.25\n    },\n    {\n      \"input\": 1.5,\n      \"output\": 0.5\n    },\n    {\n      \"input\": 10,\n      \"output\": 0\n    },\n    {\n      \"input\": 99.99,\n      \"output\": 0.99\n    },\n    {\n      \"input\": 0.75,\n      \"output\": 0.75\n    }\n  ]\n}"}
{"task_id": "HumanEval/3", "modified_prompt": "1. Operations List: [100, -40, -30, 20, -60]\n   True\n\n2. Operations List: [-50, 20, 30, -40]\n   False"}
{"task_id": "HumanEval/4", "modified_prompt": "{\n    \"prompt\": \"from typing import List\\n\\n\\ndef mean_absolute_deviation(numbers: List[float]) -> float:\\n    \\\"\\\"\\\" For a given list of input numbers, calculate Mean Absolute Deviation\\n    around the mean of this dataset.\\n    Mean Absolute Deviation is the average absolute difference between each\\n    element and a centerpoint (mean in this case):\\n    MAD = average | x - x_mean |\",\n    \"test_cases\": [\n        [1, 2, 3, 4, 5],\n        [-5, 10, -15, 20, -25],\n        [0.5, 0.6, 0.7, 0.8, 0.9],\n        [-1, -2, -3, -4, -5],\n        [5, 0, -5, 0, 5]\n    ]\n}"}
{"task_id": "HumanEval/5", "modified_prompt": "{\n  \"prompt\": \"from typing import List\\n\\n\\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\\n    \"\"\" Insert a number \\'delimeter\\' between every two consecutive elements of input list `numbers\\'\",\n\n  \"testCases\":\n    [\n      {\n        \"input\": \"[1, 2, 3, 4]\",\n        \"output\": \"[1, \\'delimeter\\', 2, \\'delimeter\\', 3, \\'delimeter\\', 4]\"\n      },\n      {\n        \"input\": \"[5, 10, 15, 20, 25]\",\n        \"output\": \"[5, \\'delimeter\\', 10, \\'delimeter\\', 15, \\'delimeter\\', 20, \\'delimeter\\', 25]\"\n      },\n      {\n        \"input\": \"[-1, -2, -3]\",\n        \"output\": \"[-1, \\'delimeter\\', -2, \\'delimeter\\', -3]\"\n      },\n      {\n        \"input\": \"[100, 200]\",\n        \"output\": \"[100, \\'delimeter\\', 200]\"\n      }\n    ]\n}"}
{"task_id": "HumanEval/6", "modified_prompt": "{\n    \"Function\": \"parse_nested_parens\",\n    \"Parameters\": [\"paren_string: str\"],\n    \"Output\": \"List[int]\",\n    \"Question\": \"Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\\nFor each of the group, output the deepest level of nesting of parentheses.\\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\",\n    \"Test Cases\": [\n        {\n            \"Input\": \"(()())\",\n            \"Expected Output\": [2]\n        },\n        {\n            \"Input\": \"((()))\",\n            \"Expected Output\": [3]\n        },\n        {\n            \"Input\": \"()()()\",\n            \"Expected Output\": [1]\n        },\n        {\n            \"Input\": \"()(()())\",\n            \"Expected Output\": [2]\n        },\n        {\n            \"Input\": \"((())(()))\",\n            \"Expected Output\": [4]\n        }\n    ]\n}"}
{"task_id": "HumanEval/7", "modified_prompt": "Prompt: HumanEval/7\n'from typing import List\\n\\n\\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\\n    \"\"\" Filter an input list of strings only for ones that contain given substring'\n\nTest Cases: \n1. Input: [\"apple\", \"banana\", \"orange\"], \"an\"\n   Output: [\"banana\", \"orange\"]\n2. Input: [\"hello\", \"hi\", \"bye\"], \"o\"\n   Output: [\"hello\", \"hi\"]\n3. Input: [\"python\", \"java\", \"c++\"], \"++\"\n   Output: [\"c++\"]\n4. Input: [\"code\", \"program\", \"developer\"], \"gram\"\n   Output: [\"program\", \"developer\"]\n5. Input: [\"apple\", \"banana\", \"orange\"], \"x\"\n   Output: []"}
{"task_id": "HumanEval/8", "modified_prompt": "{\n    \"prompt\": \"from typing import List, Tuple\\n\\n\\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\\n    Empty sum should be equal to 0 and empty product should be equal to 1.\",\n    \"test_cases\": [\n        {\n            \"input\": [],\n            \"output\": (0, 1)\n        },\n        {\n            \"input\": [1, 2, 3],\n            \"output\": (6, 6)\n        },\n        {\n            \"input\": [-5, 10, 2],\n            \"output\": (7, -100)\n        },\n        {\n            \"input\": [0, 0, 0],\n            \"output\": (0, 0)\n        }\n    ]\n}"}
{"task_id": "HumanEval/9", "modified_prompt": "The original prompt: From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n\nGenerated test cases:\n\n1) Input: [1, 2, 3, 4, 5]\nExpected output: [1, 2, 3, 4, 5]\n\n2) Input: [5, 2, 8, 1, 10]\nExpected output: [5, 5, 8, 8, 10]\n\n3) Input: [-1, 0, 2, 5, -3]\nExpected output: [-1, 0, 2, 5, 5]\n\n4) Input: [10, 9, 8, 7, 6]\nExpected output: [10, 10, 10, 10, 10]\n\n5) Input: [3, 5, 4, 2, 1]\nExpected output: [3, 5, 5, 5, 5]\n\n6) Input: [10, 20, 30, 40, 50]\nExpected output: [10, 20, 30, 40, 50]\n\n7) Input: [0, 0, 0, 0, 0]\nExpected output: [0, 0, 0, 0, 0]\n\n8) Input: [1, -2, 3, -4, 5]\nExpected output: [1, 1, 3, 3, 5]\n\n9) Input: [5, 5, 5, 5, 5]\nExpected output: [5, 5, 5, 5, 5]"}
{"task_id": "HumanEval/10", "modified_prompt": "{\n    \"prompt\": \"def is_palindrome(string: str) -> bool:\\n    \"\"\" Test if given string is a palindrome \"\"\"\\n    return string == string[::-1]\\n\\n\n    def make_palindrome(string: str) -> str:\\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\\n    Algorithm idea is simple:\\n    - Find the longest postfix of supplied string that is a palindrome.\\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\",\n\n    \"test_cases\": [\n        {\"input\": \"level\", \"output\": True},\n        {\"input\": \"radar\", \"output\": True},\n        {\"input\": \"python\", \"output\": False},\n        {\"input\": \"madam\", \"output\": True},\n        {\"input\": \"abcba\", \"output\": True},\n        {\"input\": \"aaa\", \"output\": True},\n        {\"input\": \"abcdcba\", \"output\": True},\n        {\"input\": \"a\", \"output\": True},\n        {\"input\": \"\", \"output\": True},\n        {\"input\": \" \", \"output\": True},\n        {\"input\": \"121\", \"output\": True},\n        {\"input\": \"noun\", \"output\": False},\n        {\"input\": \"rotator\", \"output\": True},\n        {\"input\": \"kayak\", \"output\": True},\n        {\"input\": \"abababa\", \"output\": True},\n        {\"input\": \"abb\", \"output\": False},\n        {\"input\": \"qwerty\", \"output\": False},\n        {\"input\": \"  \", \"output\": True},\n        {\"input\": \" neveroddoreven\", \"output\": True}\n    ]\n}"}
{"task_id": "HumanEval/11", "modified_prompt": "INPUT: a = \"111\", b = \"000\"\nOUTPUT: \"111\""}
{"task_id": "HumanEval/12", "modified_prompt": "{\n  \"prompt\": \"from typing import List, Optional\\n\\n\\ndef longest(strings: List[str]) -> Optional[str]:\\n    \\\"\\\"\\\" Out of list of strings, return the longest one. Return the first one in case of multiple\\n    strings of the same length. Return None in case the input list is empty.\",\n\n  \"test_cases\": [\n    {\n      \"input\": [],\n      \"output\": None\n    },\n    {\n      \"input\": [\"abc\"],\n      \"output\": \"abc\"\n    },\n    {\n      \"input\": [\"abc\", \"defg\"],\n      \"output\": \"defg\"\n    },\n    {\n      \"input\": [\"\", \"abc\", \"defg\"],\n      \"output\": \"defg\"\n    },\n    {\n      \"input\": [\"abc\", \"defg\", \"hijklm\"],\n      \"output\": \"hijklm\"\n    },\n    {\n      \"input\": [\"abc\", \"defg\", \"hijklm\", \"nop\"],\n      \"output\": \"hijklm\"\n    }\n  ]\n}"}
{"task_id": "HumanEval/13", "modified_prompt": "{\n    \"prompt\": \"def greatest_common_divisor(a: int, b: int) -> int:\\n    \"\"\" Return a greatest common divisor of two integers a and b\",\n    \"test_1\": {\"input\": {\"a\": 10, \"b\": 25}, \"output\": 5},\n    \"test_2\": {\"input\": {\"a\": 15, \"b\": 20}, \"output\": 5},\n    \"test_3\": {\"input\": {\"a\": 21, \"b\": 28}, \"output\": 7}\n}"}
{"task_id": "HumanEval/14", "modified_prompt": "{\"prompt\": \"HumanEval/14\", \"test_cases\": [\n\"Test case 1: Input string = 'abc', Output List = ['a', 'ab', 'abc']\",\n\"Test case 2: Input string = 'abcd', Output List = ['a', 'ab', 'abc', 'abcd']\",\n\"Test case 3: Input string = '', Output List = []\",\n\"Test case 4: Input string = 'a', Output List = ['a']\",\n\"Test case 5: Input string = '1234', Output List = ['1', '12', '123', '1234']\"\n]}"}
{"task_id": "HumanEval/15", "modified_prompt": "{\n    \"prompt\": \"def string_sequence(n: int) -> str:\\n    \\\"\\\"\\\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\",\n    \"test_cases\": [\n        {\n            \"input\": 5,\n            \"output\": \"0 1 2 3 4 5\"\n        },\n        {\n            \"input\": 0,\n            \"output\": \"0\"\n        },\n        {\n            \"input\": -3,\n            \"output\": \"\"\n        },\n        {\n            \"input\": 10,\n            \"output\": \"0 1 2 3 4 5 6 7 8 9 10\"\n        },\n        {\n            \"input\": 2.5,\n            \"output\": \"\"\n        }\n    ]\n}"}
{"task_id": "HumanEval/16", "modified_prompt": "{\n\t\"prompt\": \"def count_distinct_characters(string: str) -> int:\\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\",\n\t\"test_cases\": [\"count_distinct_characters('hello') == 4\", \"count_distinct_characters('aAbBcC') == 3\", \"count_distinct_characters('12233') == 3\", \"count_distinct_characters('AAaa1122') == 3\", \"count_distinct_characters('abcdeABCDE') == 10\"]\n}"}
{"task_id": "HumanEval/17", "modified_prompt": "{\n    \"prompt\": \"from typing import List\\n\\n\\ndef parse_music(music_string: str) -> List[int]:\\n    \\\"\\\"\\\" Input to this function is a string representing musical notes in a special ASCII format.\\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\\n    not last.\\n\\n    Here is a legend:\\n    \\'o\\' - whole note, lasts four beats\\n    \\'o|\\' - half note, lasts two beats\\n    \\'.|\\' - quater note, lasts one beat\",\n    \"test_cases\": [\n        {\n            \"input\": \"o\",\n            \"output\": [4]\n        },\n        {\n            \"input\": \"o|\",\n            \"output\": [2]\n        },\n        {\n            \"input\": \".|\",\n            \"output\": [1]\n        },\n        {\n            \"input\": \"o.o|..\",\n            \"output\": [4, 4, 2, 2, 1, 1]\n        }\n    ]\n}"}
{"task_id": "HumanEval/18", "modified_prompt": "{\n    \"prompt\": \"def how_many_times(string: str, substring: str) -> int:\\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\",\n    \"test_cases\": [\n        [\"Hello World\", \"o\", 2],\n        [\"aaaa\", \"aa\", 3],\n        [\"abcdabcd\", \"cd\", 2],\n        [\"banana\", \"na\", 2],\n        [\"aaaaaa\", \"aaa\", 4]\n    ]\n}"}
{"task_id": "HumanEval/19", "modified_prompt": "{\n  \"prompt\": \"Input is a space-delimited string of numberals from \\'zero\\' to \\'nine\\'. Valid choices are \\'zero\\', \\'one\\', \\'two\\', \\'three\\', \\'four\\', \\'five\\', \\'six\\', \\'seven\\', \\'eight\\' and \\'nine\\'. Return the string with numbers sorted from smallest to largest.\",\n  \"test_cases\": [\n    {\n      \"input\": \"nine two four five three one\",\n      \"output\": \"one two three four five nine\",\n      \"explanation\": \"Basic input with all numbers represented at least once.\"\n    },\n    {\n      \"input\": \"four one zero eight\",\n      \"output\": \"zero one four eight\",\n      \"explanation\": \"Input with only a few choices.\"\n    },\n    {\n      \"input\": \"three three three\",\n      \"output\": \"three three three\",\n      \"explanation\": \"Input with repeated numbers.\"\n    },\n    {\n      \"input\": \"seven zero two six five two\",\n      \"output\": \"zero two two five six seven\",\n      \"explanation\": \"Input with duplicate numbers in different order.\"\n    },\n    {\n      \"input\": \"\",\n      \"output\": \"\",\n      \"explanation\": \"Empty input.\"\n    },\n    {\n      \"input\": \"five one four eight nine six seven\",\n      \"output\": \"one four five six seven eight nine\",\n      \"explanation\": \"Input with all numbers in reverse order.\"\n    }\n  ]\n}"}
{"task_id": "HumanEval/20", "modified_prompt": "1. Input: [1,2,3,4,5]\n   Expected Output: (1,2)\n   \n2. Input: [32, 15, 28, 10, 21]\n   Expected Output: (15, 10)\n   \n3. Input: [-5, 10, 2, 7, -20]\n   Expected Output: (10, 2)\n   \n4. Input: [2.5, 7.8, -4.2, 1.9, 10.5]\n   Expected Output: (2.5, 1.9)\n   \n5. Input: [10]\n   Expected Output: None, since the length of the list is only one."}
{"task_id": "HumanEval/21", "modified_prompt": "Test case 1: Input: [1.0, 2.0, 3.0, 4.0, 5.0]\nExpected output: [0.0, 0.25, 0.5, 0.75, 1.0]\n\nTest case 2: Input: [-1.0, -2.0, 0.0, 2.0]\nExpected output: [0.0, 0.25, 0.5, 1.0]\n\nTest case 3: Input: [0.0, 0.0, 0.0, 0.0]\nExpected output: [0.0, 0.0, 0.0, 0.0]\n\nTest case 4: Input: [10.0, 20.0, 30.0, 40.0]\nExpected output: [0.0, 0.25, 0.5, 1.0]\n\nTest case 5: Input: [2.0, 3.0]\nExpected output: [0.0, 1.0]"}
{"task_id": "HumanEval/22", "modified_prompt": "{\n    prompt: \"HumanEval/22\",\n    test_cases: [\n        {\n            input: [1,2,3],\n            expected_output: [1,2,3]\n        },\n        {\n            input: [1,\"hello\",2,True],\n            expected_output: [1,2]\n        },\n        {\n            input: [\"a\", \"b\", \"c\"],\n            expected_output: []\n        },\n        {\n            input: [None, 4, 5, 6],\n            expected_output: [4, 5, 6]\n        },\n        {\n            input: [7, 8, 9, \"10\"],\n            expected_output: [7, 8, 9]\n        }\n    ]\n}"}
{"task_id": "HumanEval/23", "modified_prompt": "\"A practical test case to verify the correctness of a solution for the programming task 'def strlen(string: str) -> int:\\n    \"\"\" Return length of given string' would be to provide a string and check if the length returned by the solution is equal to the actual length of the string. For example: {\"prompt\": \"def strlen(string: str) -> int:\\n    \"\"\" Return length of given string'\", \"test_case\": {\"input\": \"Hello world!\", \"output\": 12}}"}
{"task_id": "HumanEval/24", "modified_prompt": "{\n    \"input_desc\": \"def largest_divisor(n: int) -> int:\\n    \\\"\\\"\\\" For a given number n, find the largest number that divides n evenly, smaller than n\",\n    \"test_cases\": [\n        \"n = 12\",\n        \"Output: 6\",\n        \"n = 36\",\n        \"Output: 18\",\n        \"n = 50\",\n        \"Output: 25\",\n        \"n = 81\",\n        \"Output: 27\",\n        \"n = 100\",\n        \"Output: 50\"\n    ]\n}"}
{"task_id": "HumanEval/25", "modified_prompt": "[\n  {\n    \"input\": 1,\n    \"output\": []\n  },\n  {\n    \"input\": 2,\n    \"output\": [2]\n  },\n  {\n    \"input\": 7,\n    \"output\": [7]\n  },\n  {\n    \"input\": 20,\n    \"output\": [2, 2, 5]\n  },\n  {\n    \"input\": 36,\n    \"output\": [2, 2, 3, 3]\n  },\n  {\n    \"input\": 60,\n    \"output\": [2, 2, 3, 5]\n  }  \n]"}
{"task_id": "HumanEval/26", "modified_prompt": "{\n    \"prompt\": \"From a list of integers, remove all elements that occur more than once. Keep order of elements left the same as in the input.\",\n    \"test_cases\": [\n        {\"input\": [1, 2, 3, 4], \"output\": [1, 2, 3, 4]},\n        {\"input\": [-1, 0, 0, 5, -1], \"output\": [0, 5]},\n        {\"input\": [2, 2, 2, 2, 2], \"output\": [2]},\n        {\"input\": [6, 5, 4, 3, 2, 1], \"output\": [6, 5, 4, 3, 2, 1]},\n        {\"input\": [], \"output\": []},\n        {\"input\": [1, 1, 1, 1, 2, 2], \"output\": [1, 2]}\n    ]\n}"}
{"task_id": "HumanEval/27", "modified_prompt": "{\n    \"prompt\": \"def flip_case(string: str) -> str:\\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\",\n    \"test_cases\": [\n        {\n            \"input\": \"HelloWorld\",\n            \"output\": \"hELLOwORLD\"\n        },\n        {\n            \"input\": \"hello\",\n            \"output\": \"HELLO\"\n        },\n        {\n            \"input\": \"UPPERCASE\",\n            \"output\": \"uppercase\"\n        },\n        {\n            \"input\": \"\",\n            \"output\": \"\"\n        },\n        {\n            \"input\": \"123$#a\",\n            \"output\": \"123$#A\"\n        }\n    ]\n}"}
{"task_id": "HumanEval/28", "modified_prompt": "{\n  \"prompt\": \"HumanEval/28\",\n  \"value\": [\n    [\"from typing import List\\n\\n\", \"\"],\n    [[\"strings\"], [], [\"List\", \"str\"], [\"\"], \" \"],\n    [\"def concatenate(\", 0, \"?\", 0, \"): \", \"0\", 0, \"0\"],\n    [\" \", \"\", 0, [[\"strings\"], [], [\"\"], [\"\", \"conc\", \"sup\"], 0, [\"\"], 0, [[\"(same # of elements)\", \"\", 0, 0, 0, [0], 0, 0]]], 0, 0, \"\"]\n  ],\n  \"test cases\": [\n    [\"empty list\", [\"\"]],\n    [\"single string\", [\"hello world\"]],\n    [\"multiple strings\", [\"computer\", \"science\", \"is\", \"awesome\"]],\n    [\"special characters\", [\"!@#$%^&*()_+\"]],\n    [\"empty strings\", [\"\", \"\", \"\"]],\n    [\"strings of different lengths\", [\"cat\", \"dog\", \"mouse\", \"unicorn\"]],\n    [\"strings with numbers\", [\"123\", \"456\", \"789\"]],\n    [\"strings with spaces\", [\"hello\", \" \", \"world\"]],\n    [\"strings with non-alphanumeric characters\", [\"!@#\", \"$%*\", \"^&(\", \")_+\"]]\n  ]\n}"}
{"task_id": "HumanEval/29", "modified_prompt": "{\n  \"prompt\": 'HumanEval/29',\n  \"test_cases\": [\n    {\n      \"input\": [[\"apple\", \"banana\", \"orange\", \"pineapple\"], \"a\"],\n      \"output\": [\"apple\"]\n    },\n    {\n      \"input\": [[\"cat\", \"dog\", \"cow\", \"chicken\"], \"c\"],\n      \"output\": [\"cat\", \"cow\", \"chicken\"]\n    },\n    {\n      \"input\": [[\"hello\", \"hi\", \"hey\", \"howdy\", \"hola\"], \"h\"],\n      \"output\": [\"hello\", \"hi\", \"hey\", \"howdy\", \"hola\"]\n    },\n    {\n      \"input\": [[\"car\", \"bus\", \"train\", \"plane\"], \"p\"],\n      \"output\": [\"plane\"]\n    },\n    {\n      \"input\": [[\"1\", \"2\", \"3\", \"10\"], \"1\"],\n      \"output\": [\"1\", \"10\"]\n    }\n  ]\n}"}
{"task_id": "HumanEval/30", "modified_prompt": "{\n    \"prompt\": \"def get_positive(l: list):\\n    \"\"\"Return only positive numbers in the list.\",\n    \"test_cases\": [\n        {\"input\": [1, 2, 3, 4, 5], \"output\": [1, 2, 3, 4, 5]},\n        {\"input\": [-1, -2, -3, -4, -5], \"output\": []},\n        {\"input\": [0, 1, -2, 3, -4, 5], \"output\": [1, 3, 5]},\n        {\"input\": [1.5, 2.5, 3.5, 4.5, 5.5], \"output\": [1.5, 2.5, 3.5, 4.5, 5.5]},\n        {\"input\": [-1.5, -2.5, -3.5, -4.5, -5.5], \"output\": []},\n        {\"input\": [0, 1.5, -2.5, 3.5, -4.5, 5.5], \"output\": [1.5, 3.5, 5.5]},\n        {\"input\": [\"a\", \"b\", 1, 2, 3], \"output\": [1, 2, 3]},\n        {\"input\": [-1, -2, \"c\", \"d\", \"e\"], \"output\": []}\n    ]\n}"}
{"task_id": "HumanEval/31", "modified_prompt": "{\n    \"prompt\": \"def is_prime(n):\\n    \\\"\\\"\\\"Return true if a given number is prime, and false otherwise.\",\n    \"test_cases\": [\n        {\"input\": 2, \"output\": True},\n        {\"input\": 3, \"output\": True},\n        {\"input\": 5, \"output\": True},\n        {\"input\": 17, \"output\": True},\n        {\"input\": 121, \"output\": False},\n        {\"input\": 247, \"output\": False},\n        {\"input\": 1111, \"output\": False},\n        {\"input\": 0, \"output\": False},\n        {\"input\": -5, \"output\": False},\n        {\"input\": \"abc\", \"output\": False},\n    ]\n}"}
{"task_id": "HumanEval/32", "modified_prompt": "1. Test case for checking polynomial evaluation with given coefficients:\n\ninput(poly, [2, 3, 1], 5) -> output: 42\n\n2. Test case for checking polynomial with negative coefficients:\n\ninput(poly, [-2, 3, 1], 5) -> output: -22\n\n3. Test case for checking polynomial with decimal coefficients:\n\ninput(poly, [2.5, 3.1, 1.2], 5) -> output: 44.65\n\n4. Test case for checking polynomial when x = 0:\n\ninput(poly, [2, 3, 1], 0) -> output: 2\n\n5. Test case for checking polynomial with large values of coefficients:\n\ninput(poly, [1000, 1000000, 999999], 5) -> output: 100041000000002995\n\n6. Test case for checking polynomial when x is a negative number:\n\ninput(poly, [2, 3, 1], -5) -> output: -18\n\n7. Test case for checking polynomial when x is a decimal number:\n\ninput(poly, [2, 3, 1], 2.5) -> output: 19.5\n\n8. Test case for checking for a zero point:\n\ninput(poly, [2, 3, 1]) -> output: 0\n\n9. Test case for checking polynomial when xs contains only one coefficient:\n\ninput(poly, [2], 5) -> output: 2\n\n10. Test case for handling empty list as input:\n\ninput(poly, []) -> output: 0"}
{"task_id": "HumanEval/33", "modified_prompt": "[\n    \"def sort_third(l: list):\",\n    \"\",\n    \"Practical Test Cases:\",\n    \"'l': [1, 2, 3, 4, 5, 6, 7, 8, 9], 'Expected Output': [1, 2, 4, 5, 6, 3, 7, 8, 9]\",\n    \"'l': [9, 8, 7, 6, 5, 4, 3, 2, 1], 'Expected Output': [9, 8, 6, 5, 4, 7, 3, 2, 1]\",\n    \"'l': [3, 3, 3, 3, 3, 3], 'Expected Output': [3, 3, 3, 3, 3, 3]\",\n    \"'l': [2, 4, 6, 8, 10], 'Expected Output': [2, 4, 8, 6, 10]\"\n]"}
{"task_id": "HumanEval/34", "modified_prompt": "{\n    \"HumanEval/34\":{\n        \"prompt\": \"def unique(l: list):\\n    \\\"\\\"\\\"Return sorted unique elements in a list\",\n        \"test_cases\": [\n            {\"input\": [1, 2, 3, 4, 5], \"output\": [1, 2, 3, 4, 5]},\n            {\"input\": [5, 5, 5, 5, 5], \"output\": [5]},\n            {\"input\": [], \"output\": []},\n            {\"input\": [1, 2, 3, 4, 5, 1, 2, 3, 4, 5], \"output\": [1, 2, 3, 4, 5]},\n            {\"input\": [1, \"a\", \"b\", \"c\"], \"output\": [1, \"a\", \"b\", \"c\"]},\n            {\"input\": [True, False, False, True, True], \"output\": [True, False]}\n        ]\n    }\n}"}
{"task_id": "HumanEval/35", "modified_prompt": "Task: 'HumanEval/35', 'def max_element(l: list):\\n    \"\"\"Return maximum element in the list.'\n\nTest cases:\n1. Input: [1, 2, 3, 4, 5]\n   Expected output: 5\n2. Input: [-1, -5, 0, 3, 10]\n   Expected output: 10\n3. Input: [4, 2, 8, 1, 6]\n   Expected output: 8\n4. Input: [2, 4, 6, 8, 10]\n   Expected output: 10\n5. Input: [5]\n   Expected output: 5"}
{"task_id": "HumanEval/36", "modified_prompt": "{\n  \"prompt\": \"def fizz_buzz(n: int):\\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\",\n  \"test_cases\": [\n    {\n      \"input\": 50,\n      \"output\": 4\n    },\n    {\n      \"input\": 100,\n      \"output\": 8\n    },\n    {\n      \"input\": 200,\n      \"output\": 17\n    },\n    {\n      \"input\": 1000,\n      \"output\": 72\n    }\n  ]\n}"}
{"task_id": "HumanEval/37", "modified_prompt": "{\n    \"prompt\": \"def sort_even(l: list):\\n    \\\"\\\"\\\"This function takes a list l and returns a list l\\' such that\\n    l\\' is identical to l in the odd indicies, while its values at the even indicies are equal\\n    to the values of the even indicies of l, but sorted.\",\n    \"test_cases\": [\n        {\n            \"input\": [1, 3, 2, 6, 4, 5],\n            \"output\": [1, 3, 2, 5, 4, 6]\n        },\n        {\n            \"input\": [9, 2, 7, 5, 4, 3],\n            \"output\": [9, 3, 7, 4, 5, 2]\n        },\n        {\n            \"input\": [5, 10, 15, 20, 25],\n            \"output\": [5, 15, 10, 20, 25]\n        }\n    ]\n}"}
{"task_id": "HumanEval/38", "modified_prompt": "{\n    \"prompt\": \"HumanEval/38\",\n    \"test_cases\": [\n        {\n            \"encode_input\": \"TestString\",\n            \"encode_output\": \"eTtSsrtTin\",\n            \"decode_input\": \"eTtSsrtTin\",\n            \"decode_output\": \"TestString\"\n        },\n        {\n            \"encode_input\": \"Password123\",\n            \"encode_output\": \"wPss13odwa2\",\n            \"decode_input\": \"wPss13odwa2\",\n            \"decode_output\": \"Password123\"\n        },\n        {\n            \"encode_input\": \"a\",\n            \"encode_output\": \"a\",\n            \"decode_input\": \"a\",\n            \"decode_output\": \"a\"\n        },\n        {\n            \"encode_input\": \"\",\n            \"encode_output\": \"\",\n            \"decode_input\": \"\",\n            \"decode_output\": \"\"\n        },\n        {\n            \"encode_input\": \"abcdefghijklmnopqrstuvwxyz\",\n            \"encode_output\": \"bcadehfgijklmnopqrstuvwyxz\",\n            \"decode_input\": \"bcadehfgijklmnopqrstuvwyxz\",\n            \"decode_output\": \"abcdefghijklmnopqrstuvwxyz\"\n        }\n    ]\n}"}
{"task_id": "HumanEval/39", "modified_prompt": "{\n    \"prompt\": \"def prime_fib(n: int):\\n    \\\"\\\"\\\"\\n    prime_fib returns n-th number that is a Fibonacci number and it\\'s also prime.\",\n    \"test_cases\": [\n        {'input': 'n = 1', 'output': '2'},\n        {'input': 'n = 5', 'output': '13'},\n        {'input': 'n = 10', 'output': '89'},\n        {'input': 'n = 15', 'output': '610'},\n        {'input': 'n = 20', 'output': '6765'},\n    ]\n}"}
{"task_id": "HumanEval/40", "modified_prompt": "[\n  \"def triples_sum_to_zero(l: list):\\n    \"\"\"\\n    triples_sum_to_zero takes a list of integers as an input.\\n    it returns True if there are three distinct elements in the list that\\n    sum to zero, and False otherwise.\",\n  [1, -2, 3, 4],\n  [-1, 2, -3, 0],\n  [0, 0, 0, 0],\n  [5, 6, -11, 0],\n  [100, -50, 2, -52],\n  [4, 5, -9, 0]\n]"}
{"task_id": "HumanEval/41", "modified_prompt": "{\n    \"prompt\": \"def car_race_collision(n: int):\\n    \\\"\\\"\\\"\\n    Imagine a road that\\'s a perfectly straight infinitely long line.\\n    n cars are driving left to right;  simultaneously, a different set of n cars\\n    are driving right to left.   The two sets of cars start out being very far from\\n    each other.  All cars move in the same speed.  Two cars are said to collide\\n    when a car that\\'s moving left to right hits a car that\\'s moving right to left.\\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\\n    in their trajectory as if they did not collide.\\n\\n    This function outputs the number of such collisions.\\n    \\\"\\\"\\\"\\n\",\n    \"test_cases\": [\n        {\n            \"n\": 0,\n            \"expected output\": 0\n        },\n        {\n            \"n\": 1,\n            \"expected output\": 0\n        },\n        {\n            \"n\": 5,\n            \"expected output\": 10\n        },\n        {\n            \"n\": 10,\n            \"expected output\": 90\n        },\n        {\n            \"n\": -1,\n            \"expected output\": \"Error: n must be a positive integer\"\n        }\n    ]\n}"}
{"task_id": "HumanEval/42", "modified_prompt": "{\"prompt\": \"def incr_list(l: list):\\n    \"\"Return list with elements incremented by 1.\", \"test_cases\": \"[[], [0], [1], [1, 2, 3], [-1, 0, 1], [-3, -2, -1], ['a', 'b', 'c'], [['a'], ['b'], ['c']], [[1.5], [2.5], [3.5]], [[1, 2, 3], [-1, 0, 1], [10, 20, 30]]\"}"}
{"task_id": "HumanEval/43", "modified_prompt": "{\"prompt\": \"HumanEval/43\", \"value\": \"def pairs_sum_to_zero(l):\\n    \\\"\\\"\\n    pairs_sum_to_zero takes a list of integers as an input.\\n    it returns True if there are two distinct elements in the list that\\n    sum to zero, and False otherwise.\", \"test_cases\": [[[], False], [[1], False], [[1, 2], False], [[1, -1], True], [[1, 2, 3], False], [[1, -2, 3], True], [[1, 2, -3], True], [[1, -1, 0], True], [[1, -2, -3], False], [[-1, -2, -3], False], [[0, 0], True], [[-1, 0, 1], True], [[-1, 1, 1], True], [[1, 1, -2], True], [[1, 1, 1], False]]}"}
{"task_id": "HumanEval/44", "modified_prompt": "{\n    \"statment\": \"I'm sorry, I cannot generate practical test cases for this prompt as I am a large language model trained by <Organization>, and do not have any information on the actual prompt.\"\n}"}
{"task_id": "HumanEval/45", "modified_prompt": "{\n    \"prompt\": \"def triangle_area(a, h):\\n    \"\"Given length of a side and high return area for a triangle.\",\n    \"test_cases\": [\n        {\"input\": \"(3, 6)\", \"output\": \"9.0\"},\n        {\"input\": \"(8, 10)\", \"output\": \"40.0\"},\n        {\"input\": \"(5, 12)\", \"output\": \"30.0\"}\n    ]\n}"}
{"task_id": "HumanEval/46", "modified_prompt": "{\n    \"Prompt\": \"def fib4(n: int):\\n    \\\"\\\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that\\'s defined as follows:\\n    fib4(0) -> 0\\n    fib4(1) -> 0\\n    fib4(2) -> 2\\n    fib4(3) -> 0\\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\",\n    \"Test Cases\": [\n        {\n            \"Input\": \"n = 0\",\n            \"Output\": 0\n        },\n        {\n            \"Input\": \"n = 1\",\n            \"Output\": 0\n        },\n        {\n            \"Input\": \"n = 2\",\n            \"Output\": 2\n        },\n        {\n            \"Input\": \"n = 3\",\n            \"Output\": 0\n        },\n        {\n            \"Input\": \"n = 4\",\n            \"Output\": 2\n        },\n        {\n            \"Input\": \"n = 5\",\n            \"Output\": 4\n        }\n    ]\n}"}
{"task_id": "HumanEval/47", "modified_prompt": "{\n    \"prompt\": \"def median(l: list):\\n    \"\"Return median of elements in the list l.\",\n    \"test_cases\": [\n        \"[1, 2, 3]\", \n        \"[4, 5, 6, 7, 8]\", \n        \"[10, 20, 30, 40, 50]\", \n        \"[1, 1, 1, 1, 2, 2, 2, 3, 3, 3]\", \n        \"[]\"\n    ]\n}"}
{"task_id": "HumanEval/48", "modified_prompt": "{\n    \"prompt\": \"def is_palindrome(text: str):\\n    \"\"\\n    Checks if given string is a palindrome\",\n    \"test_cases\": [\n        {\n            \"input\": \"racecar\",\n            \"output\": True\n        },\n        {\n            \"input\": \"level\",\n            \"output\": True\n        },\n        {\n            \"input\": \"noon\",\n            \"output\": True\n        },\n        {\n            \"input\": \"hello\",\n            \"output\": False\n        },\n        {\n            \"input\": \"\",\n            \"output\": True\n        },\n        {\n            \"input\": \"12321\",\n            \"output\": True\n        },\n        {\n            \"input\": \"12345\",\n            \"output\": False\n        },\n        {\n            \"input\": \"A man, a plan, a canal: Panama\",\n            \"output\": True\n        },\n        {\n            \"input\": \"Never odd or even\",\n            \"output\": True\n        },\n        {\n            \"input\": \"Palindrome\",\n            \"output\": False\n        }\n    ]\n}"}
{"task_id": "HumanEval/49", "modified_prompt": "{\n  \"prompt\": \"def modp(n: int, p: int):\\\\n    \\\"\\\"Return 2^n modulo p (be aware of numerics).\",\n  \"test_cases\": [\n    {\n      \"params\": [2, 5],\n      \"output\": 4\n    },\n    {\n      \"params\": [3, 151],\n      \"output\": 8\n    },\n    {\n      \"params\": [5, 87],\n      \"output\": 32\n    },\n    {\n      \"params\": [12, 100],\n      \"output\": 87\n    }\n  ]\n}"}
{"task_id": "HumanEval/50", "modified_prompt": "{\n  \"prompt\": \"HumanEval/50\",\n  \"test_cases\": [\n    {\n      \"input\": \"hello world\",\n      \"output\": \"mjqqt btwqi\"\n    },\n    {\n      \"input\": \"abcdefghijklmnopqrstuvwxyz\",\n      \"output\": \"fghijklmnopqrstuvwxyzabcde\"\n    },\n    {\n      \"input\": \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\",\n      \"output\": \"FfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZzAaBbCcDdEe\"\n    },\n    {\n      \"input\": \"1234567890\",\n      \"output\": \"6789012345\"\n    },\n    {\n      \"input\": \" !\\\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\",\n      \"output\": \"vhtr !\\\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~gfds\"\n    }\n  ]\n}"}
{"task_id": "HumanEval/51", "modified_prompt": "{\n    \"task_prompt\": \"def remove_vowels(text):\\n     \\n    remove_vowels is a function that takes string and returns string without vowels.\",\n    \"test_cases\": [\n        {\n            \"input\": \"hello\",\n            \"output\": \"hll\"\n        },\n        {\n            \"input\": \"aeiou\",\n            \"output\": \"\"\n        },\n        {\n            \"input\": \"bcdfg\",\n            \"output\": \"bcdfg\"\n        },\n        {\n            \"input\": \"The quick brown fox jumps over the lazy dog\",\n            \"output\": \"Th qck brwn fx jmps vr th lzy dg\"\n        },\n        {\n            \"input\": \"1234567\",\n            \"output\": \"1234567\"\n        }\n    ]\n}"}
{"task_id": "HumanEval/52", "modified_prompt": "{\n    \"prompt\": \"def below_threshold(l: list, t: int):\\n     Return True if all numbers in the list l are below threshold t.\",\n    \"test_cases\": [\n        {\n            \"inputs\": {\n                \"l\": [1, 2, 3, 4, 5],\n                \"t\": 10\n            },\n            \"output\": True\n        },\n        {\n            \"inputs\": {\n                \"l\": [10, 20, 30, 40, 50],\n                \"t\": 15\n            },\n            \"output\": False\n        },\n        {\n            \"inputs\": {\n                \"l\": [],\n                \"t\": 5\n            },\n            \"output\": True\n        },\n        {\n            \"inputs\": {\n                \"l\": [5, 5, 5, 5, 5],\n                \"t\": 6\n            },\n            \"output\": False\n        },\n        {\n            \"inputs\": {\n                \"l\": [1, 1, 1, 1, 1],\n                \"t\": 0\n            },\n            \"output\": True\n        }\n    ]\n}"}
{"task_id": "HumanEval/53", "modified_prompt": "{\n    \"prompt\": \"def add(x: int, y: int):\\n     Add two numbers x and y\",\n    \"test_cases\": [\n        {\n            \"input\": [1, 2],\n            \"output\": 3\n        },\n        {\n            \"input\": [-5, 10],\n            \"output\": 5\n        },\n        {\n            \"input\": [0, 1],\n            \"output\": 1\n        },\n        {\n            \"input\": [100, 100],\n            \"output\": 200\n        },\n        {\n            \"input\": [12345, 98765],\n            \"output\": 111110\n        }\n    ]\n}"}
{"task_id": "HumanEval/54", "modified_prompt": "prompt: HumanEval/54\n\ndef same_chars(s0: str, s1: str):\n\n    Check if two words have the same characters.\n\ntest_input: [\"abc\", \"cba\"]\nexpected_output: True\n\ntest_input: [\"abcd\", \"abc\"]\nexpected_output: False\n\ntest_input: [\"\", \"\"]\nexpected_output: True\n\ntest_input: [\"aaabbb\", \"bbbccc\"]\nexpected_output: False\n\ntest_input: [\"123\", \"321\"]\nexpected_output: True"}
{"task_id": "HumanEval/55", "modified_prompt": "{\n  \"task\": \"def fib(n: int):\\\\n    return n-th Fibonacci number.\",\n  \"test_cases\": [\n    \"fib(0) should return 0\",\n    \"fib(1) should return 1\",\n    \"fib(5) should return 5\",\n    \"fib(12) should return 144\",\n    \"fib(20) should return 6765\"\n  ]\n}"}
{"task_id": "HumanEval/56", "modified_prompt": "{\n    \"prompt\": \"def correct_bracketing(brackets: str):\\n      brackets is a string of \\\"<\\\" and \\\">\\\".\\n    return True if every opening bracket has a corresponding closing bracket.\",\n    \"test_cases\": [\n        {\n            \"brackets\": \"<>><<\",\n            \"expected_output\": False\n        },\n        {\n            \"brackets\": \"<><><><>\",\n            \"expected_output\": True\n        },\n        {\n            \"brackets\": \"<>>\",\n            \"expected_output\": False\n        }\n    ]\n}"}
{"task_id": "HumanEval/57", "modified_prompt": "{\n    \"prompt\": \"def monotonic(l: list):\\n     Return True is list elements are monotonically increasing or decreasing.\",\n    \"test_cases\": [\n        {\n            \"case\": \"Increasing list\",\n            \"input\": [1, 2, 3, 4, 5],\n            \"output\": true\n        },\n        {\n            \"case\": \"Decreasing list\",\n            \"input\": [5, 4, 3, 2, 1],\n            \"output\": true\n        },\n        {\n            \"case\": \"Empty list\",\n            \"input\": [],\n            \"output\": true\n        },\n        {\n            \"case\": \"List with duplicates\",\n            \"input\": [1, 2, 2, 3, 4],\n            \"output\": true\n        },\n        {\n            \"case\": \"List with negative and positive numbers\",\n            \"input\": [-5, -1, 0, 4, 10],\n            \"output\": true\n        },\n        {\n            \"case\": \"List with equal numbers\",\n            \"input\": [1, 1, 1, 1, 1],\n            \"output\": true\n        },\n        {\n            \"case\": \"List with alternating elements\",\n            \"input\": [1, 3, 2, 4, 3],\n            \"output\": false\n        }\n    ]\n}"}
{"task_id": "HumanEval/58", "modified_prompt": "{\n  \"prompt\": \"def common(l1: list, l2: list):\\n     Return sorted unique common elements for two lists.\",\n  \"test_cases\": [\n    {\n      \"inputs\": {\n        \"l1\": [1, 2, 3, 4, 5],\n        \"l2\": [1, 2, 3, 4, 5]\n      },\n      \"output\": [1, 2, 3, 4, 5]\n    },\n    {\n      \"inputs\": {\n        \"l1\": [1, 1, 2, 2, 3, 3],\n        \"l2\": [2, 2, 3, 3, 4, 4]\n      },\n      \"output\": [2, 3]\n    },\n    {\n      \"inputs\": {\n        \"l1\": [5, 4, 3, 2, 1],\n        \"l2\": [6, 5, 4, 3, 2]\n      },\n      \"output\": [2, 3, 4, 5]\n    },\n    {\n      \"inputs\": {\n        \"l1\": [1, 3, 5, 7, 9],\n        \"l2\": [2, 4, 6, 8, 10]\n      },\n      \"output\": []\n    },\n    {\n      \"inputs\": {\n        \"l1\": [1, 2, 3, 4, 5],\n        \"l2\": [6, 7, 8, 9, 10]\n      },\n      \"output\": []\n    }\n  ]\n}"}
{"task_id": "HumanEval/59", "modified_prompt": "{\n  \"prompt\": \"def largest_prime_factor(n: int):\\n     Return the largest prime factor of n. Assume n > 1 and is not a prime.\",\n  \"test_cases\": [\n    {\n      \"input\": 0,\n      \"output\": None\n    },\n    {\n      \"input\": 1,\n      \"output\": None\n    },\n    {\n      \"input\": 2,\n      \"output\": None\n    },\n    {\n      \"input\": 10,\n      \"output\": 5\n    },\n    {\n      \"input\": 14,\n      \"output\": 7\n    },\n    {\n      \"input\": 25,\n      \"output\": 5\n    },\n    {\n      \"input\": 13195,\n      \"output\": 29\n    },\n    {\n      \"input\": 600851475143,\n      \"output\": 6857\n    }\n  ]\n}"}
{"task_id": "HumanEval/60", "modified_prompt": "{\n\"prompt\": \"def sum_to_n(n: int):\\n     sum_to_n is a function that sums numbers from 1 to n.\",\n\"value\": [\n    \"n = 100; expected output = 5050\",\n    \"n = 0; expected output = 0\",\n    \"n = -10; expected output = -55\",\n    \"n = 500; expected output = 125250\",\n    \"n = 1; expected output = 1\"\n    ]\n}"}
{"task_id": "HumanEval/61", "modified_prompt": "Test Case 1:\nInput: \"(())\"\nExpected Output: True\n\nTest Case 2:\nInput: \"()()\"\nExpected Output: True\n\nTest Case 3:\nInput: \"((()))\"\nExpected Output: True\n\nTest Case 4:\nInput: \"(()\"\nExpected Output: False\n\nTest Case 5:\nInput: \"())\"\nExpected Output: False\n\nTest Case 6:\nInput: \"()(()\"\nExpected Output: False"}
{"task_id": "HumanEval/62", "modified_prompt": "1. Input: [2, 3, 4]\nOutput: [0, 3, 8]\n\n2. Input: [0, 1, 2, 3]\nOutput: [1, 4, 9]\n\n3. Input: [-1, 0, 5, -2]\nOutput: [0, 10, -6]\n\n4. Input: [1, 2, 3, 4, 5]\nOutput: [2, 6, 12, 20]\n\n5. Input: [3, -2, 1, 4]\nOutput: [-2, 2, 12]\n\n6. Input: [0, 0, 0, 0]\nOutput: [0, 0, 0]\n\n7. Input: [1, -2, 3, -4, 5, -6]\nOutput: [-2, 6, -12, 20]\n\n8. Input: [2, 0, -3, 1]\nOutput: [0, -6, 3]\n\n9. Input: [5, -4, 3, -2, 1]\nOutput: [-4, 6, -6, 4]\n\n10. Input: [1, 1, 1, 1, 1]\nOutput: [1, 2, 3, 4]\n\n11. Input: [6, 5, 4, 3, 2, 1]\nOutput: [5, 8, 9, 8, 5]\n\n12. Input: [10, 9, 8, 7, 6, 5, 4]\nOutput: [9, 16, 21, 20, 15, 8]\n\n13. Input: [2]\nOutput: [1]\n\n14. Input: []\nOutput: []\n\n15. Input: [2, -4, 6, -8]\nOutput: [-4, 12, -24]"}
{"task_id": "HumanEval/63", "modified_prompt": "{\n    \"prompt\": \"def fibfib(n: int):\\n     The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\\n    fibfib(0) == 0\\n    fibfib(1) == 0\\n    fibfib(2) == 1\\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\",\n    \"test_cases\": [\n        {\"n\": 0, \"expected\": 0},\n        {\"n\": 1, \"expected\": 0},\n        {\"n\": 2, \"expected\": 1},\n        {\"n\": 3, \"expected\": 1},\n        {\"n\": 4, \"expected\": 2},\n        {\"n\": 5, \"expected\": 4},\n        {\"n\": 6, \"expected\": 7},\n        {\"n\": 10, \"expected\": 63},\n        {\"n\": 15, \"expected\": 286},\n        {\"n\": 20, \"expected\": 1372}\n    ]\n}"}
{"task_id": "HumanEval/64", "modified_prompt": "{\n    \"prompt\": \"FIX =  \\nAdd more test cases.\\n \\n \\ndef vowels_count(s):\\n     Write a function vowels_count which takes a string representing\\n    a word as input and returns the number of vowels in the string.\\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\\n    vowel, but only when it is at the end of the given word.\",\n    \"test cases\": [\"vowels_count('aeiou') => 5\",\n                   \"vowels_count('hello') => 2\",\n                   \"vowels_count('yoyo') => 2\",\n                   \"vowels_count('programming') => 3\",\n                   \"vowels_count('missing') => 1\"]\n}"}
{"task_id": "HumanEval/65", "modified_prompt": "{\n    \"prompt\": \"def circular_shift(x, shift):\\n     Circular shift the digits of the integer x, shift the digits right by shift\\n    and return the result as a string.\\n    If shift > number of digits, return digits reversed.\",\n    \"tests\": [\n        {\n            \"input\": [123456, 2],\n            \"output\": \"561234\"\n        },\n        {\n            \"input\": [987654321, 4],\n            \"output\": \"321987654\"\n        },\n        {\n            \"input\": [1357, 5],\n            \"output\": \"7531\"\n        },\n        {\n            \"input\": [246, 0],\n            \"output\": \"246\"\n        },\n        {\n            \"input\": [9753, 8],\n            \"output\": \"3579\"\n        }\n    ]\n}"}
{"task_id": "HumanEval/66", "modified_prompt": "\"I know one solution is 'AAA' with a sum of 195, var=rand(1,32)\"\n \"Valid test cases : \nTestCase1: Input = \"AbcDefGh12J1\"  Expected Output = 122\nTestCase2: Input = \"ZYXW987xYwvU\"  Expected Output = 493\nTestCase3: Input = \"!@#$%^&*()_+1234\"  Expected Output = 142\nTestCase4: Input = \"abAB12cdCD\"  Expected Output = 132\nTestCase5: Input = \"aBcDeFgH4567\"  Expected Output = 360"}
{"task_id": "HumanEval/67", "modified_prompt": "{\n  \"prompt\": \"def fruit_distribution(s,n):\\n     \\n    In this task, you will be given a string that represents a number of apples and oranges \\n    that are distributed in a basket of fruit this basket contains \\n    apples, oranges, and mango fruits. Given the string that represents the total number of \\n    the oranges and apples and an integer that represent the total number of the fruits \\n    in the basket return the number of the mango fruits in the basket.\\n    \\n\",\n  \"test_cases\": [\n    {\n      \"input_string\": \"4 apples, 3 oranges\",\n      \"total_fruits\": 9,\n      \"expected_output\": 2\n    },\n    {\n      \"input_string\": \"2 apples, 5 oranges\",\n      \"total_fruits\": 7,\n      \"expected_output\": 0\n    },\n    {\n      \"input_string\": \"12 apples, 15 oranges\",\n      \"total_fruits\": 30,\n      \"expected_output\": 3\n    }\n  ]\n}"}
{"task_id": "HumanEval/68", "modified_prompt": "{\n    \"input\": [[3, 6, 2, 5, 1, 8]],\n    \"output\": [2, 2]\n},\n{\n    \"input\": [[9, 7, 3, 1, 5]],\n    \"output\": []\n},\n{\n    \"input\": [[0, 4, 2, 6, 8]],\n    \"output\": [0, 0]\n},\n{\n    \"input\": [[]],\n    \"output\": []\n},\n{\n    \"input\": [[2, 4, 6, 8, 10, 4, 6, 7, 9]],\n    \"output\": [2, 5]\n}"}
{"task_id": "HumanEval/69", "modified_prompt": "# Test cases:\n\n# Input: [1, 2, 3, 4, 5]\n# Expected output: -1\n\n# Input: [2, 2, 2, 3, 3, 4, 4, 5, 6]\n# Expected output: 2\n\n# Input: [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]\n# Expected output: -1\n\n# Input: [1, 2, 3, 3, 3, 4, 4, 5, 5, 5]\n# Expected output: 3\n\n# Input: [6, 6, 6, 6, 6, 6, 6]\n# Expected output: 6"}
{"task_id": "HumanEval/70", "modified_prompt": "{\n  \"prompt\": \"HumanEval/70\", \n  \"test_cases\": [\n    \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\", \n    \"[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\", \n    \"[2, 4, 6, 8, 10, 1, 3, 5, 7, 9]\", \n    \"[5, 2, 7, 4, 9, 1, 10, 6, 3, 8]\", \n    \"[10, 1, 9, 2, 8, 3, 7, 4, 6, 5]\"\n  ]\n}"}
{"task_id": "HumanEval/71", "modified_prompt": "[\n  {\n    \"input\": [3, 4, 5],\n    \"output\": \"6.0\",\n    \"explanation\": \"Valid triangle with integer input\"\n  },\n  {\n    \"input\": [5.5, 4.1, 3.2],\n    \"output\": \"6.02\",\n    \"explanation\": \"Valid triangle with float input\"\n  },\n  {\n    \"input\": [5, 5, 5],\n    \"output\": \"10.83\",\n    \"explanation\": \"Valid triangle with equal sides\"\n  },\n  {\n    \"input\": [7, 5, 3],\n    \"output\": \"6.50\",\n    \"explanation\": \"Valid triangle with mixed input\"\n  },\n  {\n    \"input\": [2, 2, 5],\n    \"output\": \"-1\",\n    \"explanation\": \"Invalid triangle with impossible side lengths\"\n  },\n  {\n    \"input\": [1, 2, 3],\n    \"output\": \"-1\",\n    \"explanation\": \"Invalid triangle with sum of two sides less than the third side\"\n  }\n]"}
{"task_id": "HumanEval/72", "modified_prompt": "[\n    {\n        \"prompt\": \"def will_it_fly(q,w):\\n    \\\"\\n    Write a function that returns True if the object q will fly, and False otherwise.\\n    The object q will fly if it\\'s balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\",\n        \"cases\": [\n            {\"q\": [1, 2, 3], \"w\": 6},\n            {\"q\": [1, 1, 1], \"w\": 3},\n            {\"q\": [1, 2, 1, 2], \"w\": 6},\n            {\"q\": [1, 2, 3, 4, 3, 2, 1], \"w\": 10},\n            {\"q\": [1, 2, 1, 3], \"w\": 4},\n            {\"q\": [1, 2, 3, 4], \"w\": 5},\n            {\"q\": [], \"w\": 0},\n            {\"q\": [1], \"w\": 1},\n            {\"q\": [1, 1, 1, 1, 1], \"w\": 5}\n        ]\n    }\n]"}
{"task_id": "HumanEval/73", "modified_prompt": "{\n  \"prompt\": \"def smallest_change(arr):\\n     \\n    Given an array arr of integers, find the minimum number of elements that\\n    need to be changed to make the array palindromic. A palindromic array is an array that\\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\",\n  \"test_cases\": [\n    {\n      \"input\": [1, 2, 3, 4, 5],\n      \"output\": 4\n    },\n    {\n      \"input\": [1, 7, 4, 5, 4, 7, 11],\n      \"output\": 4\n    },\n    {\n      \"input\": [3, 5, 1, 1, 2, 4],\n      \"output\": 3\n    },\n    {\n      \"input\": [7, 2, 1, 4, 2, 7],\n      \"output\": 2\n    },\n    {\n      \"input\": [9, 4, 2, 3, 6, 2, 9],\n      \"output\": 3\n    }\n  ]\n}"}
{"task_id": "HumanEval/74", "modified_prompt": "{\n    \"prompt\": \"def total_match(lst1, lst2):\\n    \\\"\\n    Write a function that accepts two lists of strings and returns the list that has \\n    total number of chars in the all strings of the list less than the other list.\\n\\n    if the two lists have the same number of chars, return the first list.\",\n    \"test_cases\": [\n        {\n            \"input\": [\"ab\", \"cde\", \"fghij\"],\n            \"output\": [\"ab\", \"cde\"]\n        },\n        {\n            \"input\": [\"Hello\", \"world\", \"!!!!\"],\n            \"output\": [\"Hello\", \"world\"]\n        },\n        {\n            \"input\": [\"Python\", \"is\", \"awesome\"],\n            \"output\": [\"Python\", \"is\"]\n        },\n        {\n            \"input\": [\"One\", \"more\", \"time\"],\n            \"output\": [\"One\"]\n        }\n    ]\n}"}
{"task_id": "HumanEval/75", "modified_prompt": "{\n    \"prompt\": \"def is_multiply_prime(a):\\n     Write a function that returns true if the given number is the multiplication of 3 prime numbers\\n    and false otherwise.\\n    Knowing that (a) is less then 100.\",\n    \"test cases\": [\n        {\n            \"input\": 89,\n            \"output\": True\n        },\n        {\n            \"input\": 110,\n            \"output\": False\n        },\n        {\n            \"input\": 73,\n            \"output\": False\n        },\n        {\n            \"input\": 15,\n            \"output\": False\n        },\n        {\n            \"input\": 30,\n            \"output\": False\n        }\n    ]\n}"}
{"task_id": "HumanEval/76", "modified_prompt": "{\"def is_simple_power(x, n): Your task is to write a function that returns true if a number x is a simple power of n and false in other cases.\": [{\"call\": \"is_simple_power(16, 2)\", \"expected\": \"True\"}, {\"call\": \"is_simple_power(81, 3)\", \"expected\": \"True\"}, {\"call\": \"is_simple_power(125, 5)\", \"expected\": \"True\"}, {\"call\": \"is_simple_power(36, 6)\", \"expected\": \"False\"}, {\"call\": \"is_simple_power(49, 7)\", \"expected\": \"False\"}, {\"call\": \"is_simple_power(100, 4)\", \"expected\": \"False\"}, {\"call\": \"is_simple_power(121, 11)\", \"expected\": \"False\"}, {\"call\": \"is_simple_power(16, 6)\", \"expected\": \"False\"}, {\"call\": \"is_simple_power(1000, 10)\", \"expected\": \"False\"}]}"}
{"task_id": "HumanEval/77", "modified_prompt": "Task: def iscube(a):\n\nTest Cases:\n1. Input: 8\n   Output: False\n\n2. Input: 27\n   Output: True\n\n3. Input: 64\n   Output: True\n\n4. Input: 0\n   Output: True\n\n5. Input: -27\n   Output: True"}
{"task_id": "HumanEval/78", "modified_prompt": "def hex_key(num):\n  is_prime_hex = lambda n : int(n, 16) in [2, 3, 5, 7, 11, 13, 17, 19]\n  count_primes = lambda s : sum(map(is_prime_hex, s))\n\n  hex_even = \"eBeDe\"\n  hex_odd = \"75DA\"\n\n  return \"hex_key(hex_even) = 3 | hex_key(hex_odd) = 0\""}
{"task_id": "HumanEval/79", "modified_prompt": "{\n    \"original_prompt\": \"def decimal_to_binary(decimal):\\n     You will be given a number in decimal form and your task is to convert it to\\n    binary format. The function should return a string, with each character representing a binary\\n    number. Each character in the string will be '0' or '1'.\\n\\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\\n    The extra characters are there to help with the format.\",\n\n    \"test_cases\": [\n        {\"decimal\": 0, \"expected_result\": \"db0db\"},\n        {\"decimal\": 5, \"expected_result\": \"db101db\"},\n        {\"decimal\": 10, \"expected_result\": \"db1010db\"},\n        {\"decimal\": 100, \"expected_result\": \"db1100100db\"},\n        {\"decimal\": 1023, \"expected_result\": \"db1111111111db\"}\n    ]\n}"}
{"task_id": "HumanEval/80", "modified_prompt": "{\n    \"prompt\": \"def is_happy(s):\",\n    \"test_cases\": [\n        {\n            \"input\": [\"hello\"],\n            \"output\": \"Not Happy\"\n        },\n        {\n            \"input\": [\"happy\"],\n            \"output\": \"Happy\"\n        },\n        {\n            \"input\": [\"\"],\n            \"output\": \"Not Happy\"\n        },\n        {\n            \"input\": [\"aaa\"],\n            \"output\": \"Not Happy\"\n        },\n        {\n            \"input\": [\"abcde\"],\n            \"output\": \"Happy\"\n        },\n        {\n            \"input\": [\"abbccc\"],\n            \"output\": \"Not Happy\"\n        },\n        {\n            \"input\": [\"aabbcc\"],\n            \"output\": \"Not Happy\"\n        },\n        {\n            \"input\": [\"123\"],\n            \"output\": \"Not Happy\"\n        }\n    ]\n}"}
{"task_id": "HumanEval/81", "modified_prompt": "Test Cases:\n\nOriginal Prompt: def numerical_letter_grade(grades):\n    It is the last week of the semester and the teacher has to give the grades to students. The teacher has been making her own algorithm for grading. The only problem is, she has lost the code she used for grading. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table:\n\nTest Case 1:\n    Input: [3.8, 2.5, 4.0]\n    Output: ['A', 'C', 'A']\n\nTest Case 2:\n    Input: [2.1, 3.9, 1.5, 3.2]\n    Output: ['D', 'A', 'F', 'C']\n\nTest Case 3:\n    Input: [3.6, 2.2, 3.1, 1.9, 4.0]\n    Output: ['A', 'D', 'C', 'F', 'A']\n\nTest Case 4:\n    Input: [3.0, 2.5, 3.8, 2.9, 1.2, 4.0, 1.5]\n    Output: ['B', 'C', 'A', 'C', 'F', 'A', 'F']\n\nTest Case 5:\n    Input: [4.0, 3.9, 3.5, 3.6, 3.2, 2.1, 1.5, 2.3]\n    Output: ['A', 'A', 'B', 'B', 'B', 'D', 'F', 'D']"}
{"task_id": "HumanEval/82", "modified_prompt": "{\n  \"prompt\": \"def prime_length(string):\\n     Write a function that takes a string and returns True if the string\\n    length is a prime number or False otherwise\",\n  \"test_cases\": [\n    {\n      \"test_case\": \"prime_length('Hello')\",\n      \"expected\": \"False\"\n    },\n    {\n      \"test_case\": \"prime_length('Programming')\",\n      \"expected\": \"False\"\n    },\n    {\n      \"test_case\": \"prime_length('Python')\",\n      \"expected\": \"True\"\n    },\n    {\n      \"test_case\": \"prime_length('C++')\",\n      \"expected\": \"False\"\n    },\n    {\n      \"test_case\": \"prime_length('')\",\n      \"expected\": \"False\"\n    },\n    {\n      \"test_case\": \"prime_length('123456789')\",\n      \"expected\": \"False\"\n    }\n  ]\n}"}
{"task_id": "HumanEval/83", "modified_prompt": "[\n    \"def starts_one_ends(n):\"\n    \"Input: 3\"\n    \"Output: 10\",\n    \"Input: 5\"\n    \"Output: 20\",\n    \"Input: 1\"\n    \"Output: 1\",\n    \"Input: 9\"\n    \"Output: 90\",\n    \"Input: 15\"\n    \"Output: 180\",\n]"}
{"task_id": "HumanEval/84", "modified_prompt": "{\n    \"prompt\": \"def solve(N):\\n     Given a positive integer N, return the total sum of its digits in binary.\",\n    \"test_cases\": [\n        {\n            \"input\": 0,\n            \"output\": 0\n        },\n        {\n            \"input\": 1,\n            \"output\": 1\n        },\n        {\n            \"input\": 10,\n            \"output\": 1\n        },\n        {\n            \"input\": 101,\n            \"output\": 2\n        },\n        {\n            \"input\": 111,\n            \"output\": 3\n        },\n        {\n            \"input\": 1001,\n            \"output\": 3\n        },\n        {\n            \"input\": 1111,\n            \"output\": 4\n        }\n    ]\n}"}
{"task_id": "HumanEval/85", "modified_prompt": "1, [1,2,3,4,5]\n3\n\nHumanEval/85\nTest Case 1: lst = [1, 2, 3, 4, 5]\nExpected Output: 2\n\nTest Case 2: lst = [5, 6, 8, 1]\nExpected Output: 14 \n\nTest Case 3: lst = [100, 200, 0, 7, 11, 9]\nExpected Output: 215"}
{"task_id": "HumanEval/86", "modified_prompt": "{\n    \"prompt\": \"def anti_shuffle(s):\\n     \\n    Write a function that takes a string and returns an ordered version of it.\\n    Ordered version of string, is a string where all words (separated by space)\\n    are replaced by a new word where all the characters arranged in\\n    ascending order based on ascii value.\\n    Note: You should keep the order of words and blank spaces in the sentence.\",\n    \"test_cases\": [\n        {\n            \"input_string\": \"abc def ghi jkl\",\n            \"expected_output\": \"abc def ghi jkl\"\n        },\n        {\n            \"input_string\": \"jkl def ghi abc\",\n            \"expected_output\": \"jkl def ghi abc\"\n        },\n        {\n            \"input_string\": \"aabbccddee\",\n            \"expected_output\": \"aabbccddee\"\n        },\n        {\n            \"input_string\": \"Hello World\",\n            \"expected_output\": \"Holle dlorW\"\n        },\n        {\n            \"input_string\": \"This is a sentence\",\n            \"expected_output\": \"hist is a ceeenntss\"\n        }\n    ]\n}"}
{"task_id": "HumanEval/87", "modified_prompt": "Original prompt:\ndef get_row(lst, x):\n\nYou are given a 2 dimensional data, as a nested lists,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the list,\nand return list of tuples, [(x1, y1), (x2, y2) ...] such that\neach tuple is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nGenerated test cases:\n1. Input: lst = [[1,2,3],[4],[5,6,7,8],[9,10]], x = 10\n   Expected output: [(3, 1)]\n2. Input: lst = [[2,4,3],[6,7,8,9],[1,5],[10,11,12]], x = 5\n   Expected output: [(2, 0), (3, 0)]\n3. Input: lst = [[],[1,2,3],[4,5],[6,7,8,9,10]], x = 4\n   Expected output: [(2, 1)]\n4. Input: lst = [[10,12],[5,6,7],[1],[]], x = 12\n   Expected output: [(0, 1)]\n5. Input: lst = [[],[1,3,5],[2],[4,6,8,10]], x = 6\n   Expected output: [(1, 1), (3, 1)]"}
{"task_id": "HumanEval/88", "modified_prompt": "def sort_array_test():\n  return [\n    ([1, 2], [1, 2]),\n    ([2, 1], [2, 1]),\n    ([3, 5, 8], [3, 5, 8]),\n    ([9, 1, 7], [9, 7, 1]),\n    ([6, 2, 3], [6, 3, 2]),\n    ([4, 6, 9], [6, 9, 4]),\n    ([5, 9, 2], [9, 2, 5]),\n    ([9, 9, 9], [9, 9, 9]),\n    ([2, 3, 4, 5], [2, 4, 5, 3]),\n    ([1, 3, 5, 7, 9], [1, 3, 5, 7, 9]),\n    ([9, 5, 3, 1], [9, 3, 5, 1]),\n    ([8, 4, 2], [8, 4, 2]),\n    ([], []),\n    ([1], [1]),\n    ([3, 6, 2, 9, 4], [3, 2, 4, 6, 9]),\n    ([3, 6, 2, 9, 4, 1], [3, 1, 4, 2, 6, 9]),\n  ]"}
{"task_id": "HumanEval/89", "modified_prompt": "{\n    \"prompt\": \"def encrypt(s):\\n     Create a function encrypt that takes a string as an argument and\\n    returns a string encrypted with the alphabet being rotated. \\n    The alphabet should be rotated in a manner such that the letters \\n    shift down by two multiplied to two places.\",\n    \"test_cases\": [\n        {\n            \"input\": \"hello\",\n            \"output\": \"jgnnq\"\n        },\n        {\n            \"input\": \"abcdefghijklmnopqrstuvwxyz\",\n            \"output\": \"cdefghijklmnopqrstuvwxyzab\"\n        },\n        {\n            \"input\": \"1234567890\",\n            \"output\": \"3456789012\"\n        },\n        {\n            \"input\": \"\",\n            \"output\": \"\"\n        },\n        {\n            \"input\": \"z\",\n            \"output\": \"b\"\n        }\n    ]\n}"}
{"task_id": "HumanEval/90", "modified_prompt": "{\n  \"task\": \"\\ndef next_smallest(lst):\\n     \\n    You are given a list of integers.\\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\\n    Return None if there is no such element.\\n    \\n   \",\n  \"test_cases\": [\n    {\n      \"input\": [1, 2, 3],\n      \"output\": 2\n    },\n    {\n      \"input\": [10, 5, 8, 3, 1],\n      \"output\": 3\n    },\n    {\n      \"input\": [4, 2, 1, 6, 8],\n      \"output\": 2\n    },\n    {\n      \"input\": [-5, -10, 0, -15],\n      \"output\": -5\n    },\n    {\n      \"input\": [7, 7, 7, 7],\n      \"output\": None\n    }\n  ]\n}"}
{"task_id": "HumanEval/91", "modified_prompt": "{\n    \"prompt\": \"def is_bored(S):\\n     \\\"\\n    You\\'ll be given a string of words, and your task is to count the number\\n    of boredoms. A boredom is a sentence that starts with the word \\\"I\\\".\\n    Sentences are delimited by \\'.\\', \\'?\\' or \\'!\\'.\",\n    \"test_cases\": [\n        {\n            \"input\": \"I am bored.\",\n            \"output\": 1\n        },\n        {\n            \"input\": \"I'm bored.\",\n            \"output\": 1\n        },\n        {\n            \"input\": \"I am watching TV.\",\n            \"output\": 0\n        },\n        {\n            \"input\": \"My cat is bored.\",\n            \"output\": 0\n        },\n        {\n            \"input\": \"I am bored. Are you?\",\n            \"output\": 2\n        },\n        {\n            \"input\": \"\",\n            \"output\": 0\n        },\n        {\n            \"input\": \"I am bored. I am bored.\",\n            \"output\": 2\n        },\n        {\n            \"input\": \"I am bored! Why is everyone else having fun?\",\n            \"output\": 1\n        },\n        {\n            \"input\": \"I saw a movie. I am bored.\",\n            \"output\": 2\n        }\n    ]\n}"}
{"task_id": "HumanEval/92", "modified_prompt": "Scenario 1:\nInput: any_int(3,6,9)\nOutput: True\n\nScenario 2:\nInput: any_int(3,7,15)\nOutput: False"}
{"task_id": "HumanEval/93", "modified_prompt": "{\n    \"input\": \"Hello World!\",\n    \"output\": \"Jildp Wurmz!\"\n},\n{\n    \"input\": \"I am coding!\",\n    \"output\": \"K cm fpgkpf!\"\n},\n{\n    \"input\": \"This is a test.\",\n    \"output\": \"Vjut ku c vugv.\"\n},\n{\n    \"input\": \"1234\",\n    \"output\": \"1234\"\n},\n{\n    \"input\": \"\",\n    \"output\": \"\"\n}"}
{"task_id": "HumanEval/94", "modified_prompt": "{\"def\": \"skjkasdkd\", \"lst\": [2, 3, 5, 7, 11, 13, 17, 19, 23], \"expected_output\": 11}\n{\"def\": \"skjkasdkd\", \"lst\": [17, 23, 29, 37, 41, 47], \"expected_output\": 58}\n{\"def\": \"skjkasdkd\", \"lst\": [4, 6, 8, 9, 12, 15, 18], \"expected_output\": 29}\n{\"def\": \"skjkasdkd\", \"lst\": [1, 3, 7, 11, 23, 29, 47], \"expected_output\": 11}"}
{"task_id": "HumanEval/95", "modified_prompt": "{\n  'prompt': \"Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False. The function should return False if the given dictionary is empty.\",\n  'test_cases': [\n    {\n      'input': {'one': 1, 'two': 2, 'three': 3},\n      'output': False\n    },\n    {\n      'input': {'ONE': 1, 'TWO': 2, 'THREE': 3},\n      'output': True\n    },\n    {\n      'input': {'One': 1, 'Two': 2, 'Three': 3},\n      'output': False\n    },\n    {\n      'input': {},\n      'output': False\n    }\n  ]\n}"}
{"task_id": "HumanEval/96", "modified_prompt": "{\n    \"n\": 6,\n        \"expected_output\": [2, 3, 5]\n    },\n    {\n        \"n\": 10,\n        \"expected_output\": [2, 3, 5, 7]\n    },\n    {\n        \"n\": 15,\n        \"expected_output\": [2, 3, 5, 7, 11, 13]\n    },\n    {\n        \"n\": 20,\n        \"expected_output\": [2, 3, 5, 7, 11, 13, 17, 19]\n    },\n    {\n        \"n\": 25,\n        \"expected_output\": [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    }"}
{"task_id": "HumanEval/97", "modified_prompt": "{\n    \"question\": \"def multiply(a, b):\\n     \\\"Complete the function that takes two integers and returns \\n    the product of their unit digits.\\n    Assume the input is always valid.\",\n    \"test_cases\": [\n        {\n            \"input\": [5, 4],\n            \"output\": [20]\n        },\n        {\n            \"input\": [9, 8],\n            \"output\": [72]\n        },\n        {\n            \"input\": [7, 2],\n            \"output\": [14]\n        },\n        {\n            \"input\": [3, 6],\n            \"output\": [18]\n        },\n        {\n            \"input\": [0, 9],\n            \"output\": [0]\n        }\n    ],\n    \"expected_output\": [20, 72, 14, 18, 0]\n}"}
{"task_id": "HumanEval/98", "modified_prompt": "{\n    \"prompt\": \"def count_upper(s):\\n     \\\"\\n    Given a string s, count the number of uppercase vowels in even indices.\",\n    \"test_cases\": [\n        {\n            \"input\": \"Hello World\",\n            \"output\": 0\n        },\n        {\n            \"input\": \"aAaAaAa\",\n            \"output\": 3\n        },\n        {\n            \"input\": \"AaAaAaA\",\n            \"output\": 4\n        },\n        {\n            \"input\": \"AEIOUaeiou\",\n            \"output\": 2\n        },\n        {\n            \"input\": \"\",\n            \"output\": 0\n        }\n    ]\n}"}
{"task_id": "HumanEval/99", "modified_prompt": "[\n  'closest_integer(\"5.2\")',\n  'closest_integer(\"6.7\")',\n  'closest_integer(\"10.5\")',\n  'closest_integer(\"7.3\")',\n  'closest_integer(\"3.8\")',\n  'closest_integer(\"-2.4\")',\n  'closest_integer(\"-8.9\")',\n  'closest_integer(\"0\")',\n  'closest_integer(\"1.5\")',\n  'closest_integer(\"-3.7\")'\n]"}
{"task_id": "HumanEval/100", "modified_prompt": "{\n    \"prompt\": \"Given a positive integer n, you have to make a pile of n levels of stones.\\nThe first level has n stones.\\nThe number of stones in the next level is:\",\n    \"test_cases\": [\n        {\"input\": 1, \"output\": [1]},\n        {\"input\": 2, \"output\": [2, 1]},\n        {\"input\": 5, \"output\": [5, 4, 3, 2, 1]},\n        {\"input\": 10, \"output\": [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]}\n    ]\n}"}
{"task_id": "HumanEval/101", "modified_prompt": "Test Cases:\n\nInput: \"Hello, world\"\nOutput: [\"Hello\", \"world\"]\n\nInput: \"This is a test string\"\nOutput: [\"This\", \"is\", \"a\", \"test\", \"string\"]\n\nInput: \"234, alpha, 5, beta, apple\"\nOutput: [\"234\", \"alpha\", \"5\", \"beta\", \"apple\"]\n\nInput: \"one two three four five\"\nOutput: [\"one\", \"two\", \"three\", \"four\", \"five\"]\n\nInput: \" , @@ , ,  \"\nOutput: [\" \", \"@@\", \" \", \" \"]\n\nInput: \"Hello world123!\"\nOutput: \"Hello\", \"world123!\"\n\nInput: \"\"\nOutput: []\n\nInput: \"One more, test, for the, road\"\nOutput: [\"One more\", \"test\", \"for the\", \"road\"]\n\nInput: \"Anothertest,with,a;semilcolon,\"\nOutput: [\"Anothertest\", \"with\", \"a\", \";\", \"semilcolon\", \"\"]\n\nInput: \"candy, cake, ice cream, cookies\"\nOutput: [\"candy\", \"cake\", \"ice cream\", \"cookies\"]"}
{"task_id": "HumanEval/102", "modified_prompt": "{\n    \"prompt\": \"def choose_num(x, y):\\n    \\\"This function takes two positive numbers x and y and returns the\\n    biggest even integer number that is in the range [x, y] inclusive. If \\n    there\\'s no such number, then the function should return -1.\",\n    \"test_cases\": [\n        {\"input\": {\"x\": 1, \"y\": 10}, \"output\": 10},\n        {\"input\": {\"x\": 10, \"y\": 20}, \"output\": 20},\n        {\"input\": {\"x\": 3, \"y\": 9}, \"output\": 8},\n        {\"input\": {\"x\": 5, \"y\": 15}, \"output\": 14},\n        {\"input\": {\"x\": 2, \"y\": 9}, \"output\": 8},\n        {\"input\": {\"x\": 1, \"y\": 3}, \"output\": -1},\n        {\"input\": {\"x\": 12, \"y\": 15}, \"output\": 14}\n    ]\n}"}
{"task_id": "HumanEval/103", "modified_prompt": "1. Original: def rounded_avg(n, m):\\n     \"You are given two positive integers n and m, and your task is to compute the\\n    average of the integers from n through m (including n and m) . \\n    Round the answer to the nearest integer. \\n    If n is greater than m, return -1.\nTest Case:\n    Input: (n=3, m=9)\n    Output: 6\n    \n2. Original: def rounded_avg(n, m):\\n     \"You are given two positive integers n and m, and your task is to compute the\\n    average of the integers from n through m (including n and m) . \\n    Round the answer to the nearest integer. \\n    If n is greater than m, return -1.\nTest Case:\n    Input: (n=4, m=4)\n    Output: 4\n    \n3. Original: def rounded_avg(n, m):\\n     \"You are given two positive integers n and m, and your task is to compute the\\n    average of the integers from n through m (including n and m) . \\n    Round the answer to the nearest integer. \\n    If n is greater than m, return -1.\nTest Case:\n    Input: (n=10, m=15)\n    Output: 13\n    \n4. Original: def rounded_avg(n, m):\\n     \"You are given two positive integers n and m, and your task is to compute the\\n    average of the integers from n through m (including n and m) . \\n    Round the answer to the nearest integer. \\n    If n is greater than m, return -1.\nTest Case:\n    Input: (n=0, m=5)\n    Output: 3\n    \n5. Original: def rounded_avg(n, m):\\n     \"You are given two positive integers n and m, and your task is to compute the\\n    average of the integers from n through m (including n and m) . \\n    Round the answer to the nearest integer. \\n    If n is greater than m, return -1.\nTest Case:\n    Input: (n=2, m=10)\n    Output: 6"}
{"task_id": "HumanEval/104", "modified_prompt": "{\n  \"prompt\": \"def unique_digits(x):   \\n     \\\"Given a list of positive integers x. return a sorted list of all \\n    elements that hasn\\'t any even digit.\\n\\n    Note: Returned list should be sorted in increasing order.\",\n  \"test_cases\": [\n    {\n      \"input\": [1, 2, 3, 4, 5],\n      \"output\": [1, 3, 5]\n    },\n    {\n      \"input\": [55, 22, 33, 44, 66],\n      \"output\": [33, 55]\n    },\n    {\n      \"input\": [1234, 5678, 91011, 1213],\n      \"output\": [1213]\n    },\n    {\n      \"input\": [2468, 1357, 9753, 8642],\n      \"output\": [1357, 9753]\n    },\n    {\n      \"input\": [999, 888, 777, 666, 555, 444, 333, 222, 111],\n      \"output\": []\n    }\n  ]\n}"}
{"task_id": "HumanEval/105", "modified_prompt": "{\"prompt\": \"def by_length(arr):\\n     \\\"\\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\\n    reverse the resulting array, and then replace each digit by its corresponding name from\\n    \\\"One\\\", \\\"Two\\\", \\\"Three\\\", \\\"Four\\\", \\\"Five\\\", \\\"Six\\\", \\\"Seven\\\", \\\"Eight\\\", \\\"Nine\\\".\", \"test_cases\": [{\"input\": [9, 1, 8, 5, 2, 4, 6, 3, 7], \"output\": [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]}, {\"input\": [4, 2, 9, 7, 3, 1, 5, 8, 6], \"output\": [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]}, {\"input\": [1, 2, 3, 4, 5, 6, 7, 8, 9], \"output\": [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]}]}"}
{"task_id": "HumanEval/106", "modified_prompt": "{\n    \"prompt\": \"def f(n):\\n     \\\"Implement the function f that takes n as a parameter,\\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\\nor the sum of numbers from 1 to i otherwise.\\ni starts from 1.\",\n    \"test_cases\": [\n        {\n            \"input\": 3,\n            \"output\": [1, 2, 2]\n        },\n        {\n            \"input\": 5,\n            \"output\": [1, 3, 6, 3, 12]\n        },\n        {\n            \"input\": 8,\n            \"output\": [1, 2, 2, 6, 5, 120, 7, 5040]\n        },\n        {\n            \"input\": 10,\n            \"output\": [1, 3, 6, 3, 12, 15, 42, 7, 5040, 55]\n        },\n        {\n            \"input\": 0,\n            \"output\": []\n        }\n    ]\n}"}
{"task_id": "HumanEval/107", "modified_prompt": "Prompts = ['Given a positive integer n, return a tuple that has the number of even and odd integer palindromes that fall within the range(1, n), inclusive.']\n\nTest_cases = [\n    {'n': 1},\n    {'n': 5},\n    {'n': 10},\n    {'n': 20},\n    {'n': 50}\n]"}
{"task_id": "HumanEval/108", "modified_prompt": "[\n    {\n        \"input\": [[1, 2, 3, 4]],\n        \"output\": 4\n    },\n    {\n        \"input\": [[-1, -2, -3, -4]],\n        \"output\": 4\n    },\n    {\n        \"input\": [[0, 0, 0, 0]],\n        \"output\": 0\n    },\n    {\n        \"input\": [[], [], []],\n        \"output\": 0\n    },\n    {\n        \"input\": [[123, 456, 789, 101112]],\n        \"output\": 4\n    }\n]"}
{"task_id": "HumanEval/109", "modified_prompt": "Given an array [1, 3, 2, 5, 4], the function should return true as the array can be sorted in non-decreasing order by performing the following operation: swap the first two elements.\n\nGiven an array [1, 2, 3, 4, 5], the function should return true as the array is already sorted in non-decreasing order.\n\nGiven an array [5, 4, 3, 2, 1], the function should return false as it is not possible to sort the array in non-decreasing order by performing only one operation.\n\nGiven an array [2, 3, 5, 4, 1], the function should return true as the array can be sorted in non-decreasing order by performing the following operations: swap the first two elements and then swap the last two elements."}
{"task_id": "HumanEval/110", "modified_prompt": "Possible test cases for `exchange(lst1, lst2)`:\n\n1. Input:\n    lst1 = [2, 4, 6]\n    lst2 = [1, 3, 5]\n\n   Output:\n    True\n\n2. Input:\n    lst1 = [1, 3, 5]\n    lst2 = [4, 6, 8]\n\n   Output:\n    False\n\n3. Input:\n    lst1 = [2, 4, 6]\n    lst2 = [1, 2, 3, 4, 5, 6]\n\n   Output:\n    True\n\n4. Input:\n    lst1 = [1, 2, 3]\n    lst2 = [5, 6, 7]\n\n   Output:\n    False"}
{"task_id": "HumanEval/111", "modified_prompt": "[\n  {\n    \"prompt\": \"def histogram(test):\\n     \\\"Given a string representing a space separated lowercase letters, return a dictionary\\n    of the letter with the most repetition and containing the corresponding count.\",\n    \"test_cases\": [\n      {\n        \"input\": \"a b c\",\n        \"output\": {\"a\": 1, \"b\": 1, \"c\": 1}\n      },\n      {\n        \"input\": \"a a a b b c\",\n        \"output\": {\"a\": 3}\n      },\n      {\n        \"input\": \"\",\n        \"output\": {}\n      },\n      {\n        \"input\": \"hello\",\n        \"output\": {\"l\": 2}\n      }\n    ]\n  }\n]"}
{"task_id": "HumanEval/112", "modified_prompt": "{\n    \"task\": \"We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple containing the result string and True/False for the check.\",\n    \"test_cases\": [\n        {\n            \"input\": [\"aba\", \"c\"],\n            \"output\": (\"b\", True)\n        },\n        {\n            \"input\": [\"racecar\", \"a\"],\n            \"output\": (\"recr\", False)\n        },\n        {\n            \"input\": [\"apple\", \"apl\"],\n            \"output\": (\"e\", True)\n        },\n        {\n            \"input\": [\"hello\", \"hl\"],\n            \"output\": (\"eo\", False)\n        },\n        {\n            \"input\": [\"abba\", \"b\"],\n            \"output\": (\"aa\", True)\n        }\n    ]\n}"}
{"task_id": "HumanEval/113", "modified_prompt": "{\n    \"prompt\": \"def odd_count(lst):\\n     \\\"Given a list of strings, where each string consists of only digits, return a list.\\n    Each element i of the output should be \\\"the number of odd elements in the\\n    string i of the input.\\\" where all the i\\'s should be replaced by the number\",\n    \"test_cases\": [\n        {\"input\": [\"123\", \"456\", \"789\"], \"expected_output\": [1, 0, 3]},\n        {\"input\": [\"2468\", \"1357\", \"9876\"], \"expected_output\": [0, 4, 1]},\n        {\"input\": [\"111\", \"222\", \"333\"], \"expected_output\": [3, 0, 3]},\n        {\"input\": [\"555555\", \"666666\", \"777777\"], \"expected_output\": [6, 0, 6]},\n        {\"input\": [\"0\", \"2\", \"4\"], \"expected_output\": [0, 0, 0]}\n    ]\n}"}
{"task_id": "HumanEval/114", "modified_prompt": "{\"nums\": [1,2,3,4,5]} # Expected Output: 1\n{\"nums\": [-1,2,-3,4,-5]} # Expected Output: -4\n{\"nums\": [5,-3,8,-4,2]} # Expected Output: -7\n{\"nums\": [0,0,0,0,0]} # Expected Output: 0\n{\"nums\": [-5,-4,-3,-2,-1]} # Expected Output: -15"}
{"task_id": "HumanEval/115", "modified_prompt": "{\n    \"prompt\": \"def max_fill(grid, capacity):\\n    import math\\n     \\\"\\n    You are given a rectangular grid of wells. Each row represents a single well,\\n    and each 1 in a row represents a single unit of water.\\n    Each well has a corresponding bucket that can be used to extract water from it, \\n    and all buckets have the same capacity.\",\n    \"test_cases\": [\n        \"max_fill([[1,0,1,1],[1,1,0,1]], 5)\",\n        \"max_fill([[0,1,0,1],[1,1,1,0]], 4)\",\n        \"max_fill([[1,1,1],[0,0,0]], 3)\",\n        \"max_fill([[1,1,0,1],[0,1,1,0],[1,0,1,1]], 6)\",\n        \"max_fill([[0,0],[1,1],[0,1]], 5)\"\n    ]\n}"}
{"task_id": "HumanEval/116", "modified_prompt": "1. Input: [0,1,2,3,4,5,6,7,8,9,10]\nExpected Output: [0,1,2,4,8,3,5,6,9,10,7]\n\n2. Input: [23, 34, 57, 47, 68, 82, 93, 12, 4, 1, 0]\nExpected Output: [0,1,4,12,23,34,68,82,57,47,93]\n\n3. Input: [111, 222, 333, 444, 555, 666, 777, 888, 999, 1111, 1000]\nExpected Output: [1000,111,222,333,444,777,1111,555,666,888,999]\n\n4. Input: [15, 22, 32, 42, 52, 62, 72, 82, 92, 102, 112]\nExpected Output: [15,22,32,42,52,62,72,82,92,102,112]\n\n5. Input: []\nExpected Output: []\n\n6. Input: [1]\nExpected Output: [1]"}
{"task_id": "HumanEval/117", "modified_prompt": "{\n    \"prompt\": \"Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s.\",\n    \"test_cases\": [\n        [\"abcdefg\", 3],\n        [\"banana\", 2],\n        [\"apple\", 1],\n        [\"elephant\", 4],\n        [\"orange\", 2],\n        [\"pineapple\", 3],\n        [\"strawberry\", 3],\n        [\"watermelon\", 4],\n        [\"grapefruit\", 3],\n        [\"kiwi\", 0]\n    ]\n}"}
{"task_id": "HumanEval/118", "modified_prompt": "{\n   \"prompt\": \"def get_closest_vowel(word):\\n     \\\"You are given a word. Your task is to find the closest vowel that stands between \\n    two consonants from the right side of the word (case sensitive).\\n    \\n    Vowels in the beginning and ending doesn\\'t count. Return empty string if you didn\\'t\\n    find any vowel met the above condition.\",\n   \"test_cases\": [\n        {\n            \"input\": \"computer\",\n            \"output\": \"u\"\n        },\n        {\n            \"input\": \"string\",\n            \"output\": \"\"\n        },\n        {\n            \"input\": \"programming\",\n            \"output\": \"o\"\n        },\n        {\n            \"input\": \"task\",\n            \"output\": \"a\"\n        },\n        {\n            \"input\": \"solution\",\n            \"output\": \"o\"\n        },\n        {\n            \"input\": \"testing\",\n            \"output\": \"e\"\n        },\n        {\n            \"input\": \"vowel\",\n            \"output\": \"\"\n        }\n    ]\n}"}
{"task_id": "HumanEval/119", "modified_prompt": "Input 1:\nmatch_parens(['((()))', '((())'])\nOutput 1:\nFalse\n\nInput 2:\nmatch_parens(['((())))', '(()))'])\nOutput 2:\nFalse"}
{"task_id": "HumanEval/120", "modified_prompt": "Test Cases:\n\n- Input: arr = [11, 4, 10, 3, 8], k = 3\n  Output: [10, 11, 8]\n\n- Input: arr = [5, 2, 9, 1, 7], k = 5\n  Output: [1, 2, 5, 7, 9]\n\n- Input: arr = [10, 15, 7, 20, 5], k = 2\n  Output: [20, 15]\n\n- Input: arr = [2, 8, 3, 12, 4], k = 4\n  Output: [12, 8, 4, 3]\n\n- Input: arr = [1, 6, 9, 4, 7, 3], k = 1\n  Output: [9]"}
{"task_id": "HumanEval/121", "modified_prompt": "{\n    \"prompt\": \"def solution(lst):\\n     \\\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\",\n    \"test cases\": [\n        {\n            \"input\": [1, 2, 3, 4, 5],\n            \"expected output\": 4\n        },\n        {\n            \"input\": [10, 15, 20, 25, 30],\n            \"expected output\": 40\n        },\n        {\n            \"input\": [5, 6, 7, 8, 9, 10],\n            \"expected output\": 14\n        },\n        {\n            \"input\": [0, 2, 4, 6, 8, 10],\n            \"expected output\": 0\n        },\n        {\n            \"input\": [2, 4, 6, 8, 10, 12],\n            \"expected output\": 0\n        }\n    ]\n}"}
{"task_id": "HumanEval/122", "modified_prompt": "[\n    {\"arr\": [1, 2, 3, 4, 5], \"k\": 4, \"sum\": 10},\n    {\"arr\": [100, 999, 32, 57, 99], \"k\": 3, \"sum\": 132},\n    {\"arr\": [11, 22, 33, 44, 55], \"k\": 2, \"sum\": 33},\n    {\"arr\": [1000, -3, 5, 67, 12], \"k\": 5, \"sum\": 66},\n    {\"arr\": [0, 1, 2, 3, 4], \"k\": 2, \"sum\": 3}\n]"}
{"task_id": "HumanEval/123", "modified_prompt": "{\n    \"description\": \"Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\\n\\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\\nas follows: start with any positive integer n.\",\n    \"test_cases\": [\n        {\n            \"input\": 10,\n            \"output\": [1, 5, 3, 7]\n        },\n        {\n            \"input\": 7,\n            \"output\": [1, 5, 3, 7]\n        },\n        {\n            \"input\": 2,\n            \"output\": []\n        },\n        {\n            \"input\": 20,\n            \"output\": [1, 7, 5, 3, 9]\n        },\n        {\n            \"input\": 15,\n            \"output\": [1, 5, 3, 11, 17]\n        }\n    ]\n}"}
{"task_id": "HumanEval/124", "modified_prompt": "[\n    {\n        \"description\": \"Valid date in yyyy-mm-dd format\",\n        \"input\": \"2021-05-24\",\n        \"output\": \"True\"\n    },\n    {\n        \"description\": \"Valid date in dd/mm/yyyy format\",\n        \"input\": \"24/05/2021\",\n        \"output\": \"True\"\n    },\n    {\n        \"description\": \"Valid date in mm/dd/yyyy format\",\n        \"input\": \"05/24/2021\",\n        \"output\": \"True\"\n    },\n    {\n        \"description\": \"Invalid date with letters\",\n        \"input\": \"2021-05-aa\",\n        \"output\": \"False\"\n    },\n    {\n        \"description\": \"Invalid date with incorrect month\",\n        \"input\": \"2021-13-24\",\n        \"output\": \"False\"\n    },\n    {\n        \"description\": \"Invalid date with non-existent date\",\n        \"input\": \"2021-02-31\",\n        \"output\": \"False\"\n    },\n    {\n        \"description\": \"Invalid date with incorrect format\",\n        \"input\": \"May-24-2021\",\n        \"output\": \"False\"\n    }\n]"}
{"task_id": "HumanEval/125", "modified_prompt": "{\n  \"HumanEval/125\": [\n    \"Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you should split on commas, if no commas exists you should return the number of lower-case letters with odd order in the alphabet, ord(\\'a\\') = 0, ord(\\'b\\') = 1, ...\",\n    \"split_words('This is a test') = ['This', 'is', 'a', 'test']\",\n    \"split_words('This, is, another, test') = ['This', 'is', 'another', 'test']\",\n    \"split_words('Hello, World!') = ['Hello', 'World!']\",\n    \"split_words('Lowercaseletterswithoddorderinthealphabet') = 17\"\n  ]\n}"}
{"task_id": "HumanEval/126", "modified_prompt": "{\n    \"prompt\": \"def is_sorted(lst):\\n    \\\"\\n    Given a list of numbers, return whether or not they are sorted\\n    in ascending order. If list has more than 1 duplicate of the same\\n    number, return False. Assume no negative numbers and only integers.\",\n    \"test_cases\": [\n        {\n            \"input\": [1, 2, 3, 4, 5],\n            \"output\": True\n        },\n        {\n            \"input\": [5, 4, 3, 2, 1],\n            \"output\": False\n        },\n        {\n            \"input\": [1],\n            \"output\": True\n        },\n        {\n            \"input\": [],\n            \"output\": True\n        },\n        {\n            \"input\": [1, 1, 2, 2, 3],\n            \"output\": False\n        },\n        {\n            \"input\": [1, 2, 3, 3, 3],\n            \"output\": False\n        },\n        {\n            \"input\": [1, 2, 3, 4, 4],\n            \"output\": False\n        },\n        {\n            \"input\": [-1, 0, 1],\n            \"output\": True\n        },\n        {\n            \"input\": [1.5, 2.5, 3.5],\n            \"output\": True\n        }\n\n    ]\n}"}
{"task_id": "HumanEval/127", "modified_prompt": "{\n\"prompt\": 'def intersection(interval1, interval2):\\n     \"You are given two intervals,\\n    where each interval is a pair of integers.',\n\"test_cases\": [\n    {\n    \"input\": [[1, 3], [2, 4]],\n    \"output\": [2, 3]\n    },\n    {\n    \"input\": [[-5, 5], [-3, 3]],\n    \"output\": [-3, 3]\n    },\n    {\n    \"input\": [[-10, 0], [-5, 5]],\n    \"output\": [-5, 0]\n    },\n    {\n    \"input\": [[1, 10], [3, 7]],\n    \"output\": [3, 7]\n    },\n    {\n    \"input\": [[0, 0], [0, 0]],\n    \"output\": [0, 0]\n    }\n]\n}"}
{"task_id": "HumanEval/128", "modified_prompt": "{\n    \"prompt\": \"def prod_signs(arr):\\n     \\\"\\n    You are given an array arr of integers and you need to return\\n    sum of magnitudes of integers multiplied by product of all signs\\n    of each number in the array, represented by 1, -1 or 0.\\n    Note: return None for empty arr.\",\n    \"test_cases\": [\n        {\n            \"arr\": [1, 2, 3],\n            \"output\": 6\n        },\n        {\n            \"arr\": [-1, -2, -3],\n            \"output\": 6\n        },\n        {\n            \"arr\": [1, -2, 3],\n            \"output\": -6\n        },\n        {\n            \"arr\": [],\n            \"output\": None\n        },\n        {\n            \"arr\": [0, 0, 0],\n            \"output\": 0\n        }\n    ]\n}"}
{"task_id": "HumanEval/129", "modified_prompt": "{\n    \"prompt\": \"def minPath(grid, k):\\n     \\\"\\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \\n    each cell of the grid contains a value.\",\n    \"test cases\": [\n        {\n            \"grid\": [[1,2,3],\n                    [4,5,6],\n                    [7,8,9]],\n            \"k\": 10,\n            \"output\": 0\n        },\n        {\n            \"grid\": [[1,2,3],\n                    [4,5,6],\n                    [7,8,9]],\n            \"k\": 20,\n            \"output\": 0\n        },\n        {\n            \"grid\": [[9,8,7],\n                    [6,5,4],\n                    [3,2,1]],\n            \"k\": 3,\n            \"output\": 3\n        },\n        {\n            \"grid\": [[-1,-2,-3],\n                    [-4,-5,-6],\n                    [-7,-8,-9]],\n            \"k\": 5,\n            \"output\": 15\n        },\n        {\n            \"grid\": [[2,3],\n                    [4,5]],\n            \"k\": 4,\n            \"output\": 4\n        }\n    ]\n}"}
{"task_id": "HumanEval/130", "modified_prompt": "Input: n = 5\nExpected Output: 0, 1, 1, 2, 4\nInput: n = 8\nExpected Output: 0, 1, 1, 2, 4, 7, 13, 24\nInput: n = 15\nExpected Output: 0, 1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504, 927, 1705"}
{"task_id": "HumanEval/131", "modified_prompt": "{\n    \"prompt\": \"def digits(n):\\n     \\\"Given a positive integer n, return the product of the odd digits.\\n    Return 0 if all digits are even.\",\n    \"test_cases\": [\n        {\"n\": 123, \"output\": 3},\n        {\"n\": 1357, \"output\": 105},\n        {\"n\": 2468, \"output\": 0},\n        {\"n\": 0, \"output\": 0},\n        {\"n\": 3141592653589793, \"output\": 135135}\n    ]\n}"}
{"task_id": "HumanEval/132", "modified_prompt": "{\n    \"prompt\": \"def is_nested(string):\\n    \\\"\\n    Create a function that takes a string as input which contains only square brackets.\\n    The function should return True if and only if there is a valid subsequence of brackets\",\n    \"test_cases\": [\n        {\n            \"input_string\": \"[]\",\n            \"expected_output\": True\n        },\n        {\n            \"input_string\": \"[[]]\",\n            \"expected_output\": True\n        },\n        {\n            \"input_string\": \"[[[]]]\",\n            \"expected_output\": True\n        },\n        {\n            \"input_string\": \"[[[]]][]\",\n            \"expected_output\": True\n        },\n        {\n            \"input_string\": \"[[[]]]][\",\n            \"expected_output\": False\n        },\n        {\n            \"input_string\": \"[\",\n            \"expected_output\": False\n        },\n        {\n            \"input_string\": \"]\",\n            \"expected_output\": False\n        },\n        {\n            \"input_string\": \"[][][]\",\n            \"expected_output\": True\n        },\n        {\n            \"input_string\": \"[][][][[\",\n            \"expected_output\": False\n        },\n        {\n            \"input_string\": \"][[]]\",\n            \"expected_output\": False\n        }\n    ]\n}"}
{"task_id": "HumanEval/133", "modified_prompt": "{\n    \"prompt\": \"def sum_squares(lst):\\n     \\\"You are given a list of numbers.\\n    You need to return the sum of squared numbers in the given list,\\n    round each element in the list to the upper int(Ceiling) first.\",\n    \"test_cases\": [\n        {\"input\": [1, 2, 3], \"output\": 14},\n        {\"input\": [0, 5, 10], \"output\": 125},\n        {\"input\": [-2, -4, 6], \"output\": 56},\n        {\"input\": [2.5, 3.7, 4.2], \"output\": 35},\n        {\"input\": [], \"output\": 0},\n        {\"input\": [8], \"output\": 64}\n    ]\n}\n\n# Another possible response:\n\n{\n    \"prompt\": \"def sum_squares(lst):\\n     \\\"You are given a list of numbers.\\n    You need to return the sum of squared numbers in the given list,\\n    round each element in the list to the upper int(Ceiling) first.\",\n    \"test_cases\": [\n        {\"input\": [1, 2, 3], \"output\": 14},\n        {\"input\": [0, 5, 10], \"output\": 125},\n        {\"input\": [-2, -4, 6], \"output\": 56},\n        {\"input\": [2.5, 3.7, 4.2], \"output\": 35},\n        {\"input\": [], \"output\": 0},\n        {\"input\": [8], \"output\": 64},\n        {\"input\": [1, 2, 3, 4, 5], \"output\": 55},\n        {\"input\": [-10, 0, 10], \"output\": 150},\n        {\"input\": [1, 2, 3, 4, 5, 6], \"output\": 91},\n        {\"input\": [2.1, 5.9, 10.7], \"output\": 198}\n    ]\n}"}
{"task_id": "HumanEval/134", "modified_prompt": "{\n    \"134\": {\n        \"prompt\": \"def check_if_last_char_is_a_letter(txt):\\n    \\\"\\n    Create a function that returns True if the last character\\n    of a given string is an alphabetical character and is not\\n    a part of a word, and False otherwise.\",\n        \"test_cases\": [\n            \"check_if_last_char_is_a_letter('Hello!')\", // Expected output: True\n            \"check_if_last_char_is_a_letter('Hello')\", // Expected output: False\n            \"check_if_last_char_is_a_letter('Hello world')\", // Expected output: False\n            \"check_if_last_char_is_a_letter('Have a nice day!')\", // Expected output: True\n            \"check_if_last_char_is_a_letter('1234')\", // Expected output: False\n            \"check_if_last_char_is_a_letter('AbcdE')\", // Expected output: True\n            \"check_if_last_char_is_a_letter('Abc3d')\", // Expected output: True\n            \"check_if_last_char_is_a_letter('Hello123')\", // Expected output: False\n            \"check_if_last_char_is_a_letter('Hello dear')\", // Expected output: False\n            \"check_if_last_char_is_a_letter('Hello, how are you?')\", // Expected output: True\n        ]\n    }\n}"}
{"task_id": "HumanEval/135", "modified_prompt": "{\n  \"prompt\": \"Create a function which returns the largest index of an element which is not greater than or equal to the element immediately preceding it. If no such element exists, then return -1.\",\n  \"test_cases\": [\n    {\n      \"input\": [1, 2, 3, 4, 5],\n      \"output\": 0\n    },\n    {\n      \"input\": [5, 4, 3, 2, 1],\n      \"output\": -1\n    },\n    {\n      \"input\": [1, 3, 2, 4, 5],\n      \"output\": 1\n    },\n    {\n      \"input\": [],\n      \"output\": -1\n    },\n    {\n      \"input\": [2, 2, 2, 2],\n      \"output\": -1\n    },\n    {\n      \"input\": [1, 2, 2, 3, 2, 1],\n      \"output\": 3\n    }\n  ]\n}"}
{"task_id": "HumanEval/136", "modified_prompt": "{\n    \"HumanEval/136\": {\n        \"input\": [\n            {\n                \"lst\": [1, 2, 3, 4, 5]\n            },\n            {\n                \"lst\": [-5, -10, -15]\n            },\n            {\n                \"lst\": [0]\n            },\n            {\n                \"lst\": [-10, -5, 0, 5, 10]\n            },\n            {\n                \"lst\": [10, 9, 8, 7, 6]\n            }\n        ],\n        \"output\": [\n            {\n                \"largest_smallest_integers\": (None, 1)\n            },\n            {\n                \"largest_smallest_integers\": (-5, None)\n            },\n            {\n                \"largest_smallest_integers\": (None, None)\n            },\n            {\n                \"largest_smallest_integers\": (-5, 5)\n            },\n            {\n                \"largest_smallest_integers\": (None, None)\n            }\n        ]\n    }\n}"}
{"task_id": "HumanEval/137", "modified_prompt": "{\n    \"task\": \"Create a function that takes integers, floats, or strings representing real numbers, and returns the larger variable in its given variable type. Return None if the values are equal.\",\n    \"test_cases\": [\n        {\"input\": (5, 10), \"output\": 10},\n        {\"input\": (4.3, 2.1), \"output\": 4.3},\n        {\"input\": (\"abc\", \"def\"), \"output\": None},\n        {\"input\": (-2.8, -4.5), \"output\": -2.8},\n        {\"input\": (\"3.14\", 3.14), \"output\": 3.14}\n    ]\n}"}
{"task_id": "HumanEval/138", "modified_prompt": "{\n  \"prompt\": \"HumanEval/138\", \n  \"value\": [\n    8,\n    10,\n    100,\n    200,\n    456,\n    0,\n    -4,\n    \"a\",\n    True\n  ]\n}"}
{"task_id": "HumanEval/139", "modified_prompt": "{\n    \"prompt\": \"def special_factorial(n):\\n     \"The Brazilian factorial is defined as:\\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\\n    where n > 0\",\n    \"test_cases\": [\n        {\"input\": 0, \"output\": 0},\n        {\"input\": 1, \"output\": 1},\n        {\"input\": 2, \"output\": 2},\n        {\"input\": 3, \"output\": 12},\n        {\"input\": 4, \"output\": 288},\n        {\"input\": 5, \"output\": 34560}\n    ]\n}"}
{"task_id": "HumanEval/140", "modified_prompt": "\"HumanEval/140\": [\n    [\"Given a string with no spaces, the output should be the same as the input.\", \"HelloWorld\"],\n    [\"Given a string with one space, the output should be the same with the space replaced by an underscore.\", \"Hello_World\"],\n    [\"Given a string with multiple spaces, the output should have all spaces replaced with underscores.\", \"Hello_World_How_are_you\"],\n    [\"Given a string with consecutive spaces, the output should have all consecutive spaces replaced with one underscore.\", \"Hello_World_How_are_you\"],\n    [\"Given a string with two consecutive spaces, the output should have both spaces replaced with underscores.\", \"Hello__World\"],\n    [\"Given an empty string, the output should also be empty.\", \"\"],\n    [\"Given a string that begins or ends with spaces, the output should have those spaces replaced by an underscore.\", \"_Hello_World_\", \"Hello_World_\"],\n    [\"Given a string with special characters and punctuations, the output should have those characters unchanged.\", \"Hello!World?How_@re_you\"],\n    [\"Given a string with only spaces, the output should have all spaces replaced with underscores.\", \"____\"],\n    [\"Given a string with a mix of spaces and other characters, the output should have all spaces replaced with underscores while other characters remain unchanged.\", \"!#Hello_World_*Are_you_?\"],\n]"}
{"task_id": "HumanEval/141", "modified_prompt": "\"def file_name_check(file_name):\\n     \"Create a function which takes a string representing a file\\'s name, and returns\\n    \\'Yes\\' if the the file\\'s name is valid, and returns \\'No\\' otherwise.\n\n{\n    \"file1.txt\": \"Yes\",\n    \"file2.JPG\": \"Yes\",\n    \"file name.txt\": \"No\",\n    \"file three.jpeg\": \"No\",\n    \"file$%#@.png\": \"No\"\n}"}
{"task_id": "HumanEval/142", "modified_prompt": "{\n  \"problem\": \"def sum_squares(lst):\\n     \\\"\\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3.\",\n  \"test_cases\": [\n    {\n      \"input\": [1, 2, 3, 4, 5],\n      \"output\": 6\n    },\n    {\n      \"input\": [2, 4, 6, 8, 10],\n      \"output\": 120\n    },\n    {\n      \"input\": [2, 3, 4, 5, 6],\n      \"output\": 26\n    }\n  ]\n}"}
{"task_id": "HumanEval/143", "modified_prompt": "[\n    {\n        \"prompt\": \"def words_in_sentence(sentence):\\n     \\\"\\n    You are given a string representing a sentence,\\n    the sentence contains some words separated by a space,\\n    and you have to return a string that contains the words from the original sentence,\",\n        \"test_case\": [\n            \"Input: 'This is a string', Output: 'This is a string'\",\n            \"Input: 'Hello world', Output: 'Hello world'\",\n            \"Input: 'Good morning to you', Output: 'Good morning to you'\",\n            \"Input: '', Output: ''\",\n            \"Input: '1 2 3', Output: '1 2 3'\"\n        ]\n    }\n]"}
{"task_id": "HumanEval/144", "modified_prompt": "{\n    \"task\": \"def simplify(x, n):\\n     \\\"Your task is to implement a function that will simplify the expression\\n    x * n. The function returns True if x * n evaluates to a whole number and False\\n    otherwise.\",\n    \"test_cases\": [\n        {\n            \"description\": \"integer multiplication\",\n            \"input\": \"x = 5, n = 3\",\n            \"expected_output\": \"True\"\n        },\n        {\n            \"description\": \"fractional multiplication\",\n            \"input\": \"x = 2.5, n = 4\",\n            \"expected_output\": \"False\"\n        },\n        {\n            \"description\": \"zero multiplication\",\n            \"input\": \"x = 0, n = 6\",\n            \"expected_output\": \"True\"\n        },\n        {\n            \"description\": \"negative multiplication\",\n            \"input\": \"x = -8, n = 2\",\n            \"expected_output\": \"True\"\n        },\n        {\n            \"description\": \"decimal multiplication\",\n            \"input\": \"x = 0.25, n = 8\",\n            \"expected_output\": \"False\"\n        }\n    ]\n}"}
{"task_id": "HumanEval/145", "modified_prompt": "{\n    \"original_prompt\": \"def order_by_points(nums):\\n     \\\"Write a function which sorts the given list of integers\\n    in ascending order according to the sum of their digits.\",\n    \"test_cases\": [\n        {\n            \"input\": [123, 4, 56, 77],\n            \"expected_output\": [4, 56, 77, 123]\n        },\n        {\n            \"input\": [9, 8, 7, 6, 5],\n            \"expected_output\": [5, 6, 7, 8, 9]\n        },\n        {\n            \"input\": [100, 23, 4, 18, 9],\n            \"expected_output\": [4, 9, 18, 23, 100]\n        },\n        {\n            \"input\": [0, 1, 2, 3, 4, 5],\n            \"expected_output\": [0, 1, 2, 3, 4, 5]\n        },\n        {\n            \"input\": [111, 222, 333, 444],\n            \"expected_output\": [111, 222, 333, 444]\n        }\n    ]\n}"}
{"task_id": "HumanEval/146", "modified_prompt": "{\n    \"problem\": \"def specialFilter(nums):\\n     \\\"Write a function that takes an array of numbers as input and returns \\n    the number of elements in the array that are greater than 10 and both \\n    first and last digits of a number are odd\",\n    \"test_cases: {\n        Input: [12, 23, 45, 67, 89, 91, 209],\n        Expected Output: 5\n    },\n    {\n        Input: [5, 11, 13, 25, 36, 48, 79],\n        Expected Output: 1\n    },\n    {\n        Input: [105, 246, 333, 400, 511, 678],\n        Expected Output: 2\n    }\n}"}
{"task_id": "HumanEval/147", "modified_prompt": "{\n    \"prompt\": \"def get_max_triples(n):\\n     \"\\n    You are given a positive integer n. You have to create an integer array a of length n.\",\n    \"test_cases\": [\n        \"get_max_triples(3) = [0, 0, 0]\",\n        \"get_max_triples(5) = [0, 0, 0, 0, 0]\",\n        \"get_max_triples(1) = [0]\",\n        \"get_max_triples(8) = [0, 0, 0, 0, 0, 0, 0, 0]\"\n    ]\n}"}
{"task_id": "HumanEval/148", "modified_prompt": "{\n  \"Prompt\": \"def bf(planet1, planet2):\\n    \\\"\\n    There are eight planets in our solar system: the closerst to the Sun \\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \\n    Uranus, Neptune.\",\n  \"Test Cases\": [\n    [\"Mercury\", \"Venus\"],\n    [\"Venus\", \"Earth\"],\n    [\"Mars\", \"Jupiter\"],\n    [\"Jupiter\", \"Saturn\"],\n    [\"Saturn\", \"Uranus\"],\n    [\"Uranus\", \"Neptune\"],\n    [\"Earth\", \"Mars\"],\n    [\"Neptune\", \"Mercury\"],\n    [\"Mercury\", \"Neptune\"]\n  ]\n}"}
{"task_id": "HumanEval/149", "modified_prompt": "{\n    \"prompt\": \"def sorted_list_sum(lst):\\n     \\\"Write a function that accepts a list of strings as a parameter,\\n    deletes the strings that have odd lengths from it,\",\n    \"test_cases\": [\n        {\n            \"input\": [\"abc\", \"defgh\", \"ijkl\", \"mnopq\", \"rstuv\"],\n            \"output\": [\"defgh\", \"mnopq\"],\n            \"explanation\": \"The given list contains strings with odd and even lengths. The expected output should only contain strings with even lengths.\"\n        },\n        {\n            \"input\": [\"hello\", \"world\", \"python\", \"java\", \"c++\", \"swift\"],\n            \"output\": [\"python\", \"c++\"],\n            \"explanation\": \"The given list contains strings with odd and even lengths. The expected output should only contain strings with even lengths.\"\n        },\n        {\n            \"input\": [\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"],\n            \"output\": [],\n            \"explanation\": \"The given list contains strings with odd lengths. The expected output should be an empty list.\"\n        }\n    ]\n}"}
{"task_id": "HumanEval/150", "modified_prompt": "[\n  {\n    \"prompt\": \"def x_or_y(n, x, y):\\n     \\\"A simple program which should return the value of x if n is \\n    a prime number and should return the value of y otherwise.\\n\",\n    \"test_case\": \"n = 5, x = 10, y = 20\\nn = 7, x = 30, y = 40\\nn = 12, x = 50, y = 60\"\n  }\n]"}
{"task_id": "HumanEval/151", "modified_prompt": "{\n  \"prompt\": \"def double_the_difference(lst):\\\\n    \\\"\\\\n    Given a list of numbers, return the sum of squares of the numbers\\\\n    in the list that are odd. Ignore numbers that are negative or not integers.\",\n  \"test_cases\": [\n    {\"input\": [1, 2, 3, 4], \"output\": 10},\n    {\"input\": [5, 7, 2, 8, 3], \"output\": 59},\n    {\"input\": [-3, 6, 9, -2, 0], \"output\": 90},\n    {\"input\": [-1, -5, -4, 3, 8, 10], \"output\": 9},\n    {\"input\": [2, 4, 6], \"output\": 0}\n  ]\n}"}
{"task_id": "HumanEval/152", "modified_prompt": "{\n  \"prompt\": \"def compare(game,guess):\\n     \\\"I think we all remember that feeling when the result of some long-awaited\\n    event is finally known. The feelings and thoughts you have at that moment are\\n    definitely worth noting down and comparing.\",\n  \"test_cases\": [\n    {\n      \"input\": [\"rock paper scissors\", \"paper\"],\n      \"output\": \"You lost!\"\n    },\n    {\n      \"input\": [\"lottery\", \"winning ticket\"],\n      \"output\": \"You won!\"\n    },\n    {\n      \"input\": [\"exam\", \"passing grade\"],\n      \"output\": \"You passed!\"\n    },\n    {\n      \"input\": [\"football game\", \"winning touchdown\"],\n      \"output\": \"You won!\"\n    }\n  ]\n}"}
{"task_id": "HumanEval/153", "modified_prompt": "{\n    \"HumanEval/153\": {\n        \"inputs\": [\n            {\n                \"class_name\": \"Node\",\n                \"extensions\": [\"TreeNode\"]\n            },\n            {\n                \"class_name\": \"Player\",\n                \"extensions\": [\"Warrior\", \"Mage\", \"Rogue\"]\n            },\n            {\n                \"class_name\": \"Organization\",\n                \"extensions\": []\n            }\n        ],\n        \"outputs\": [\n            \"Strongest_Extension should return the correct class when given a valid class name and extensions.\",\n            \"Strongest_Extension should return an error when given an invalid class name.\",\n            \"Strongest_Extension should return an error when given invalid extensions.\",\n            \"Strongest_Extension should be able to handle empty extensions.\"\n        ]\n    }\n}"}
{"task_id": "HumanEval/154", "modified_prompt": "{\n  \"prompt\": \"def cycpattern_check(a , b):\\n     \\\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\",\n  \"test_cases\": [\n    [\"cycpattern_check('cat', 'at')\", \"True\"],\n    [\"cycpattern_check('bird', 'irb')\", \"True\"],\n    [\"cycpattern_check('apple', 'leapp')\", \"True\"],\n    [\"cycpattern_check('twitter', 'tertwi')\", \"True\"],\n    [\"cycpattern_check('python', 'thonpy')\", \"True\"]\n  ]\n}"}
{"task_id": "HumanEval/155", "modified_prompt": "{\n    \"prompt\": \"def even_odd_count(num):\\n     \\\"Given an integer. return a tuple that has the number of even and odd digits respectively.\",\n    \"test_cases\": [\n        {\"input\": 123, \"output\": (1, 2)},\n        {\"input\": 2468, \"output\": (4, 0)},\n        {\"input\": 13579, \"output\": (0, 5)},\n        {\"input\": 0, \"output\": (1, 0)},\n        {\"input\": -123, \"output\": (1, 2)},\n        {\"input\": 987654321, \"output\": (5, 4)}\n    ]\n}"}
{"task_id": "HumanEval/156", "modified_prompt": "{\n  \"prompt\": \"def int_to_mini_roman(number):\\n     \\\"\\n    Given a positive integer, obtain its roman numeral equivalent as a string,\\n    and return it in lowercase.\",\n  \"test_cases\": [\n    1,\n    2,\n    5,\n    7,\n    10,\n    20,\n    50,\n    100,\n    500,\n    1000\n  ]\n}"}
{"task_id": "HumanEval/157", "modified_prompt": "{\n    \"prompt\": \"Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise.\",\n    \"testcases\": [\n        {\"input\": (3, 4, 5), \"expected_output\": True},\n        {\"input\": (5, 12, 13), \"expected_output\": True},\n        {\"input\": (7, 24, 25), \"expected_output\": True},\n        {\"input\": (13, 84, 85), \"expected_output\": True},\n        {\"input\": (8, 15, 17), \"expected_output\": True},\n        {\"input\": (9, 40, 41), \"expected_output\": True},\n        {\"input\": (12, 35, 37), \"expected_output\": True},\n        {\"input\": (20, 21, 29), \"expected_output\": False},\n        {\"input\": (5, 6, 10), \"expected_output\": False},\n        {\"input\": (10, 18, 24), \"expected_output\": False}\n    ]\n}"}
{"task_id": "HumanEval/158", "modified_prompt": "1. Input: [\"hello\", \"world\", \"cat\", \"dog\"]\n   Ouptut: \"hello\"\n\n2. Input: [\"algorithm\", \"data\", \"structure\"]\n   Output: \"structure\"\n\n3. Input: [\"python\", \"java\", \"c++\", \"ruby\"]\n   Output: \"python\"\n\n4. Input: [\"apple\", \"banana\", \"orange\", \"grape\"]\n   Output: \"orange\"\n\n5. Input: [\"March\", \"April\", \"May\", \"June\"]\n   Output: \"April\"\n\n6. Input: [\"1\", \"22\", \"333\", \"4444\"]\n   Output: \"4444\"\n\n7. Input: [\"abc\", \"defgh\", \"ijklm\", \"nopqr\"]\n   Output: \"defgh\"\n\n8. Input: [\"hello\", \"world\", \"code\", \"programming\"]\n   Output: \"programming\"\n\n9. Input: [\"a\", \"ab\", \"abc\", \"abcd\"]\n   Output: \"abcd\"\n\n10. Input: [\"java\", \"python\", \"c++\", \"ruby\"]\n    Output: \"python\""}
{"task_id": "HumanEval/159", "modified_prompt": "Test Case 1:\n{\n    \"prompt\": \"def eat(number, need, remaining):\\n     \\\"\\n    You\\'re a hungry rabbit, and you already have eaten a certain number of carrots,\\n    but now you need to eat more carrots to complete the day\\'s meals.\",\n    \"test_case\": [\n        {\n            \"number\": 0,\n            \"need\": 10,\n            \"remaining\": 10\n        },\n        {\n            \"number\": 5,\n            \"need\": 8,\n            \"remaining\": 3\n        },\n        {\n            \"number\": 10,\n            \"need\": 12,\n            \"remaining\": 2\n        }\n    ]\n}\n\nTest Case 2:\n{\n    \"prompt\": \"def eat(number, need, remaining):\\n     \\\"\\n    You\\'re a hungry rabbit, and you already have eaten a certain number of carrots,\\n    but now you need to eat more carrots to complete the day\\'s meals.\",\n    \"test_case\": [\n        {\n            \"number\": 10,\n            \"need\": 10,\n            \"remaining\": 0\n        },\n        {\n            \"number\": 0,\n            \"need\": 5,\n            \"remaining\": 5\n        },\n        {\n            \"number\": 3,\n            \"need\": 6,\n            \"remaining\": 3\n        }\n    ]\n}\n\nTest Case 3:\n{\n    \"prompt\": \"def eat(number, need, remaining):\\n     \\\"\\n    You\\'re a hungry rabbit, and you already have eaten a certain number of carrots,\\n    but now you need to eat more carrots to complete the day\\'s meals.\",\n    \"test_case\": [\n        {\n            \"number\": -5,\n            \"need\": 10,\n            \"remaining\": 15\n        },\n        {\n            \"number\": 6,\n            \"need\": 9,\n            \"remaining\": 3\n        },\n        {\n            \"number\": 12,\n            \"need\": 15,\n            \"remaining\": 3\n        }\n    ]\n}"}
{"task_id": "HumanEval/160", "modified_prompt": "{\n    \"Original Prompt\": \"def do_algebra(operator, operand):\\n   \\n  Given two lists operator, and operand. The first list has basic algebra operations, and \\n  the second list is a list of integers.\",\n    \"Test Cases\": [\n        {\n            \"operator\": [\"+\", \"-\", \"*\", \"/\"],\n            \"operand\": [1, 2, 3, 4],\n            \"expected_output\": [3, -1, 6, 0.25]\n        },\n        {\n            \"operator\": [\"**\", \"//\", \"%\"],\n            \"operand\": [5, 2, 10],\n            \"expected_output\": [25, 2, 0]\n        },\n        {\n            \"operator\": [\"==\", \"!=\", \">\", \"<\"],\n            \"operand\": [6, 6, 5],\n            \"expected_output\": [True, False, True]\n        }\n    ]\n}"}
{"task_id": "HumanEval/161", "modified_prompt": "Test 1:\nInput: \"abcdefg\"\nOutput: \"ABCDEFG\"\n\nTest 2:\nInput: \"12345\"\nOutput: \"12345\"\n\nTest 3:\nInput: \"aBcDeFg\"\nOutput: \"AbCdEfG\"\n\nTest 4:\nInput: \"123abc\"\nOutput: \"123ABC\"\n\nTest 5:\nInput: \"aBcDe123\"\nOutput: \"AbCdE123\"\n\nTest 6:\nInput: \"!!@#$%\"\nOutput: \"!!@#$%\"\n\nTest 7:\nInput: \"Hello World\"\nOutput: \"HeLLO wORLD\""}
{"task_id": "HumanEval/162", "modified_prompt": "{\n    \"test_case_1\": {\n        \"input\": \"Hello World!\",\n        \"expected_output\": \"6cd3556deb0da54bca060b4c39479839\"\n    },\n    \"test_case_2\": {\n        \"input\": \"12345\",\n        \"expected_output\": \"827ccb0eea8a706c4c34a16891f84e7b\"\n    },\n    \"test_case_3\": {\n        \"input\": \"\",\n        \"expected_output\": None\n    },\n    \"test_case_4\": {\n        \"input\": \"abcdefghijklmnopqrstuvwxyz\",\n        \"expected_output\": \"c3fcd3d76192e4007dfb496cca67e13b\"\n    },\n    \"test_case_5\": {\n        \"input\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n        \"expected_output\": \"437bba8e0bf58337674f4539e75186ac\"\n    }\n}"}
{"task_id": "HumanEval/163", "modified_prompt": "{\n    \"Input\": {\n        \"a\": 5,\n        \"b\": 12\n    },\n    \"Output\": [6, 8, 10, 12]\n}\n\n{\n    \"Input\": {\n        \"a\": 10,\n        \"b\": 16\n    },\n    \"Output\": [10, 12, 14, 16]\n}\n\n{\n    \"Input\": {\n        \"a\": 1,\n        \"b\": 30\n    },\n    \"Output\": [2, 4, 6, 8, 20, 22, 24, 26, 28, 30]\n}\n\n{\n    \"Input\": {\n        \"a\": 100,\n        \"b\": 120\n    },\n    \"Output\": [100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120]\n}\n\n{\n    \"Input\": {\n        \"a\": 2,\n        \"b\": 50\n    },\n    \"Output\": [2, 4, 6, 8, 20, 22, 24, 26, 28, 40, 42, 44, 46, 48, 50]\n}"}
